// basicExporter.jstalk (cmd alt ctrl e) 
(function () { "use strict";
var $hxClasses = {},$estr = function() { return js.Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var BasicExporter = function() {
	Global._trace("----------------start---------------------",{ fileName : "BasicExporter.hx", lineNumber : 29, className : "BasicExporter", methodName : "new"});
	this.setup();
};
$hxClasses["BasicExporter"] = BasicExporter;
BasicExporter.__name__ = true;
BasicExporter.prototype = {
	setup: function() {
		var conf = new exp.Config();
		conf.check();
		this.config = exp.ExportFactory.config = conf.data;
		if(this.config.cleanUp == true) this.cleanup();
		Global._trace("allPages?=" + Std.string(this.config.allPages),{ fileName : "BasicExporter.hx", lineNumber : 117, className : "BasicExporter", methodName : "setup"});
	}
	,generate: function() {
		var indent = "*";
		this.tree = new de.polygonal.ds.TreeNode(new exp.ExportContainer(null));
		this.builder = new de.polygonal.ds.TreeBuilder(this.tree);
		this.activePage = Global.doc.currentPage();
		if(this.config.allPages != true) {
			this.builder.appendChild(exp.ExportFactory.create(this.activePage)["export"]());
			this.ArtboardsLoop(this.activePage.artboards());
		} else {
			var $it0 = (function($this) {
				var $r;
				var _this = Global.doc.pages();
				$r = new NativeArrayIterator(_this);
				return $r;
			}(this));
			while( $it0.hasNext() ) {
				var page = $it0.next();
				Global.doc.setCurrentPage(page);
				this.builder.appendChild(exp.ExportFactory.create(page)["export"]());
				Global._trace(indent + page.name(),{ fileName : "BasicExporter.hx", lineNumber : 135, className : "BasicExporter", methodName : "generate"});
				this.ArtboardsLoop(page.artboards());
			}
			Global.doc.setCurrentPage(this.activePage);
		}
		Global._trace("exporter done",{ fileName : "BasicExporter.hx", lineNumber : 142, className : "BasicExporter", methodName : "generate"});
	}
	,cleanup: function() {
		try {
			var _this = NSFileManager.defaultManager();
			var error = null;
			_this.removeItemAtPath_error(this.config.imagesPath,error);
		} catch( msg ) {
			Global._trace("failde to clean view" + Std.string(msg),{ fileName : "BasicExporter.hx", lineNumber : 150, className : "BasicExporter", methodName : "cleanup"});
		}
	}
	,cleanupArtboardDir: function(art) {
		try {
			var _this = NSFileManager.defaultManager();
			var dir = helpers.Document.dir(Global.doc) + "view/images/" + art.parentPage().name() + "/" + art.name() + "/";
			var error = null;
			_this.removeItemAtPath_error(dir,error);
		} catch( msg ) {
			Global._trace("failde to clean view" + Std.string(msg),{ fileName : "BasicExporter.hx", lineNumber : 155, className : "BasicExporter", methodName : "cleanupArtboardDir"});
		}
	}
	,ArtboardsLoop: function(arts) {
		this.builder.down();
		Global._trace("ArtboardsLoop",{ fileName : "BasicExporter.hx", lineNumber : 162, className : "BasicExporter", methodName : "ArtboardsLoop"});
		var $native = new NativeArrayIterator(arts).haxeArray();
		$native.reverse();
		if(this.config.allArtBoards != true) {
			if(Global.selection != null && helpers.Layer._class(Global.selection.firstObject()) == MSArtboardGroup) this.processArtboard(Global.selection.firstObject()); else {
				helpers.UI.alert("selectan artboard\n aborting");
				throw "abort";
			}
		} else {
			var _g = 0;
			while(_g < $native.length) {
				var art = $native[_g];
				++_g;
				this.processArtboard(art);
			}
		}
		this.builder.up();
		Global._trace("end Artboard loop",{ fileName : "BasicExporter.hx", lineNumber : 179, className : "BasicExporter", methodName : "ArtboardsLoop"});
	}
	,processArtboard: function(art) {
		this.activeArtboard = art;
		var exportable = exp.ExportFactory.create(art);
		if(exportable != null) {
			this.cleanupArtboardDir(Global.selection.firstObject());
			this.builder.appendChild(exportable["export"]());
			this.bigloop(art.layers());
		}
	}
	,bigloop: function(layers,indent) {
		Global._trace(" bigloop",{ fileName : "BasicExporter.hx", lineNumber : 195, className : "BasicExporter", methodName : "bigloop"});
		this.builder.down();
		if(indent == null) indent = "-"; else indent = indent + "-";
		var $native = new NativeArrayIterator(layers).haxeArray();
		$native.reverse();
		var _g = 0;
		while(_g < $native.length) {
			var layer = $native[_g];
			++_g;
			var exported = null;
			var factory = exp.ExportFactory.create(layer);
			if(factory != null) exported = factory["export"]();
			Global._trace("------------layer---------------" + layer.name(),{ fileName : "BasicExporter.hx", lineNumber : 205, className : "BasicExporter", methodName : "bigloop"});
			if(exported != null) {
				Global._trace("--------------type-------------" + Std.string(exported.type),{ fileName : "BasicExporter.hx", lineNumber : 207, className : "BasicExporter", methodName : "bigloop"});
				this.builder.appendChild(exported);
				Global._trace("name=" + indent + layer.name(),{ fileName : "BasicExporter.hx", lineNumber : 209, className : "BasicExporter", methodName : "bigloop"});
				Global._trace("flat?" + Std.string((exported.behaviour & 1 << exp.Behave.Flat[1]) != 0),{ fileName : "BasicExporter.hx", lineNumber : 210, className : "BasicExporter", methodName : "bigloop"});
				Global._trace("Sliced?" + Std.string((exported.behaviour & 1 << exp.Behave.Sliced[1]) != 0),{ fileName : "BasicExporter.hx", lineNumber : 211, className : "BasicExporter", methodName : "bigloop"});
				if(helpers.Layer.isGroup(layer) && !((exported.behaviour & 1 << exp.Behave.Flat[1]) != 0)) {
					Global._trace("isgroup and not Slice nor Flat",{ fileName : "BasicExporter.hx", lineNumber : 214, className : "BasicExporter", methodName : "bigloop"});
					this.bigloop(layer.layers(),indent);
				}
			}
		}
		this.builder.up();
		Global._trace("end bigloop",{ fileName : "BasicExporter.hx", lineNumber : 222, className : "BasicExporter", methodName : "bigloop"});
	}
	,__class__: BasicExporter
};
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) this.r.lastIndex = 0;
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) return this.r.m[n]; else throw "EReg::matched";
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,__class__: EReg
};
var Global = function() { };
$hxClasses["Global"] = Global;
Global.__name__ = true;
Global.onelog = function(m,p) {
	if(Type.resolveClass(p.className).one) {
		Global._trace = function(m1,p1) {
		};
		log(m);
		log(p.className + " " + p.lineNumber + "");
	}
};
Global._trace = function(m,p) {
	log(p.className + " " + p.lineNumber + "" + Std.string(m));
};
Global.log = function(m) {
	log(m);
};
Global.writeToFile = function(content,path,atomically) {
	if(atomically == null) atomically = false;
	var nsContent = NSString.stringWithString(content);
	return nsContent.writeToFile_atomically(path,atomically);
};
var HTMLExporter = function() {
	BasicExporter.call(this);
	this.generate();
	var xml = Xml.createElement("div");
	this.html = this.toHtml(this.tree,xml);
	this.exportHtml();
	this.launch();
};
$hxClasses["HTMLExporter"] = HTMLExporter;
HTMLExporter.__name__ = true;
HTMLExporter.main = function() {
	new HTMLExporter();
};
HTMLExporter.__super__ = BasicExporter;
HTMLExporter.prototype = $extend(BasicExporter.prototype,{
	setup: function() {
		Global._trace("setup",{ fileName : "HTMLExporter.hx", lineNumber : 26, className : "HTMLExporter", methodName : "setup"});
		var conf = new exp.Config();
		exp.Config.defaults.imagesPath = helpers.Document.dir(Global.doc) + "/html/images/";
		conf.check();
		this.config = exp.ExportFactory.config = conf.data;
		Global._trace(this.config,{ fileName : "HTMLExporter.hx", lineNumber : 32, className : "HTMLExporter", methodName : "setup"});
		if(this.config.cleanUp == true) this.cleanup();
	}
	,launch: function() {
		var open_task = NSTask.alloc().init();
		var open_task_args = NSArray.arrayWithObjects(this.config.imagesPath + this.activePage.name() + "/" + this.activeArtboard.name() + "/" + this.activeArtboard.name() + ".html");
		open_task.setLaunchPath("/usr/bin/open");
		open_task.setArguments(open_task_args);
		Global._trace(open_task.launchPath(),{ fileName : "HTMLExporter.hx", lineNumber : 44, className : "HTMLExporter", methodName : "launch"});
		open_task.launch();
	}
	,toHtml: function(tree,xml) {
		var $it0 = tree.childIterator();
		while( $it0.hasNext() ) {
			var node = $it0.next();
			var castednode;
			castednode = js.Boot.__cast(node , exp.ExportLayer);
			var treeNode = tree.find(node);
			var _node = null;
			Global._trace(node.type,{ fileName : "HTMLExporter.hx", lineNumber : 56, className : "HTMLExporter", methodName : "toHtml"});
			var _g = node.type;
			switch(_g[1]) {
			case 0:
				_node = Xml.createElement("section");
				break;
			default:
				_node = Xml.createElement("div");
			}
			_node.set("name",node.name);
			var position = "absolute";
			var _g1 = node.type;
			switch(_g1[1]) {
			case 0:
				_node.set("class","page");
				break;
			case 1:
				_node.set("class","artboard");
				break;
			case 4:
				_node.set("class","svg");
				var img = Xml.createElement("img");
				img.set("src",node.src);
				_node.insertChild(img,0);
				break;
			case 2:
				Global._trace("isText" + node.name,{ fileName : "HTMLExporter.hx", lineNumber : 78, className : "HTMLExporter", methodName : "toHtml"});
				_node.set("class","text");
				var tag = helpers.StringSketch.getTextTag(node.name);
				var texteProps = (js.Boot.__cast(node , exp.ExportText)).text;
				var lineHeight;
				if(node.height >= texteProps.lineSpacing * 1.5) lineHeight = texteProps.lineSpacing; else lineHeight = node.height;
				var style = "font-size:" + texteProps.fontSize + "px;\n\t\t\t\t\t\t\t\tfont-family:" + texteProps.fontPostscriptName + ";\n\t\t\t\t\t\t\t\ttext-align:" + Std.string(texteProps.textAlignment) + ";\n\t\t\t\t\t\t\t\tline-height:" + lineHeight + "px;\n\t\t\t\t\t\t\t\tcolor:#" + texteProps.color + ";\n\t\t\t\t\t\t\t\ttop:" + node.rely + "px;\n\t\t\t\t\t\t\t\tleft:" + node.relx + "px;\n\t\t\t\t\t\t\t\twidth:" + (node.width + texteProps.fontSize / 7) + "px;\n\t\t\t\t\t\t\t\t";
				var subXml = Xml.parse("<" + tag.tagName + " class=\"" + tag.name + "\" style=\"" + style + "\">" + texteProps.text + "</" + tag.tagName + ">");
				_node = subXml.firstChild();
				Global._trace("text done" + subXml.toString(),{ fileName : "HTMLExporter.hx", lineNumber : 104, className : "HTMLExporter", methodName : "toHtml"});
				break;
			case 3:
				_node.set("class","image");
				var img1 = Xml.createElement("img");
				img1.set("src",node.src);
				_node.insertChild(img1,0);
				break;
			case 5:
				_node.set("class","container");
				break;
			case 6:
				_node.set("class","slice");
				var img2 = Xml.createElement("img");
				img2.set("src",node.src);
				_node.insertChild(img2,0);
				break;
			}
			Global._trace("check position",{ fileName : "HTMLExporter.hx", lineNumber : 121, className : "HTMLExporter", methodName : "toHtml"});
			if(position == "absolute") {
				var style1;
				if(_node.get("style") != null) style1 = _node.get("style"); else style1 = "";
				var genericStyle = " position:" + position + ";\n\t\t\t\tleft:" + castednode.relx + "px;\n\t\t\t\ttop:" + castednode.rely + "px;\n\t\t\t\twidth:" + castednode.width + "px;\n\t\t\t\theight:" + castednode.height + "px; ";
				_node.set("style",genericStyle + style1);
			}
			Global._trace("piko",{ fileName : "HTMLExporter.hx", lineNumber : 134, className : "HTMLExporter", methodName : "toHtml"});
			xml.insertChild(_node,0);
			if(treeNode.children != null) this.toHtml(treeNode,_node);
		}
		this.html = xml;
		return xml;
	}
	,exportHtml: function() {
		var t = new HtmlView();
		t.title = Global.doc.displayName();
		t.content = this.html.toString();
		var $export = t.execute();
		Global.writeToFile($export,this.config.imagesPath + this.activePage.name() + "/" + this.activeArtboard.name() + "/" + this.activeArtboard.name() + ".html",null);
	}
	,__class__: HTMLExporter
});
var erazor = {};
erazor.macro = {};
erazor.macro.Template = function() {
};
$hxClasses["erazor.macro.Template"] = erazor.macro.Template;
erazor.macro.Template.__name__ = true;
erazor.macro.Template.prototype = {
	escape: function(str) {
		return str;
	}
	,__class__: erazor.macro.Template
};
var HtmlView = function() {
	erazor.macro.Template.call(this);
};
$hxClasses["HtmlView"] = HtmlView;
HtmlView.__name__ = true;
HtmlView.__super__ = erazor.macro.Template;
HtmlView.prototype = $extend(erazor.macro.Template.prototype,{
	execute: function() {
		var __b__ = new erazor.Output($bind(this,this.escape));
		__b__.b += "\n<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><title>";
		__b__.unsafeAdd(this.title);
		__b__.b += "</title>\n<style>\nimg{display:block;}\n</style>\n</head><body>\n";
		__b__.unsafeAdd(this.content);
		__b__.b += "\n</body></html>\n\n\t";
		return __b__.b;
	}
	,__class__: HtmlView
});
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(pos != null && pos != 0 && len != null && len < 0) return "";
	if(len == null) len = s.length;
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) pos = 0;
	} else if(len < 0) len = s.length + len - pos;
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) i = 0;
	}
	while(i < len) {
		if(a[i] === obj) return i;
		i++;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = HxOverrides.indexOf(a,obj,0);
	if(i == -1) return false;
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = true;
IntIterator.prototype = {
	__class__: IntIterator
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = true;
List.prototype = {
	add: function(item) {
		var x = [item];
		if(this.h == null) this.h = x; else this.q[1] = x;
		this.q = x;
		this.length++;
	}
	,iterator: function() {
		return { h : this.h, hasNext : function() {
			return this.h != null;
		}, next : function() {
			if(this.h == null) return null;
			var x = this.h[0];
			this.h = this.h[1];
			return x;
		}};
	}
	,__class__: List
};
var IMap = function() { };
$hxClasses["IMap"] = IMap;
IMap.__name__ = true;
Math.__name__ = true;
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.isFunction = function(f) {
	return typeof(f) == "function" && !(f.__name__ || f.__ename__);
};
var NativeArrayIterator = function(ar) {
	this.array = ar;
	this.i = 0;
};
$hxClasses["NativeArrayIterator"] = NativeArrayIterator;
NativeArrayIterator.__name__ = true;
NativeArrayIterator.prototype = {
	next: function() {
		return this.array[this.i++];
	}
	,hasNext: function() {
		return this.i < this.array.length();
	}
	,reset: function() {
		this.i = 0;
	}
	,keys: function() {
		return new IntIterator(0,this.array.length());
	}
	,haxeArray: function() {
		var a = [];
		var $it0 = this;
		while( $it0.hasNext() ) {
			var e = $it0.next();
			a.push(e);
		}
		return a;
	}
	,__class__: NativeArrayIterator
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = true;
Std.string = function(s) {
	return js.Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) v = parseInt(x);
	if(isNaN(v)) return null;
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = true;
StringBuf.prototype = {
	add: function(x) {
		this.b += Std.string(x);
	}
	,addSub: function(s,pos,len) {
		if(len == null) this.b += HxOverrides.substr(s,pos,null); else this.b += HxOverrides.substr(s,pos,len);
	}
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = true;
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) return s.split('"').join("&quot;").split("'").join("&#039;"); else return s;
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	return c > 8 && c < 14 || c == 32;
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) r++;
	if(r > 0) return HxOverrides.substr(s,r,l - r); else return s;
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) r++;
	if(r > 0) return HxOverrides.substr(s,0,l - r); else return s;
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = true;
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) return null;
	return cl;
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) throw "No such constructor " + constr;
	if(Reflect.isFunction(f)) {
		if(params == null) throw "Constructor " + constr + " need parameters";
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) throw "Constructor " + constr + " does not need parameters";
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c = e.__constructs__[index];
	if(c == null) throw index + " is not a valid enum constructor index";
	return Type.createEnum(e,c,params);
};
var XmlType = { __ename__ : true, __constructs__ : [] };
var Xml = function() {
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = true;
Xml.parse = function(str) {
	return haxe.xml.Parser.parse(str);
};
Xml.createElement = function(name) {
	var r = new Xml();
	r.nodeType = Xml.Element;
	r._children = new Array();
	r._attributes = new haxe.ds.StringMap();
	r.set_nodeName(name);
	return r;
};
Xml.createPCData = function(data) {
	var r = new Xml();
	r.nodeType = Xml.PCData;
	r.set_nodeValue(data);
	return r;
};
Xml.createCData = function(data) {
	var r = new Xml();
	r.nodeType = Xml.CData;
	r.set_nodeValue(data);
	return r;
};
Xml.createComment = function(data) {
	var r = new Xml();
	r.nodeType = Xml.Comment;
	r.set_nodeValue(data);
	return r;
};
Xml.createDocType = function(data) {
	var r = new Xml();
	r.nodeType = Xml.DocType;
	r.set_nodeValue(data);
	return r;
};
Xml.createProcessingInstruction = function(data) {
	var r = new Xml();
	r.nodeType = Xml.ProcessingInstruction;
	r.set_nodeValue(data);
	return r;
};
Xml.createDocument = function() {
	var r = new Xml();
	r.nodeType = Xml.Document;
	r._children = new Array();
	return r;
};
Xml.prototype = {
	get_nodeName: function() {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._nodeName;
	}
	,set_nodeName: function(n) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._nodeName = n;
	}
	,set_nodeValue: function(v) {
		if(this.nodeType == Xml.Element || this.nodeType == Xml.Document) throw "bad nodeType";
		return this._nodeValue = v;
	}
	,get: function(att) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._attributes.get(att);
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		this._attributes.set(att,value);
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._attributes.exists(att);
	}
	,iterator: function() {
		if(this._children == null) throw "bad nodetype";
		return { cur : 0, x : this._children, hasNext : function() {
			return this.cur < this.x.length;
		}, next : function() {
			return this.x[this.cur++];
		}};
	}
	,firstChild: function() {
		if(this._children == null) throw "bad nodetype";
		return this._children[0];
	}
	,addChild: function(x) {
		if(this._children == null) throw "bad nodetype";
		if(x._parent != null) HxOverrides.remove(x._parent._children,x);
		x._parent = this;
		this._children.push(x);
	}
	,insertChild: function(x,pos) {
		if(this._children == null) throw "bad nodetype";
		if(x._parent != null) HxOverrides.remove(x._parent._children,x);
		x._parent = this;
		this._children.splice(pos,0,x);
	}
	,toString: function() {
		if(this.nodeType == Xml.PCData) return StringTools.htmlEscape(this._nodeValue);
		if(this.nodeType == Xml.CData) return "<![CDATA[" + this._nodeValue + "]]>";
		if(this.nodeType == Xml.Comment) return "<!--" + this._nodeValue + "-->";
		if(this.nodeType == Xml.DocType) return "<!DOCTYPE " + this._nodeValue + ">";
		if(this.nodeType == Xml.ProcessingInstruction) return "<?" + this._nodeValue + "?>";
		var s = new StringBuf();
		if(this.nodeType == Xml.Element) {
			s.b += "<";
			s.b += Std.string(this._nodeName);
			var $it0 = this._attributes.keys();
			while( $it0.hasNext() ) {
				var k = $it0.next();
				s.b += " ";
				if(k == null) s.b += "null"; else s.b += "" + k;
				s.b += '="';
				s.add(this._attributes.get(k));
				s.b += '"';
			}
			if(this._children.length == 0) {
				s.b += "/>";
				return s.b;
			}
			s.b += ">";
		}
		var $it1 = this.iterator();
		while( $it1.hasNext() ) {
			var x = $it1.next();
			s.add(x.toString());
		}
		if(this.nodeType == Xml.Element) {
			s.b += "</";
			s.b += Std.string(this._nodeName);
			s.b += ">";
		}
		return s.b;
	}
	,__class__: Xml
};
var bs = {};
bs.BomberCommands = function() { };
$hxClasses["bs.BomberCommands"] = bs.BomberCommands;
bs.BomberCommands.__name__ = true;
bs.BomberCommands.alert = function(msg,title) {
	if(title == null) title = "Whoops";
	var app = NSApplication.sharedApplication();
	log(app);
	app.displayDialog_withTitle(msg,title);
};
bs.BomberCommands.getFileFolder = function() {
	var file_url = Global.doc.fileURL();
	var file_path = file_url.path();
	var file_folder = file_path.split(Global.doc.displayName())[0];
	return file_folder;
};
var de = {};
de.polygonal = {};
de.polygonal.ds = {};
de.polygonal.ds.Hashable = function() { };
$hxClasses["de.polygonal.ds.Hashable"] = de.polygonal.ds.Hashable;
de.polygonal.ds.Hashable.__name__ = true;
de.polygonal.ds.Collection = function() { };
$hxClasses["de.polygonal.ds.Collection"] = de.polygonal.ds.Collection;
de.polygonal.ds.Collection.__name__ = true;
de.polygonal.ds.Collection.__interfaces__ = [de.polygonal.ds.Hashable];
de.polygonal.ds.HashKey = function() { };
$hxClasses["de.polygonal.ds.HashKey"] = de.polygonal.ds.HashKey;
de.polygonal.ds.HashKey.__name__ = true;
de.polygonal.ds.Itr = function() { };
$hxClasses["de.polygonal.ds.Itr"] = de.polygonal.ds.Itr;
de.polygonal.ds.Itr.__name__ = true;
de.polygonal.ds.Itr.prototype = {
	__class__: de.polygonal.ds.Itr
};
de.polygonal.ds.TreeBuilder = function(node) {
	this._node = node;
	if(this._node != null) {
		this._child = this._node.children;
		true;
	} else false;
};
$hxClasses["de.polygonal.ds.TreeBuilder"] = de.polygonal.ds.TreeBuilder;
de.polygonal.ds.TreeBuilder.__name__ = true;
de.polygonal.ds.TreeBuilder.prototype = {
	up: function() {
		if(this._node.parent != null) {
			this._node = this._node.parent;
			if(this._node != null) this._child = this._node.children;
			return true;
		} else return false;
	}
	,down: function() {
		if(this._child != null) {
			this._node = this._child;
			if(this._node != null) this._child = this._node.children;
			return true;
		} else return false;
	}
	,appendChild: function(x) {
		this._child = this._createChildNode(x,true);
		return this._child;
	}
	,_createChildNode: function(x,append) {
		if(append) return new de.polygonal.ds.TreeNode(x,this._node); else {
			var node = new de.polygonal.ds.TreeNode(x);
			node.parent = this._node;
			return node;
		}
	}
	,__class__: de.polygonal.ds.TreeBuilder
};
de.polygonal.ds.TreeNode = function(x,parent) {
	this.val = x;
	this.parent = parent;
	this.children = null;
	this.prev = null;
	this.next = null;
	this._tail = null;
	this._nextInStack = null;
	this._prevInStack = null;
	if(this.parent != null) {
		parent._extraInfo = parent._extraInfo & 65535 | (parent._extraInfo >>> 16) + 1 << 16;
		if(parent.children != null) {
			var tail = parent._tail;
			tail.next = this;
			this.prev = tail;
			this.next = null;
		} else parent.children = this;
		parent._tail = this;
	}
	this._extraInfo = 0;
	this.key = de.polygonal.ds.HashKey._counter++;
};
$hxClasses["de.polygonal.ds.TreeNode"] = de.polygonal.ds.TreeNode;
de.polygonal.ds.TreeNode.__name__ = true;
de.polygonal.ds.TreeNode.__interfaces__ = [de.polygonal.ds.Collection];
de.polygonal.ds.TreeNode.prototype = {
	find: function(x) {
		var top = this;
		while(top != null) {
			var node = top;
			top = this.popOffStack(top);
			if(node.val == x) return node;
			var n = node.children;
			if(n != null) {
				var c = node._tail;
				while(c != null) {
					if(top != null) {
						top._nextInStack = c;
						c._prevInStack = top;
					}
					top = c;
					c = c.prev;
				}
			}
		}
		return null;
	}
	,childIterator: function() {
		return new de.polygonal.ds.ChildTreeIterator(this);
	}
	,popOffStack: function(top) {
		var tmp = top;
		top = top._prevInStack;
		if(top != null) top._nextInStack = null;
		tmp._prevInStack = null;
		return top;
	}
	,__class__: de.polygonal.ds.TreeNode
};
de.polygonal.ds.ChildTreeIterator = function(f) {
	this._f = f;
	{
		this._walker = this._f.children;
		this._hook = null;
		this;
	}
};
$hxClasses["de.polygonal.ds.ChildTreeIterator"] = de.polygonal.ds.ChildTreeIterator;
de.polygonal.ds.ChildTreeIterator.__name__ = true;
de.polygonal.ds.ChildTreeIterator.__interfaces__ = [de.polygonal.ds.Itr];
de.polygonal.ds.ChildTreeIterator.prototype = {
	hasNext: function() {
		return this._walker != null;
	}
	,next: function() {
		var x = this._walker.val;
		this._hook = this._walker;
		this._walker = this._walker.next;
		return x;
	}
	,__class__: de.polygonal.ds.ChildTreeIterator
};
erazor.TString = function() { };
$hxClasses["erazor.TString"] = erazor.TString;
erazor.TString.__name__ = true;
erazor.TString.prototype = {
	toString: function() {
		return this.s;
	}
	,__class__: erazor.TString
};
erazor.UnsafeString = function() { };
$hxClasses["erazor.UnsafeString"] = erazor.UnsafeString;
erazor.UnsafeString.__name__ = true;
erazor.UnsafeString.__super__ = erazor.TString;
erazor.UnsafeString.prototype = $extend(erazor.TString.prototype,{
	escape: function(str) {
		return StringTools.htmlEscape(str,true);
	}
	,toString: function() {
		return this.escape(this.s);
	}
	,__class__: erazor.UnsafeString
});
erazor.Output = function(escapeMethod) {
	if(escapeMethod != null) this.escape = escapeMethod;
	StringBuf.call(this);
};
$hxClasses["erazor.Output"] = erazor.Output;
erazor.Output.__name__ = true;
erazor.Output.__super__ = StringBuf;
erazor.Output.prototype = $extend(StringBuf.prototype,{
	escape: function(str) {
		return str;
	}
	,unsafeAdd: function(str) {
		var val;
		if(js.Boot.__instanceof(str,erazor.TString)) val = str.toString(); else val = this.escape(Std.string(str));
		if(val == null) this.b += "null"; else this.b += "" + val;
	}
	,__class__: erazor.Output
});
var exp = {};
exp.Behave = { __ename__ : true, __constructs__ : ["Scale","Exportable","Mask","Bounded","Flat","Visible","Svg","Skip","Sliced"] };
exp.Behave.Scale = ["Scale",0];
exp.Behave.Scale.toString = $estr;
exp.Behave.Scale.__enum__ = exp.Behave;
exp.Behave.Exportable = ["Exportable",1];
exp.Behave.Exportable.toString = $estr;
exp.Behave.Exportable.__enum__ = exp.Behave;
exp.Behave.Mask = ["Mask",2];
exp.Behave.Mask.toString = $estr;
exp.Behave.Mask.__enum__ = exp.Behave;
exp.Behave.Bounded = ["Bounded",3];
exp.Behave.Bounded.toString = $estr;
exp.Behave.Bounded.__enum__ = exp.Behave;
exp.Behave.Flat = ["Flat",4];
exp.Behave.Flat.toString = $estr;
exp.Behave.Flat.__enum__ = exp.Behave;
exp.Behave.Visible = ["Visible",5];
exp.Behave.Visible.toString = $estr;
exp.Behave.Visible.__enum__ = exp.Behave;
exp.Behave.Svg = ["Svg",6];
exp.Behave.Svg.toString = $estr;
exp.Behave.Svg.__enum__ = exp.Behave;
exp.Behave.Skip = ["Skip",7];
exp.Behave.Skip.toString = $estr;
exp.Behave.Skip.__enum__ = exp.Behave;
exp.Behave.Sliced = ["Sliced",8];
exp.Behave.Sliced.toString = $estr;
exp.Behave.Sliced.__enum__ = exp.Behave;
exp.Config = function() {
	Global._trace("yo",{ fileName : "Config.hx", lineNumber : 40, className : "exp.Config", methodName : "new"});
};
$hxClasses["exp.Config"] = exp.Config;
exp.Config.__name__ = true;
exp.Config.prototype = {
	check: function() {
		Global._trace("check",{ fileName : "Config.hx", lineNumber : 45, className : "exp.Config", methodName : "check"});
		var settings = helpers.Document.loadJson(Global.doc,helpers.Document.dir(Global.doc) + "/settings_" + Global.doc.displayName() + ".json");
		if(settings != null) this.data = settings; else this.create();
	}
	,create: function() {
		var settings = JSON.stringify(exp.Config.defaults);
		helpers.Document.createText(Global.doc,settings,helpers.Document.dir(Global.doc) + "/settings_" + Global.doc.displayName() + ".json");
		helpers.UI.alert("settings created in dir","cool");
		this.check();
	}
	,__class__: exp.Config
};
exp.Exportable = function() { };
$hxClasses["exp.Exportable"] = exp.Exportable;
exp.Exportable.__name__ = true;
exp.Exportable.prototype = {
	__class__: exp.Exportable
};
exp.ExportLayer = function(layer) {
	this.format = "png";
	this.visible = true;
	this.name = "no name";
	this.config = exp.ExportFactory.config;
	this.name = Std.string(layer.name());
	this.orig = layer;
	this.type = exp.ExportTypes.Container;
};
$hxClasses["exp.ExportLayer"] = exp.ExportLayer;
exp.ExportLayer.__name__ = true;
exp.ExportLayer.__interfaces__ = [exp.Exportable];
exp.ExportLayer.prototype = {
	set_relx: function(f) {
		return this.relx = Math.round(f * 100) / 100;
	}
	,set_rely: function(f) {
		return this.rely = Math.round(f * 100) / 100;
	}
	,set_x: function(f) {
		return this.x = Math.round(f * 100) / 100;
	}
	,set_y: function(f) {
		return this.y = Math.round(f * 100) / 100;
	}
	,set_width: function(f) {
		return this.width = Math.round(f * 100) / 100;
	}
	,set_height: function(f) {
		return this.height = Math.round(f * 100) / 100;
	}
	,'export': function() {
		Global._trace("export",{ fileName : "ExportLayer.hx", lineNumber : 46, className : "exp.ExportLayer", methodName : "export"});
		if(this.orig != null && (this.behaviour & 1 << exp.Behave.Exportable[1]) != 0) {
			if((this.behaviour & 1 << exp.Behave.Visible[1]) != 0) this.visible = true; else this.visible = false;
			try {
				if((this.behaviour & 1 << exp.Behave.Svg[1]) != 0) {
					Global._trace("--------------svg style--------",{ fileName : "ExportLayer.hx", lineNumber : 55, className : "exp.ExportLayer", methodName : "export"});
					this.exportData = helpers.Layer.exportSvg(this.orig,helpers.Document.dir(Global.doc) + "view/images",this.config);
					this.type = exp.ExportTypes.Svg;
					this.format = "svg";
					this.src = this.relativeSrc(this.exportData.path);
					return this;
				}
				if((this.behaviour & 1 << exp.Behave.Scale[1]) != 0) Global._trace("-------------------scale" + this.extractScaleFactor(this.name),{ fileName : "ExportLayer.hx", lineNumber : 63, className : "exp.ExportLayer", methodName : "export"});
				if((this.behaviour & 1 << exp.Behave.Mask[1]) != 0) Global._trace("-------------------------has mask",{ fileName : "ExportLayer.hx", lineNumber : 65, className : "exp.ExportLayer", methodName : "export"});
				if(!((this.behaviour & 1 << exp.Behave.Flat[1]) != 0)) {
					if((this.behaviour & 1 << exp.Behave.Skip[1]) != 0) this.exportData = helpers.Layer["export"](this.orig,helpers.Document.dir(Global.doc) + "view/imuges",1,this.config); else this.exportData = helpers.Layer["export"](this.orig,helpers.Document.dir(Global.doc) + "view/images",1,this.config);
				} else {
					Global._trace("-------------------------has flat",{ fileName : "ExportLayer.hx", lineNumber : 74, className : "exp.ExportLayer", methodName : "export"});
					this.exportData = helpers.Layer["export"](this.orig,helpers.Document.dir(Global.doc) + "view/images",1,this.config);
					this.type = exp.ExportTypes.Image;
				}
				this.src = this.relativeSrc(this.exportData.path);
			} catch( err ) {
				Global.log("Error=" + Std.string(err));
			}
			this.set_x(this.exportData.sliced.bounds.x);
			this.set_y(this.exportData.sliced.bounds.y);
			this.set_width(this.exportData.sliced.bounds.width);
			this.set_height(this.exportData.sliced.bounds.height);
			this.set_relx(this.exportData.sliced.bounds.relx);
			this.set_rely(this.exportData.sliced.bounds.rely);
			return this;
		}
		return null;
	}
	,relativeSrc: function(absolutePath) {
		var relative = StringTools.replace(absolutePath,helpers.Document.dir(Global.doc) + "view/","");
		return relative;
	}
	,extractScaleFactor: function(name) {
		var r = new EReg("([*]+\\d+)(((.|,)\\d+)+)?","");
		r.match(name);
		var ext = r.matched(0);
		var p = StringTools.replace(ext,"*","");
		return Std.parseFloat(p);
	}
	,__class__: exp.ExportLayer
};
exp.ExportContainer = function(layer) {
	if(layer != null) {
		exp.ExportLayer.call(this,layer);
		this.type = exp.ExportTypes.Container;
	}
};
$hxClasses["exp.ExportContainer"] = exp.ExportContainer;
exp.ExportContainer.__name__ = true;
exp.ExportContainer.__interfaces__ = [exp.Exportable];
exp.ExportContainer.__super__ = exp.ExportLayer;
exp.ExportContainer.prototype = $extend(exp.ExportLayer.prototype,{
	'export': function() {
		if(this.orig != null && (this.behaviour & 1 << exp.Behave.Exportable[1]) != 0) {
			if((this.behaviour & 1 << exp.Behave.Visible[1]) != 0) this.visible = true; else this.visible = false;
			this.set_x(this.orig.absoluteRect().rulerX());
			this.set_y(this.orig.absoluteRect().rulerY());
			this.set_width(this.orig.frame().width());
			this.set_height(this.orig.frame().height());
			this.set_relx(this.orig.frame().x());
			this.set_rely(this.orig.frame().y());
			this.src = null;
			return this;
		}
		return null;
	}
	,__class__: exp.ExportContainer
});
exp.ExportArtBoard = function(layer) {
	exp.ExportContainer.call(this,layer);
	this.type = exp.ExportTypes.ArtBoard;
};
$hxClasses["exp.ExportArtBoard"] = exp.ExportArtBoard;
exp.ExportArtBoard.__name__ = true;
exp.ExportArtBoard.__interfaces__ = [exp.Exportable];
exp.ExportArtBoard.__super__ = exp.ExportContainer;
exp.ExportArtBoard.prototype = $extend(exp.ExportContainer.prototype,{
	'export': function() {
		this.set_x(0);
		this.set_y(0);
		this.set_relx(0);
		this.set_rely(0);
		this.set_width(this.orig.frame().width());
		this.set_height(this.orig.frame().height());
		return this;
	}
	,__class__: exp.ExportArtBoard
});
exp.ExportFactory = function() { };
$hxClasses["exp.ExportFactory"] = exp.ExportFactory;
exp.ExportFactory.__name__ = true;
exp.ExportFactory.create = function(origLayer) {
	Global._trace("factory--------------createExport " + origLayer.name() + "-------------",{ fileName : "ExportFactory.hx", lineNumber : 17, className : "exp.ExportFactory", methodName : "create"});
	var klass = helpers.Layer._class(origLayer);
	var flags = exp.ExportFactory.behaviour(origLayer);
	var $export = null;
	if((flags & 1 << exp.Behave.Exportable[1]) != 0) {
		if(origLayer.isVisible()) flags |= 1 << exp.Behave.Visible[1];
		if(origLayer.isLayerExportable() && !helpers.Layer.isArtBoard(origLayer)) {
			Global._trace("isLayerExportable " + origLayer.name(),{ fileName : "ExportFactory.hx", lineNumber : 39, className : "exp.ExportFactory", methodName : "create"});
			flags |= 1 << exp.Behave.Sliced[1];
			flags |= 1 << exp.Behave.Flat[1];
		}
		if(helpers.Layer.isGroup(origLayer) && (function($this) {
			var $r;
			var _this = origLayer.layers();
			$r = _this.length();
			return $r;
		}(this)) > 0) {
			var lastLayerOf = origLayer.layers().firstObject();
			Global._trace("lastLayerOf=",{ fileName : "ExportFactory.hx", lineNumber : 44, className : "exp.ExportFactory", methodName : "create"});
			Global.log(helpers.Layer._class(lastLayerOf));
			if(helpers.Layer._class(lastLayerOf) == MSSliceLayer) {
				Global._trace("isSliced",{ fileName : "ExportFactory.hx", lineNumber : 48, className : "exp.ExportFactory", methodName : "create"});
				flags |= 1 << exp.Behave.Sliced[1];
				flags |= 1 << exp.Behave.Flat[1];
				$export = new exp.ExportSlice(lastLayerOf);
				flags |= 1 << exp.Behave.Flat[1];
				$export.behaviour = flags;
				return $export;
			}
		}
		if(klass == MSSliceLayer) {
			$export = new exp.ExportSlice(origLayer);
			(flags & 1 << exp.Behave.Sliced[1]) != 0;
			$export.behaviour = flags;
			return $export;
		}
		if((flags & 1 << exp.Behave.Sliced[1]) != 0) {
			Global._trace("behave Sliced",{ fileName : "ExportFactory.hx", lineNumber : 69, className : "exp.ExportFactory", methodName : "create"});
			$export = new exp.ExportSlice(origLayer);
			flags |= 1 << exp.Behave.Flat[1];
			$export.behaviour = flags;
			return $export;
		}
		Global._trace(klass,{ fileName : "ExportFactory.hx", lineNumber : 77, className : "exp.ExportFactory", methodName : "create"});
		if(klass == MSPage) {
			$export = new exp.ExportPage(origLayer);
			$export.behaviour = flags;
			return $export;
		}
		if(klass == MSArtboardGroup) {
			$export = new exp.ExportArtBoard(origLayer);
			$export.behaviour = flags;
			return $export;
		}
		if(klass == MSTextLayer) {
			$export = new exp.ExportText(origLayer);
			$export.behaviour = flags;
			return $export;
		}
		if(klass == MSShapeGroup || klass == MSBitmapLayer) {
			$export = new exp.ExportImage(origLayer);
			$export.behaviour = flags;
			return $export;
		}
		if(klass == MSLayerGroup && !((flags & 1 << exp.Behave.Flat[1]) != 0)) {
			$export = new exp.ExportContainer(origLayer);
			Global.onelog("ExportContainer",{ fileName : "ExportFactory.hx", lineNumber : 104, className : "exp.ExportFactory", methodName : "create"});
			$export.behaviour = flags;
			return $export;
		}
		Global._trace("hact as regular layer",{ fileName : "ExportFactory.hx", lineNumber : 109, className : "exp.ExportFactory", methodName : "create"});
		$export = new exp.ExportImage(origLayer);
		$export.behaviour = flags;
		return $export;
	}
	return null;
};
exp.ExportFactory.behaviour = function(orig) {
	var name = orig.name();
	var behaviour = exp.ExportFactory.extract(name);
	return behaviour;
};
exp.ExportFactory.extract = function(name) {
	var flags = 0;
	Global._trace("extract=" + name,{ fileName : "ExportFactory.hx", lineNumber : 131, className : "exp.ExportFactory", methodName : "extract"});
	var _g = exp.ExportFactory.beginWith(name);
	switch(_g) {
	case "*":
		flags |= 1 << exp.Behave.Svg[1];
		flags |= 1 << exp.Behave.Exportable[1];
		flags |= 1 << exp.Behave.Flat[1];
		break;
	case "+":
		flags |= 1 << exp.Behave.Exportable[1];
		break;
	case "_":
		flags |= 1 << exp.Behave.Flat[1];
		flags |= 1 << exp.Behave.Exportable[1];
		break;
	case "°":
		flags |= 1 << exp.Behave.Skip[1];
		flags |= 1 << exp.Behave.Exportable[1];
		break;
	case "-":
		flags &= 268435455 - (1 << exp.Behave.Exportable[1]);
		break;
	default:
		flags |= 1 << exp.Behave.Exportable[1];
	}
	if(helpers.StringSketch.startsWith(name,"m")) flags |= 1 << exp.Behave.Mask[1];
	if(helpers.StringSketch.endsWith(name,"*2")) flags |= 1 << exp.Behave.Scale[1];
	return flags;
};
exp.ExportFactory.beginWith = function(phrase) {
	return phrase.charAt(0);
};
exp.ExportImage = function(layer) {
	exp.ExportLayer.call(this,layer);
	this.type = exp.ExportTypes.Image;
};
$hxClasses["exp.ExportImage"] = exp.ExportImage;
exp.ExportImage.__name__ = true;
exp.ExportImage.__interfaces__ = [exp.Exportable];
exp.ExportImage.__super__ = exp.ExportLayer;
exp.ExportImage.prototype = $extend(exp.ExportLayer.prototype,{
	__class__: exp.ExportImage
});
exp.ExportPage = function(layer) {
	exp.ExportContainer.call(this,layer);
	this.type = exp.ExportTypes.Page;
};
$hxClasses["exp.ExportPage"] = exp.ExportPage;
exp.ExportPage.__name__ = true;
exp.ExportPage.__interfaces__ = [exp.Exportable];
exp.ExportPage.__super__ = exp.ExportContainer;
exp.ExportPage.prototype = $extend(exp.ExportContainer.prototype,{
	'export': function() {
		this.set_x(0);
		this.set_y(0);
		this.set_relx(0);
		this.set_rely(0);
		this.set_width(0.1);
		this.set_height(0);
		return this;
	}
	,__class__: exp.ExportPage
});
exp.ExportSlice = function(layer) {
	exp.ExportLayer.call(this,layer);
	this.type = exp.ExportTypes.Slice;
};
$hxClasses["exp.ExportSlice"] = exp.ExportSlice;
exp.ExportSlice.__name__ = true;
exp.ExportSlice.__interfaces__ = [exp.Exportable];
exp.ExportSlice.__super__ = exp.ExportLayer;
exp.ExportSlice.prototype = $extend(exp.ExportLayer.prototype,{
	'export': function() {
		Global.onelog(this.orig,{ fileName : "ExportSlice.hx", lineNumber : 28, className : "exp.ExportSlice", methodName : "export"});
		var slice = null;
		var layer = null;
		var _g = helpers.Layer._class(this.orig);
		switch(_g) {
		case MSSliceLayer:
			slice = this.orig;
			layer = slice.parentGroup();
			break;
		case MSLayerGroup:
			slice = Global.doc.sliceForRect(this.orig.frame());
			layer = this.orig;
			break;
		case MSLayer:
			slice = Global.doc.sliceForRect(this.orig.frame());
			layer = this.orig;
			break;
		}
		var slice1 = this.orig;
		Global.onelog(slice1.absoluteRect().width() + "height=" + slice1.absoluteRect().height(),{ fileName : "ExportSlice.hx", lineNumber : 43, className : "exp.ExportSlice", methodName : "export"});
		Global.onelog(slice1.absoluteRect().origin().x + "height=" + slice1.absoluteRect().origin().y,{ fileName : "ExportSlice.hx", lineNumber : 44, className : "exp.ExportSlice", methodName : "export"});
		Global.onelog(slice1.absoluteRect().rulerX() + "height=" + slice1.absoluteRect().rulerY(),{ fileName : "ExportSlice.hx", lineNumber : 45, className : "exp.ExportSlice", methodName : "export"});
		Global.onelog(slice1.relativeRect().origin.x + "y=" + slice1.relativeRect().origin.y,{ fileName : "ExportSlice.hx", lineNumber : 46, className : "exp.ExportSlice", methodName : "export"});
		Global.onelog("parent=" + slice1.ancestors()[(function($this) {
			var $r;
			var _this = slice1.ancestors();
			$r = _this.length();
			return $r;
		}(this)) - 2].name(),{ fileName : "ExportSlice.hx", lineNumber : 47, className : "exp.ExportSlice", methodName : "export"});
		Global.onelog("parent=" + slice1.parentGroup().name(),{ fileName : "ExportSlice.hx", lineNumber : 48, className : "exp.ExportSlice", methodName : "export"});
		Global.onelog("shouldTrim=" + Std.string(slice1.exportOptions().shouldTrim()),{ fileName : "ExportSlice.hx", lineNumber : 49, className : "exp.ExportSlice", methodName : "export"});
		Global.onelog("includedLayerIds=" + (function($this) {
			var $r;
			var _this1 = slice1.exportOptions().includedLayerIds();
			$r = _this1.length();
			return $r;
		}(this)),{ fileName : "ExportSlice.hx", lineNumber : 50, className : "exp.ExportSlice", methodName : "export"});
		Global.onelog("layerOptions=" + slice1.exportOptions().layerOptions(),{ fileName : "ExportSlice.hx", lineNumber : 54, className : "exp.ExportSlice", methodName : "export"});
		var sizes = slice1.exportOptions().sizes();
		Global.onelog("sizes=" + Std.string(slice1.exportOptions().sizes()),{ fileName : "ExportSlice.hx", lineNumber : 58, className : "exp.ExportSlice", methodName : "export"});
		var $it0 = new NativeArrayIterator(sizes);
		while( $it0.hasNext() ) {
			var a = $it0.next();
			Global.onelog(a.defaultName(),{ fileName : "ExportSlice.hx", lineNumber : 61, className : "exp.ExportSlice", methodName : "export"});
			Global.onelog(a.parentLayer().name(),{ fileName : "ExportSlice.hx", lineNumber : 62, className : "exp.ExportSlice", methodName : "export"});
			Global.onelog(a.isVectorExport(),{ fileName : "ExportSlice.hx", lineNumber : 63, className : "exp.ExportSlice", methodName : "export"});
			Global.onelog(a.name(),{ fileName : "ExportSlice.hx", lineNumber : 64, className : "exp.ExportSlice", methodName : "export"});
			Global.onelog(a.format(),{ fileName : "ExportSlice.hx", lineNumber : 65, className : "exp.ExportSlice", methodName : "export"});
			Global.onelog(a.visibleScaleType(),{ fileName : "ExportSlice.hx", lineNumber : 66, className : "exp.ExportSlice", methodName : "export"});
			Global.onelog(a.scale(),{ fileName : "ExportSlice.hx", lineNumber : 67, className : "exp.ExportSlice", methodName : "export"});
		}
		this.set_x(slice1.absoluteRect().rulerX());
		this.set_y(slice1.absoluteRect().rulerY());
		this.set_width(slice1.frame().width());
		this.set_height(slice1.frame().height());
		if(slice1.parentGroup().parentGroup() != slice1.parentArtboard()) {
			this.set_relx(slice1.parentGroup().frame().x());
			this.set_rely(slice1.parentGroup().frame().y());
		} else {
			this.set_relx(this.x);
			this.set_rely(this.y);
		}
		this.type = exp.ExportTypes.Slice;
		this.format = Std.string(slice1.exportOptions().sizes().firstObject().format());
		this.exportData = helpers.Slice["export"](slice1,layer,helpers.Document.dir(Global.doc) + "view/images",sizes.firstObject().scale(),this.config);
		this.src = this.relativeSrc(this.exportData.path);
		return this;
	}
	,__class__: exp.ExportSlice
});
exp.Alignement = { __ename__ : true, __constructs__ : ["WTF","Right","Center","Justify","Left"] };
exp.Alignement.WTF = ["WTF",0];
exp.Alignement.WTF.toString = $estr;
exp.Alignement.WTF.__enum__ = exp.Alignement;
exp.Alignement.Right = ["Right",1];
exp.Alignement.Right.toString = $estr;
exp.Alignement.Right.__enum__ = exp.Alignement;
exp.Alignement.Center = ["Center",2];
exp.Alignement.Center.toString = $estr;
exp.Alignement.Center.__enum__ = exp.Alignement;
exp.Alignement.Justify = ["Justify",3];
exp.Alignement.Justify.toString = $estr;
exp.Alignement.Justify.__enum__ = exp.Alignement;
exp.Alignement.Left = ["Left",4];
exp.Alignement.Left.toString = $estr;
exp.Alignement.Left.__enum__ = exp.Alignement;
exp.ExportText = function(layer) {
	Global._trace("hello text",{ fileName : "ExportText.hx", lineNumber : 29, className : "exp.ExportText", methodName : "new"});
	exp.ExportLayer.call(this,layer);
	this.name = this.name + "____text";
};
$hxClasses["exp.ExportText"] = exp.ExportText;
exp.ExportText.__name__ = true;
exp.ExportText.__interfaces__ = [exp.Exportable];
exp.ExportText.__super__ = exp.ExportLayer;
exp.ExportText.prototype = $extend(exp.ExportLayer.prototype,{
	'export': function() {
		var layer = this.orig;
		this.TP = { };
		this.TP.text = layer.stringValue();
		Global._trace("textVAlue" + layer.stringValue(),{ fileName : "ExportText.hx", lineNumber : 40, className : "exp.ExportText", methodName : "export"});
		this.TP.fontSize = layer.fontSize();
		this.TP.fontPostscriptName = "" + layer.fontPostscriptName();
		Global._trace("pif",{ fileName : "ExportText.hx", lineNumber : 48, className : "exp.ExportText", methodName : "export"});
		try {
			Global._trace("try",{ fileName : "ExportText.hx", lineNumber : 52, className : "exp.ExportText", methodName : "export"});
			this.TP.color = layer.style().fills().firstObject().color().hexValue();
			this.TP.alpha = layer.style().fills().firstObject().color().alpha();
		} catch( msg ) {
			this.TP.color = layer.textColor().hexValue();
			this.TP.alpha = layer.textColor().alpha();
		}
		try {
			this.TP.textAlignment = this.Align(layer.textAlignment());
			this.TP.characterSpacing = layer.characterSpacing();
			this.TP.lineSpacing = layer.lineSpacing();
			this.TP.toObj = $bind(this,this.toObject);
			this.text = this.TP;
			Global.log(layer.font());
		} catch( msg1 ) {
			Global._trace("font problem" + Std.string(msg1),{ fileName : "ExportText.hx", lineNumber : 71, className : "exp.ExportText", methodName : "export"});
		}
		this.type = exp.ExportTypes.Text;
		Global._trace(" font stuff",{ fileName : "ExportText.hx", lineNumber : 74, className : "exp.ExportText", methodName : "export"});
		return exp.ExportLayer.prototype["export"].call(this);
	}
	,toObject: function() {
		return { text : this.TP.text.toString(), color : this.TP.color.toString(), fontSize : this.TP.fontSize, fontPostscriptName : this.TP.fontPostscriptName, textAlignment : this.TP.textAlignment, characterSpacing : this.TP.characterSpacing, lineSpacing : this.TP.lineSpacing, alpha : Math.round(this.TP.alpha * 100) / 100};
	}
	,Align: function(code) {
		Global._trace("Align=" + code,{ fileName : "ExportText.hx", lineNumber : 99, className : "exp.ExportText", methodName : "Align"});
		var e = Type.createEnumIndex(exp.Alignement,code);
		return e[0];
	}
	,__class__: exp.ExportText
});
exp.ExportTypes = { __ename__ : true, __constructs__ : ["Page","ArtBoard","Text","Image","Svg","Container","Slice"] };
exp.ExportTypes.Page = ["Page",0];
exp.ExportTypes.Page.toString = $estr;
exp.ExportTypes.Page.__enum__ = exp.ExportTypes;
exp.ExportTypes.ArtBoard = ["ArtBoard",1];
exp.ExportTypes.ArtBoard.toString = $estr;
exp.ExportTypes.ArtBoard.__enum__ = exp.ExportTypes;
exp.ExportTypes.Text = ["Text",2];
exp.ExportTypes.Text.toString = $estr;
exp.ExportTypes.Text.__enum__ = exp.ExportTypes;
exp.ExportTypes.Image = ["Image",3];
exp.ExportTypes.Image.toString = $estr;
exp.ExportTypes.Image.__enum__ = exp.ExportTypes;
exp.ExportTypes.Svg = ["Svg",4];
exp.ExportTypes.Svg.toString = $estr;
exp.ExportTypes.Svg.__enum__ = exp.ExportTypes;
exp.ExportTypes.Container = ["Container",5];
exp.ExportTypes.Container.toString = $estr;
exp.ExportTypes.Container.__enum__ = exp.ExportTypes;
exp.ExportTypes.Slice = ["Slice",6];
exp.ExportTypes.Slice.toString = $estr;
exp.ExportTypes.Slice.__enum__ = exp.ExportTypes;
var haxe = {};
haxe.ds = {};
haxe.ds.IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe.ds.IntMap;
haxe.ds.IntMap.__name__ = true;
haxe.ds.IntMap.__interfaces__ = [IMap];
haxe.ds.IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,__class__: haxe.ds.IntMap
};
haxe.ds.StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe.ds.StringMap;
haxe.ds.StringMap.__name__ = true;
haxe.ds.StringMap.__interfaces__ = [IMap];
haxe.ds.StringMap.prototype = {
	set: function(key,value) {
		this.h["$" + key] = value;
	}
	,get: function(key) {
		return this.h["$" + key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty("$" + key);
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key.substr(1));
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe.ds.StringMap
};
haxe.xml = {};
haxe.xml.Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe.xml.Parser;
haxe.xml.Parser.__name__ = true;
haxe.xml.Parser.parse = function(str) {
	var doc = Xml.createDocument();
	haxe.xml.Parser.doParse(str,0,doc);
	return doc;
};
haxe.xml.Parser.doParse = function(str,p,parent) {
	if(p == null) p = 0;
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	while(!(c != c)) {
		switch(state) {
		case 0:
			switch(c) {
			case 10:case 13:case 9:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			switch(c) {
			case 60:
				state = 0;
				next = 2;
				break;
			default:
				start = p;
				state = 13;
				continue;
			}
			break;
		case 13:
			if(c == 60) {
				var child = Xml.createPCData(buf.b + HxOverrides.substr(str,start,p - start));
				buf = new StringBuf();
				parent.addChild(child);
				nsubs++;
				state = 0;
				next = 2;
			} else if(c == 38) {
				buf.addSub(str,start,p - start);
				state = 18;
				next = 13;
				start = p + 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				nsubs++;
				p += 2;
				state = 1;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") throw "Expected <![CDATA[";
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") throw "Expected <!DOCTYPE";
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) throw "Expected <!--"; else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 63:
				state = 14;
				start = p;
				break;
			case 47:
				if(parent == null) throw "Expected node name";
				start = p + 1;
				state = 0;
				next = 10;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) throw "Expected node name";
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				nsubs++;
				break;
			case 62:
				state = 9;
				nsubs++;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) throw "Expected attribute name";
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) throw "Duplicate attribute";
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			switch(c) {
			case 61:
				state = 0;
				next = 7;
				break;
			default:
				throw "Expected =";
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				state = 8;
				start = p;
				break;
			default:
				throw "Expected ";
			}
			break;
		case 8:
			if(c == str.charCodeAt(start)) {
				var val = HxOverrides.substr(str,start + 1,p - start - 1);
				xml.set(aname,val);
				state = 0;
				next = 4;
			}
			break;
		case 9:
			p = haxe.xml.Parser.doParse(str,p,xml);
			start = p;
			state = 1;
			break;
		case 11:
			switch(c) {
			case 62:
				state = 1;
				break;
			default:
				throw "Expected >";
			}
			break;
		case 12:
			switch(c) {
			case 62:
				if(nsubs == 0) parent.addChild(Xml.createPCData(""));
				return p;
			default:
				throw "Expected >";
			}
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) throw "Expected node name";
				var v = HxOverrides.substr(str,start,p - start);
				if(v != parent.get_nodeName()) throw "Expected </" + parent.get_nodeName() + ">";
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) nbrackets++; else if(c == 93) nbrackets--; else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				state = 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				p++;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var i;
					if(s.charCodeAt(1) == 120) i = Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)); else i = Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.add(String.fromCharCode(i));
				} else if(!haxe.xml.Parser.escapes.exists(s)) buf.b += Std.string("&" + s + ";"); else buf.add(haxe.xml.Parser.escapes.get(s));
				start = p + 1;
				state = next;
			}
			break;
		}
		c = StringTools.fastCodeAt(str,++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) parent.addChild(Xml.createPCData(buf.b + HxOverrides.substr(str,start,p - start)));
		return p;
	}
	throw "Unexpected end";
};
var helpers = {};
helpers.Artboard = function() { };
$hxClasses["helpers.Artboard"] = helpers.Artboard;
helpers.Artboard.__name__ = true;
helpers.Artboard.hideOtherLayers = function(a,currentLayer,withChilds) {
	if(withChilds == null) withChilds = true;
	Global.onelog("------------hideOthers-----------for " + currentLayer.name(),{ fileName : "Artboard.hx", lineNumber : 55, className : "helpers.Artboard", methodName : "hideOtherLayers"});
	var parents = [];
	var node = currentLayer.parentGroup();
	while(node != a) {
		if(node.isVisible()) parents.push(node);
		node = node.parentGroup();
	}
	var $it0 = (function($this) {
		var $r;
		var _this = a.layers();
		$r = new NativeArrayIterator(_this);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var layer = $it0.next();
		if(currentLayer != layer) {
			var layerParent = layer.parentGroup();
			if(withChilds) {
				if(layer.isVisible()) try {
					layer.setIsVisible(false);
					helpers.Artboard.setHiddenLayers(a,layer);
				} catch( err ) {
				}
			} else {
			}
		}
	}
	helpers.Artboard.hideSiblings(a,currentLayer,currentLayer,withChilds);
	var _g = 0;
	while(_g < parents.length) {
		var p = parents[_g];
		++_g;
		try {
			p.setIsVisible(true);
		} catch( err1 ) {
			Global._trace(err1,{ fileName : "Artboard.hx", lineNumber : 91, className : "helpers.Artboard", methodName : "hideOtherLayers"});
		}
	}
	parents = null;
};
helpers.Artboard.hideParentsSiblings = function(a,currentLayer,origLayer,withChilds) {
	var active = currentLayer.parentGroup();
	while(active.parentGroup() != a) {
		helpers.Artboard.hideSiblings(a,active,origLayer,withChilds);
		active = active.parentGroup();
	}
};
helpers.Artboard.hideSiblings = function(a,currentLayer,origLayer,withChilds) {
	var $it0 = (function($this) {
		var $r;
		var _this = currentLayer.parentGroup().layers();
		$r = new NativeArrayIterator(_this);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var child = $it0.next();
		if(child != currentLayer) {
			Global.onelog("hide" + child.name(),{ fileName : "Artboard.hx", lineNumber : 117, className : "helpers.Artboard", methodName : "hideSiblings"});
			if(child.isVisible()) helpers.Artboard.hideParentsSiblings(a,child,origLayer,withChilds);
			helpers.Artboard.setHiddenLayers(a,child);
			child.setIsVisible(false);
		}
	}
};
helpers.Artboard.showHiddenLayers = function(a) {
	Global.onelog("--------------show---------------",{ fileName : "Artboard.hx", lineNumber : 128, className : "helpers.Artboard", methodName : "showHiddenLayers"});
	var $it0 = helpers.Artboard.getHiddenLayers(a).iterator();
	while( $it0.hasNext() ) {
		var hidden = $it0.next();
		hidden.setIsVisible(true);
	}
};
helpers.Artboard.getHiddenLayers = function(a) {
	var key = a.hash();
	return helpers.Artboard.hiddenLayers.get(key);
};
helpers.Artboard.setHiddenLayers = function(a,hiddenLayer) {
	if(helpers.Artboard.getHiddenLayers(a) == null) {
		var key = a.hash();
		var value = new List();
		helpers.Artboard.hiddenLayers.set(key,value);
	}
	var liste = null;
	if((function($this) {
		var $r;
		var key1 = a.hash();
		$r = helpers.Artboard.hiddenLayers.get(key1);
		return $r;
	}(this)) != null) {
		var key2 = a.hash();
		liste = helpers.Artboard.hiddenLayers.get(key2);
	} else liste = new List();
	liste.add(hiddenLayer);
	var key3 = a.hash();
	helpers.Artboard.hiddenLayers.set(key3,liste);
};
helpers.Document = function() { };
$hxClasses["helpers.Document"] = helpers.Document;
helpers.Document.__name__ = true;
helpers.Document.dir = function(d) {
	return bs.BomberCommands.getFileFolder();
};
helpers.Document.createText = function(d,content,_path) {
	
 		var someContent = NSString.stringWithString_(content)
		var path = _path
		someContent.dataUsingEncoding_(NSUTF8StringEncoding).writeToFile_atomically_(path, true)
	;
};
helpers.Document.loadTxt = function(d,file) {
	var fileContent = NSString.stringWithContentsOfFile_encoding_error(file,NSUTF8StringEncoding,null);
	return fileContent;
};
helpers.Document.loadJson = function(d,file) {
	var fileContent = helpers.Document.loadTxt(d,file);
	var t = JSON.parse(fileContent);
	return t;
};
helpers.Layer = function() { };
$hxClasses["helpers.Layer"] = helpers.Layer;
helpers.Layer.__name__ = true;
helpers.Layer._class = function(layer) {
	return layer.class();
};
helpers.Layer.isArtBoard = function(l) {
	var klass = helpers.Layer._class(l);
	return klass == MSArtboardGroup;
};
helpers.Layer.isGroup = function(l) {
	var klass = helpers.Layer._class(l);
	return klass == MSLayerGroup;
};
helpers.Layer["export"] = function(layer,path,factor,config) {
	var invisible = false;
	var artboard = layer.parentArtboard();
	var page = layer.parentPage();
	helpers.Artboard.hideOtherLayers(artboard,layer);
	if(!layer.isVisible()) {
		invisible = true;
		layer.setIsVisible(true);
	}
	Global._trace("°°°°°°°°°°°°°°°path=" + path,{ fileName : "Layer.hx", lineNumber : 86, className : "helpers.Layer", methodName : "export"});
	path = config.imagesPath + "/" + page.name() + "/" + artboard.name() + "/" + helpers.StringSketch.clean(layer.name()) + "." + config.format;
	factor = config.scale;
	var sliced = helpers.Layer.withFactor(layer,factor);
	Global.doc.saveArtboardOrSlice_toFile(sliced.slice,path);
	if(invisible) layer.setIsVisible(false);
	try {
		helpers.Artboard.showHiddenLayers(artboard);
	} catch( msg ) {
		Global._trace(msg,{ fileName : "Layer.hx", lineNumber : 96, className : "helpers.Layer", methodName : "export"});
	}
	return { path : path, sliced : sliced};
};
helpers.Layer.exportSvg = function(layer,path,config) {
	var factor = null;
	path = helpers.StringSketch.cleanPath(path);
	var invisible = false;
	var artboard = layer.parentArtboard();
	var page = layer.parentPage();
	helpers.Artboard.hideOtherLayers(artboard,layer);
	if(!layer.isVisible()) {
		invisible = true;
		layer.setIsVisible(true);
	}
	path = path + "/" + page.name() + "/" + artboard.name() + "/" + helpers.StringSketch.clean(layer.name()) + ".svg";
	factor = config.scale;
	var sliced = helpers.Layer.withFactor(layer,factor);
	Global.doc.saveArtboardOrSlice_toFile(sliced.slice,path);
	if(invisible) layer.setIsVisible(false);
	try {
		helpers.Artboard.showHiddenLayers(artboard);
	} catch( msg ) {
		Global._trace(msg,{ fileName : "Layer.hx", lineNumber : 122, className : "helpers.Layer", methodName : "exportSvg"});
	}
	return { path : path, sliced : sliced};
};
helpers.Layer.withFactor = function(layer,factor) {
	var copy = layer.duplicate();
	var frame = copy.frame();
	Global._trace("here",{ fileName : "Layer.hx", lineNumber : 133, className : "helpers.Layer", methodName : "withFactor"});
	var rect = null;
	MSSliceTrimming.safeRectForSlice(copy);
	if(copy.parentOrSelfIsSymbol() && helpers.Layer.isGroup(copy)) {
		Global._trace("___________________________its a symbol ______________",{ fileName : "Layer.hx", lineNumber : 140, className : "helpers.Layer", methodName : "withFactor"});
		copy.setIgnoreNextSymbolSyncChange(true);
	} else MSSliceTrimming.trimSlice_toFitLayers(copy,null);
	var bounds = { x : copy.absoluteRect().rulerX(), y : copy.absoluteRect().rulerY(), width : copy.frame().width(), height : copy.frame().height(), relx : copy.frame().x(), rely : copy.frame().y()};
	var rect1 = copy.absoluteRect().rect();
	var slice = MSSlice.sliceWithRect_scale(rect1,factor);
	try {
		copy.removeFromParent();
	} catch( msg ) {
		log(msg);
	}
	return { slice : slice, bounds : bounds};
};
helpers.Format = { __ename__ : true, __constructs__ : ["Png","Svg","Jpg","Pdf","Tiff","Eps"] };
helpers.Format.Png = ["Png",0];
helpers.Format.Png.toString = $estr;
helpers.Format.Png.__enum__ = helpers.Format;
helpers.Format.Svg = ["Svg",1];
helpers.Format.Svg.toString = $estr;
helpers.Format.Svg.__enum__ = helpers.Format;
helpers.Format.Jpg = ["Jpg",2];
helpers.Format.Jpg.toString = $estr;
helpers.Format.Jpg.__enum__ = helpers.Format;
helpers.Format.Pdf = ["Pdf",3];
helpers.Format.Pdf.toString = $estr;
helpers.Format.Pdf.__enum__ = helpers.Format;
helpers.Format.Tiff = ["Tiff",4];
helpers.Format.Tiff.toString = $estr;
helpers.Format.Tiff.__enum__ = helpers.Format;
helpers.Format.Eps = ["Eps",5];
helpers.Format.Eps.toString = $estr;
helpers.Format.Eps.__enum__ = helpers.Format;
helpers.Slice = function() { };
$hxClasses["helpers.Slice"] = helpers.Slice;
helpers.Slice.__name__ = true;
helpers.Slice["export"] = function(slice,orig,path,factor,config) {
	var options = { };
	var firstOption = slice.exportOptions().sizes().firstObject();
	options.format = Type.createEnum(helpers.Format,helpers.StringSketch.capitalize(Std.string(firstOption.format())));
	options.suffix = firstOption.name();
	options.scale = firstOption.scale();
	var layer = orig;
	Global.onelog("layer" + layer.name(),{ fileName : "Slice.hx", lineNumber : 46, className : "helpers.Slice", methodName : "export"});
	var invisible = false;
	var artboard = layer.parentArtboard();
	var page = layer.parentPage();
	helpers.Artboard.hideOtherLayers(artboard,layer);
	if(!layer.isVisible()) {
		invisible = true;
		layer.setIsVisible(true);
	}
	path = config.imagesPath + page.name() + "/" + artboard.name() + "/" + helpers.StringSketch.clean(layer.name()) + "." + Std.string(options.format).toLowerCase();
	Global._trace(path + "factor=" + (factor == null?"null":"" + factor),{ fileName : "Slice.hx", lineNumber : 57, className : "helpers.Slice", methodName : "export"});
	if(config.forceSlices) {
		var factor1 = options.scale;
	} else factor = config.scale;
	var sliced = helpers.Layer.withFactor(slice,factor);
	Global.doc.saveArtboardOrSlice_toFile(sliced.slice,path);
	if(invisible) layer.setIsVisible(false);
	try {
		helpers.Artboard.showHiddenLayers(artboard);
	} catch( msg ) {
		Global._trace(msg,{ fileName : "Slice.hx", lineNumber : 71, className : "helpers.Slice", methodName : "export"});
	}
	return { path : path, sliced : sliced};
};
helpers.StringSketch = function() { };
$hxClasses["helpers.StringSketch"] = helpers.StringSketch;
helpers.StringSketch.__name__ = true;
helpers.StringSketch.capitalize = function(str) {
	return str.charAt(0).toUpperCase() + HxOverrides.substr(str,1,null);
};
helpers.StringSketch.cleanPath = function(str) {
	var r = new EReg("/+$","");
	return r.replace(str,"");
};
helpers.StringSketch.clean = function(str) {
	var r = new EReg("\\s+","g");
	var trimed = StringTools.trim(str);
	return r.replace(trimed," ");
};
helpers.StringSketch.endsWith = function(str,ends) {
	if(ends == "") return true;
	if(str == null || ends == null) return false;
	if(str == null) str = "null"; else str = "" + str;
	if(ends == null) ends = "null"; else ends = "" + ends;
	return str.length >= ends.length && HxOverrides.substr(str,str.length - ends.length,null) == ends;
};
helpers.StringSketch.startsWith = function(str,starts) {
	var str1;
	if(str == null) str1 = "null"; else str1 = "" + str;
	if(starts == "") return true;
	if(str1 == null || starts == null) return false;
	var $is = str1.length >= starts.length && HxOverrides.substr(str1,0,starts.length) == starts;
	return $is;
};
helpers.StringSketch.getTextTag = function(text) {
	var textname;
	if(text == null) textname = "null"; else textname = "" + text;
	var tags = new EReg("^<(a|blockquote|div|h1|h2|h3|h4|h5|h6|label|p|span)>","");
	if(tags.match(textname)) {
		var name = tags.replace(textname,"");
		var tag = tags.matched(0);
		var tagName = tags.matched(1);
		return { name : name, tag : tag, tagName : tagName};
	}
	return { name : textname, tag : "<span>", tagName : "span"};
};
helpers.UI = function() { };
$hxClasses["helpers.UI"] = helpers.UI;
helpers.UI.__name__ = true;
helpers.UI.alert = function(msg,title) {
	bs.BomberCommands.alert(msg,title);
};
var js = {};
js.Boot = function() { };
$hxClasses["js.Boot"] = js.Boot;
js.Boot.__name__ = true;
js.Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) return Array; else return o.__class__;
};
js.Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) str += "," + js.Boot.__string_rec(o[i],s); else str += js.Boot.__string_rec(o[i],s);
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g2 = 0;
			while(_g2 < l) {
				var i2 = _g2++;
				str1 += (i2 > 0?",":"") + js.Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString) {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) str2 += ", \n";
		str2 += s + k + " : " + js.Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
js.Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js.Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js.Boot.__interfLoop(cc.__super__,cl);
};
js.Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Array:
		return (o instanceof Array) && o.__enum__ == null;
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) return true;
				if(js.Boot.__interfLoop(js.Boot.getClass(o),cl)) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
};
js.Boot.__cast = function(o,t) {
	if(js.Boot.__instanceof(o,t)) return o; else throw "Cannot cast " + Std.string(o) + " to " + Std.string(t);
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
Global.doc = doc;
Global.selection = selection;
if(Array.prototype.indexOf) HxOverrides.indexOf = function(a,o,i) {
	return Array.prototype.indexOf.call(a,o,i);
};
Math.NaN = Number.NaN;
Math.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;
Math.POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
$hxClasses.Math = Math;
Math.isFinite = function(i) {
	return isFinite(i);
};
Math.isNaN = function(i1) {
	return isNaN(i1);
};
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = true;
$hxClasses.Array = Array;
Array.__name__ = true;
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
Xml.Element = "element";
Xml.PCData = "pcdata";
Xml.CData = "cdata";
Xml.Comment = "comment";
Xml.DocType = "doctype";
Xml.ProcessingInstruction = "processingInstruction";
Xml.Document = "document";
HtmlView.__meta__ = { obj : { template : ["\n<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><title>@title</title>\n<style>\nimg{display:block;}\n</style>\n</head><body>\n@content\n</body></html>\n\n\t"]}};
de.polygonal.ds.HashKey._counter = 0;
exp.Config.defaults = { imagesPath : "/view/images", scale : 1, format : "png", forceConfig : true, allArtBoards : false, allPages : false, cleanUp : false, forceSlices : false};
exp.ExportFactory.config = exp.Config.defaults;
haxe.xml.Parser.escapes = (function($this) {
	var $r;
	var h = new haxe.ds.StringMap();
	h.set("lt","<");
	h.set("gt",">");
	h.set("amp","&");
	h.set("quot",'"');
	h.set("apos","'");
	h.set("nbsp",String.fromCharCode(160));
	$r = h;
	return $r;
}(this));
helpers.Artboard.hiddenLayers = new haxe.ds.IntMap();
HTMLExporter.main();
})();
