// basicExporter (ctrl alt command e) 
(function () { "use strict";
var $hxClasses = {},$estr = function() { return js.Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var BasicExporter = function() {
	Global._trace("----------------start---------------------",{ fileName : "BasicExporter.hx", lineNumber : 23, className : "BasicExporter", methodName : "new"});
	this.cleanup();
	var indent = "*";
	this.tree = new de.polygonal.ds.TreeNode(new exp.ExportContainer(null));
	this.builder = new de.polygonal.ds.TreeBuilder(this.tree);
	var activePage = Global.doc.currentPage();
	var $it0 = (function($this) {
		var $r;
		var _this = Global.doc.pages();
		$r = new NativeArrayIterator(_this);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var page = $it0.next();
		Global.doc.setCurrentPage(page);
		this.builder.appendChild(exp.ExportFactory.create(page)["export"]());
		Global._trace(indent + page.name(),{ fileName : "BasicExporter.hx", lineNumber : 57, className : "BasicExporter", methodName : "new"});
		this.ArtboardsLoop(page.artboards());
	}
	Global.doc.setCurrentPage(activePage);
	try {
		var framer = new FramerExporter();
		var jsonframe = framer.toJson(this.tree);
		this.exportFramer(JSON.stringify(jsonframe));
	} catch( msg ) {
		Global._trace("error for framer" + Std.string(msg),{ fileName : "BasicExporter.hx", lineNumber : 105, className : "BasicExporter", methodName : "new"});
	}
	Global._trace("done",{ fileName : "BasicExporter.hx", lineNumber : 109, className : "BasicExporter", methodName : "new"});
};
$hxClasses["BasicExporter"] = BasicExporter;
BasicExporter.__name__ = ["BasicExporter"];
BasicExporter.main = function() {
	var app = new BasicExporter();
};
BasicExporter.prototype = {
	builder: null
	,tree: null
	,cleanup: function() {
		try {
			var _this = NSFileManager.defaultManager();
			var dir = helpers.Document.dir(Global.doc) + "view/";
			var error = null;
			_this.removeItemAtPath_error(dir,error);
		} catch( msg ) {
			Global._trace("failde to clean view" + Std.string(msg),{ fileName : "BasicExporter.hx", lineNumber : 117, className : "BasicExporter", methodName : "cleanup"});
		}
	}
	,ArtboardsLoop: function(arts) {
		this.builder.down();
		Global._trace("ArtboardsLoop",{ fileName : "BasicExporter.hx", lineNumber : 124, className : "BasicExporter", methodName : "ArtboardsLoop"});
		var indent = "+";
		var $native = new NativeArrayIterator(arts).haxeArray();
		$native.reverse();
		var _g = 0;
		while(_g < $native.length) {
			var art = $native[_g];
			++_g;
			var exportable = exp.ExportFactory.create(art);
			if(exportable != null) {
				this.builder.appendChild(exportable["export"]());
				Global._trace("befor bigloop name=" + indent + art.name(),{ fileName : "BasicExporter.hx", lineNumber : 132, className : "BasicExporter", methodName : "ArtboardsLoop"});
				this.bigloop(art.layers());
			}
		}
		this.builder.up();
		Global._trace("end Artboard loop",{ fileName : "BasicExporter.hx", lineNumber : 137, className : "BasicExporter", methodName : "ArtboardsLoop"});
	}
	,bigloop: function(layers,indent) {
		Global._trace(" bigloop",{ fileName : "BasicExporter.hx", lineNumber : 143, className : "BasicExporter", methodName : "bigloop"});
		this.builder.down();
		if(indent == null) indent = "-"; else indent = indent + "-";
		var $native = new NativeArrayIterator(layers).haxeArray();
		$native.reverse();
		var _g = 0;
		while(_g < $native.length) {
			var layer = $native[_g];
			++_g;
			var exported = null;
			var factory = exp.ExportFactory.create(layer);
			if(factory != null) exported = factory["export"]();
			Global._trace("------------layer---------------" + layer.name(),{ fileName : "BasicExporter.hx", lineNumber : 153, className : "BasicExporter", methodName : "bigloop"});
			if(exported != null) {
				Global._trace("--------------type-------------" + Std.string(exported.type),{ fileName : "BasicExporter.hx", lineNumber : 155, className : "BasicExporter", methodName : "bigloop"});
				this.builder.appendChild(exported);
				Global._trace("name=" + indent + layer.name(),{ fileName : "BasicExporter.hx", lineNumber : 157, className : "BasicExporter", methodName : "bigloop"});
				Global._trace("flat?" + Std.string((exported.behaviour & 1 << exp.Behave.Flat[1]) != 0),{ fileName : "BasicExporter.hx", lineNumber : 158, className : "BasicExporter", methodName : "bigloop"});
				Global._trace("Sliced?" + Std.string((exported.behaviour & 1 << exp.Behave.Sliced[1]) != 0),{ fileName : "BasicExporter.hx", lineNumber : 159, className : "BasicExporter", methodName : "bigloop"});
				if(helpers.Layer.isGroup(layer) && !((exported.behaviour & 1 << exp.Behave.Flat[1]) != 0)) {
					Global._trace("isgroup and not Slice nor Flat",{ fileName : "BasicExporter.hx", lineNumber : 162, className : "BasicExporter", methodName : "bigloop"});
					this.bigloop(layer.layers(),indent);
				}
			}
		}
		this.builder.up();
		Global._trace("end bigloop",{ fileName : "BasicExporter.hx", lineNumber : 170, className : "BasicExporter", methodName : "bigloop"});
	}
	,toXml: function(tree,xml) {
		var $it0 = tree.childIterator();
		while( $it0.hasNext() ) {
			var node = $it0.next();
			var castednode;
			castednode = js.Boot.__cast(node , exp.ExportLayer);
			var treeNode = tree.find(node);
			var _node = null;
			Global._trace(node.type,{ fileName : "BasicExporter.hx", lineNumber : 198, className : "BasicExporter", methodName : "toXml"});
			var _g = node.type;
			switch(_g[1]) {
			case 0:
				_node = Xml.createElement("page");
				break;
			case 1:
				_node = Xml.createElement("Artboard");
				break;
			default:
				_node = Xml.createElement("layer");
			}
			_node.set("name",node.name);
			var _g1 = node.type;
			switch(_g1[1]) {
			case 0:
				_node.set("class","page");
				break;
			case 1:
				_node.set("class","artboard");
				break;
			case 2:
				_node.set("class","text");
				_node.insertChild(Xml.createCData((js.Boot.__cast(node , exp.ExportText)).text.text),0);
				break;
			case 4:
				_node.set("class","svg");
				var img = Xml.createElement("img");
				img.set("src",node.src);
				_node.insertChild(img,0);
				break;
			case 3:
				_node.set("class","image");
				var img1 = Xml.createElement("img");
				img1.set("src",node.src);
				_node.insertChild(img1,0);
				break;
			case 5:
				_node.set("class","container");
				break;
			case 6:
				_node.set("class","slice");
				break;
			}
			xml.insertChild(_node,0);
			if(treeNode.children != null) this.toXml(treeNode,_node);
		}
		return xml;
	}
	,toJson: function(tree,obj) {
		if(obj.children == null) obj.children = [];
		var $it0 = tree.childIterator();
		while( $it0.hasNext() ) {
			var node = $it0.next();
			var treeNode = tree.find(node);
			var _obj = node.toObj();
			obj.children.push(_obj);
			var _g = node.type;
			if(treeNode.children != null) this.toJson(treeNode,_obj);
		}
		return obj;
	}
	,exportjson: function(content) {
		Global.writeToFile(content,helpers.Document.dir(Global.doc) + "/view/" + Global.doc.displayName() + ".json",null);
	}
	,exportFramer: function(content) {
		Global.writeToFile(content,helpers.Document.dir(Global.doc) + "/view/framer-" + Global.doc.displayName() + ".json",null);
	}
	,__class__: BasicExporter
};
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) this.r.lastIndex = 0;
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) return this.r.m[n]; else throw "EReg::matched";
	}
	,matchedLeft: function() {
		if(this.r.m == null) throw "No string matched";
		return this.r.s.substr(0,this.r.m.index);
	}
	,matchedRight: function() {
		if(this.r.m == null) throw "No string matched";
		var sz = this.r.m.index + this.r.m[0].length;
		return this.r.s.substr(sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) throw "No string matched";
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) len = -1;
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0?s:HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) this.r.s = s;
			return b;
		} else {
			var b1 = this.match(len < 0?HxOverrides.substr(s,pos,null):HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,map: function(s,f) {
		var offset = 0;
		var buf = new StringBuf();
		do {
			if(offset >= s.length) break; else if(!this.matchSub(s,offset)) {
				buf.add(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf.add(HxOverrides.substr(s,offset,p.pos - offset));
			buf.add(f(this));
			if(p.len == 0) {
				buf.add(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else offset = p.pos + p.len;
		} while(this.r.global);
		if(!this.r.global && offset > 0 && offset < s.length) buf.add(HxOverrides.substr(s,offset,null));
		return buf.b;
	}
	,__class__: EReg
};
var FramerExporter = function() {
};
$hxClasses["FramerExporter"] = FramerExporter;
FramerExporter.__name__ = ["FramerExporter"];
FramerExporter.prototype = {
	id: null
	,sketch: null
	,toJson: function(tree,obj) {
		Global._trace("toJson",{ fileName : "FramerExporter.hx", lineNumber : 74, className : "FramerExporter", methodName : "toJson"});
		var $it0 = tree.childIterator();
		while( $it0.hasNext() ) {
			var node = $it0.next();
			var treeNode = tree.find(node);
			var layer = { };
			var _node;
			_node = js.Boot.__cast(node , exp.ExportLayer);
			layer.id = ++this.id;
			layer.name = _node.name;
			var layerframe = { };
			layerframe.height = _node.height;
			layerframe.width = _node.width;
			layerframe.x = _node.relx;
			layerframe.y = _node.rely;
			layerframe.rotation = 0;
			layer.layerFrame = layerframe;
			layer.maskFrame = null;
			layer.imageType = null;
			layer.image = null;
			layer.text = null;
			layer.visible = _node.visible;
			layer.children = [];
			var _g = node.type;
			switch(_g[1]) {
			case 3:
				var image = { };
				var frame = { };
				frame.x = _node.relx;
				frame.y = _node.rely;
				frame.width = _node.width;
				frame.height = _node.height;
				image.frame = frame;
				image.path = _node.src;
				layer.imageType = _node.format;
				layer.image = image;
				break;
			case 4:
				var image1 = { };
				var frame1 = { };
				frame1.x = _node.relx;
				frame1.y = _node.rely;
				frame1.width = _node.width;
				frame1.height = _node.height;
				image1.frame = frame1;
				image1.path = _node.src;
				layer.imageType = _node.format;
				layer.image = image1;
				break;
			case 2:
				layer.text = node.toObject();
				break;
			default:
				Global._trace("badtype",{ fileName : "FramerExporter.hx", lineNumber : 132, className : "FramerExporter", methodName : "toJson"});
			}
			if(obj == null) {
				obj = [];
				obj.push(layer);
			} else if(_node.type == exp.ExportTypes.Page) obj.push(layer); else obj.children.push(layer);
			if(treeNode.children != null) this.toJson(treeNode,layer);
		}
		return obj;
	}
	,__class__: FramerExporter
};
var Global = function() {
};
$hxClasses["Global"] = Global;
Global.__name__ = ["Global"];
Global.doc = null;
Global.selection = null;
Global.hxselection = null;
Global.onelog = function(m,p) {
	if(Type.resolveClass(p.className).one) {
		Global._trace = function(m1,p1) {
		};
		log(m);
		log(p.className + " " + p.lineNumber + "");
	}
};
Global._trace = function(m,p) {
	log(p.className + " " + p.lineNumber + "" + Std.string(m));
};
Global.log = function(m) {
	log(m);
};
Global.writeToFile = function(content,path,atomically) {
	if(atomically == null) atomically = false;
	var nsContent = NSString.stringWithString(content);
	return nsContent.writeToFile_atomically(path,atomically);
};
Global.prototype = {
	__class__: Global
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10?"0" + m:"" + m) + "-" + (d < 10?"0" + d:"" + d) + " " + (h < 10?"0" + h:"" + h) + ":" + (mi < 10?"0" + mi:"" + mi) + ":" + (s < 10?"0" + s:"" + s);
};
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d.setTime(0);
		d.setUTCHours(k[0]);
		d.setUTCMinutes(k[1]);
		d.setUTCSeconds(k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw "Invalid date format : " + s;
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(pos != null && pos != 0 && len != null && len < 0) return "";
	if(len == null) len = s.length;
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) pos = 0;
	} else if(len < 0) len = s.length + len - pos;
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) i = 0;
	}
	while(i < len) {
		if(a[i] === obj) return i;
		i++;
	}
	return -1;
};
HxOverrides.lastIndexOf = function(a,obj,i) {
	var len = a.length;
	if(i >= len) i = len - 1; else if(i < 0) i += len;
	while(i >= 0) {
		if(a[i] === obj) return i;
		i--;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = HxOverrides.indexOf(a,obj,0);
	if(i == -1) return false;
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = ["IntIterator"];
IntIterator.prototype = {
	min: null
	,max: null
	,hasNext: function() {
		return this.min < this.max;
	}
	,next: function() {
		return this.min++;
	}
	,__class__: IntIterator
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.array = function(it) {
	var a = new Array();
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var i = $it0.next();
		a.push(i);
	}
	return a;
};
Lambda.list = function(it) {
	var l = new List();
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var i = $it0.next();
		l.add(i);
	}
	return l;
};
Lambda.map = function(it,f) {
	var l = new List();
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		l.add(f(x));
	}
	return l;
};
Lambda.mapi = function(it,f) {
	var l = new List();
	var i = 0;
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		l.add(f(i++,x));
	}
	return l;
};
Lambda.has = function(it,elt) {
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(x == elt) return true;
	}
	return false;
};
Lambda.exists = function(it,f) {
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(f(x)) return true;
	}
	return false;
};
Lambda.foreach = function(it,f) {
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(!f(x)) return false;
	}
	return true;
};
Lambda.iter = function(it,f) {
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		f(x);
	}
};
Lambda.filter = function(it,f) {
	var l = new List();
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(f(x)) l.add(x);
	}
	return l;
};
Lambda.fold = function(it,f,first) {
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		first = f(x,first);
	}
	return first;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var $it0 = $iterator(it)();
		while( $it0.hasNext() ) {
			var _ = $it0.next();
			n++;
		}
	} else {
		var $it1 = $iterator(it)();
		while( $it1.hasNext() ) {
			var x = $it1.next();
			if(pred(x)) n++;
		}
	}
	return n;
};
Lambda.empty = function(it) {
	return !$iterator(it)().hasNext();
};
Lambda.indexOf = function(it,v) {
	var i = 0;
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var v2 = $it0.next();
		if(v == v2) return i;
		i++;
	}
	return -1;
};
Lambda.find = function(it,f) {
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var v = $it0.next();
		if(f(v)) return v;
	}
	return null;
};
Lambda.concat = function(a,b) {
	var l = new List();
	var $it0 = $iterator(a)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		l.add(x);
	}
	var $it1 = $iterator(b)();
	while( $it1.hasNext() ) {
		var x1 = $it1.next();
		l.add(x1);
	}
	return l;
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = [item];
		if(this.h == null) this.h = x; else this.q[1] = x;
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = [item,this.h];
		this.h = x;
		if(this.q == null) this.q = x;
		this.length++;
	}
	,first: function() {
		if(this.h == null) return null; else return this.h[0];
	}
	,last: function() {
		if(this.q == null) return null; else return this.q[0];
	}
	,pop: function() {
		if(this.h == null) return null;
		var x = this.h[0];
		this.h = this.h[1];
		if(this.h == null) this.q = null;
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l[0] == v) {
				if(prev == null) this.h = l[1]; else prev[1] = l[1];
				if(this.q == l) this.q = prev;
				this.length--;
				return true;
			}
			prev = l;
			l = l[1];
		}
		return false;
	}
	,iterator: function() {
		return { h : this.h, hasNext : function() {
			return this.h != null;
		}, next : function() {
			if(this.h == null) return null;
			var x = this.h[0];
			this.h = this.h[1];
			return x;
		}};
	}
	,toString: function() {
		var s = new StringBuf();
		var first = true;
		var l = this.h;
		s.b += "{";
		while(l != null) {
			if(first) first = false; else s.b += ", ";
			s.add(Std.string(l[0]));
			l = l[1];
		}
		s.b += "}";
		return s.b;
	}
	,join: function(sep) {
		var s = new StringBuf();
		var first = true;
		var l = this.h;
		while(l != null) {
			if(first) first = false; else if(sep == null) s.b += "null"; else s.b += "" + sep;
			s.b += Std.string(l[0]);
			l = l[1];
		}
		return s.b;
	}
	,filter: function(f) {
		var l2 = new List();
		var l = this.h;
		while(l != null) {
			var v = l[0];
			l = l[1];
			if(f(v)) l2.add(v);
		}
		return l2;
	}
	,map: function(f) {
		var b = new List();
		var l = this.h;
		while(l != null) {
			var v = l[0];
			l = l[1];
			b.add(f(v));
		}
		return b;
	}
	,__class__: List
};
var _Map = {};
_Map.Map_Impl_ = function() { };
$hxClasses["_Map.Map_Impl_"] = _Map.Map_Impl_;
_Map.Map_Impl_.__name__ = ["_Map","Map_Impl_"];
_Map.Map_Impl_._new = null;
_Map.Map_Impl_.set = function(this1,key,value) {
	this1.set(key,value);
};
_Map.Map_Impl_.get = function(this1,key) {
	return this1.get(key);
};
_Map.Map_Impl_.exists = function(this1,key) {
	return this1.exists(key);
};
_Map.Map_Impl_.remove = function(this1,key) {
	return this1.remove(key);
};
_Map.Map_Impl_.keys = function(this1) {
	return this1.keys();
};
_Map.Map_Impl_.iterator = function(this1) {
	return this1.iterator();
};
_Map.Map_Impl_.toString = function(this1) {
	return this1.toString();
};
_Map.Map_Impl_.arrayWrite = function(this1,k,v) {
	this1.set(k,v);
	return v;
};
_Map.Map_Impl_.toStringMap = function(t) {
	return new haxe.ds.StringMap();
};
_Map.Map_Impl_.toIntMap = function(t) {
	return new haxe.ds.IntMap();
};
_Map.Map_Impl_.toEnumValueMapMap = function(t) {
	return new haxe.ds.EnumValueMap();
};
_Map.Map_Impl_.toObjectMap = function(t) {
	return new haxe.ds.ObjectMap();
};
_Map.Map_Impl_.fromStringMap = function(map) {
	return map;
};
_Map.Map_Impl_.fromIntMap = function(map) {
	return map;
};
_Map.Map_Impl_.fromObjectMap = function(map) {
	return map;
};
var IMap = function() { };
$hxClasses["IMap"] = IMap;
IMap.__name__ = ["IMap"];
IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,keys: null
	,iterator: null
	,toString: null
	,__class__: IMap
};
Math.__name__ = ["Math"];
var RecTools = function() { };
$hxClasses["RecTools"] = RecTools;
RecTools.__name__ = ["RecTools"];
RecTools.getBounds = function(rect) {
	return { x : rect.x(), y : rect.y(), width : rect.width(), height : rect.height()};
};
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) return null; else if(o.__properties__ && (tmp = o.__properties__["get_" + field])) return o[tmp](); else return o[field];
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	if(o.__properties__ && (tmp = o.__properties__["set_" + field])) o[tmp](value); else o[field] = value;
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) a.push(f);
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	return typeof(f) == "function" && !(f.__name__ || f.__ename__);
};
Reflect.compare = function(a,b) {
	if(a == b) return 0; else if(a > b) return 1; else return -1;
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) return true;
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) return false;
	return f1.scope == f2.scope && f1.method == f2.method && f1.method != null;
};
Reflect.isObject = function(v) {
	if(v == null) return false;
	var t = typeof(v);
	return t == "string" || t == "object" && v.__enum__ == null || t == "function" && (v.__name__ || v.__ename__) != null;
};
Reflect.isEnumValue = function(v) {
	return v != null && v.__enum__ != null;
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) return false;
	delete(o[field]);
	return true;
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		Reflect.setField(o2,f,Reflect.field(o,f));
	}
	return o2;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var NativeArrayIterator = function(ar) {
	this.array = ar;
	this.i = 0;
};
$hxClasses["NativeArrayIterator"] = NativeArrayIterator;
NativeArrayIterator.__name__ = ["NativeArrayIterator"];
NativeArrayIterator.prototype = {
	array: null
	,i: null
	,next: function() {
		return this.array[this.i++];
	}
	,hasNext: function() {
		return this.i < this.array.length();
	}
	,reset: function() {
		this.i = 0;
	}
	,keys: function() {
		return new IntIterator(0,this.array.length());
	}
	,haxeArray: function() {
		var a = [];
		var $it0 = this;
		while( $it0.hasNext() ) {
			var e = $it0.next();
			a.push(e);
		}
		return a;
	}
	,__class__: NativeArrayIterator
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std["is"] = function(v,t) {
	return js.Boot.__instanceof(v,t);
};
Std.instance = function(value,c) {
	if((value instanceof c)) return value; else return null;
};
Std.string = function(s) {
	return js.Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) v = parseInt(x);
	if(isNaN(v)) return null;
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
Std.random = function(x) {
	if(x <= 0) return 0; else return Math.floor(Math.random() * x);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,get_length: function() {
		return this.b.length;
	}
	,add: function(x) {
		this.b += Std.string(x);
	}
	,addChar: function(c) {
		this.b += String.fromCharCode(c);
	}
	,addSub: function(s,pos,len) {
		if(len == null) this.b += HxOverrides.substr(s,pos,null); else this.b += HxOverrides.substr(s,pos,len);
	}
	,toString: function() {
		return this.b;
	}
	,__class__: StringBuf
	,__properties__: {get_length:"get_length"}
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
};
StringTools.urlDecode = function(s) {
	return decodeURIComponent(s.split("+").join(" "));
};
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) return s.split('"').join("&quot;").split("'").join("&#039;"); else return s;
};
StringTools.htmlUnescape = function(s) {
	return s.split("&gt;").join(">").split("&lt;").join("<").split("&quot;").join('"').split("&#039;").join("'").split("&amp;").join("&");
};
StringTools.startsWith = function(s,start) {
	return s.length >= start.length && HxOverrides.substr(s,0,start.length) == start;
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	return slen >= elen && HxOverrides.substr(s,slen - elen,elen) == end;
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	return c > 8 && c < 14 || c == 32;
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) r++;
	if(r > 0) return HxOverrides.substr(s,r,l - r); else return s;
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) r++;
	if(r > 0) return HxOverrides.substr(s,0,l - r); else return s;
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) return s;
	while(s.length < l) s = c + s;
	return s;
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) return s;
	while(s.length < l) s = s + c;
	return s;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) while(s.length < digits) s = "0" + s;
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
StringTools.isEof = function(c) {
	return c != c;
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClass = function(o) {
	if(o == null) return null;
	if((o instanceof Array) && o.__enum__ == null) return Array; else return o.__class__;
};
Type.getEnum = function(o) {
	if(o == null) return null;
	return o.__enum__;
};
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) return null;
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) return null;
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	default:
		throw "Too many arguments";
	}
	return null;
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) throw "No such constructor " + constr;
	if(Reflect.isFunction(f)) {
		if(params == null) throw "Constructor " + constr + " need parameters";
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) throw "Constructor " + constr + " does not need parameters";
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c = e.__constructs__[index];
	if(c == null) throw index + " is not a valid enum constructor index";
	return Type.createEnum(e,c,params);
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type.getEnumConstructs = function(e) {
	var a = e.__constructs__;
	return a.slice();
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "string":
		return ValueType.TClass(String);
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) return ValueType.TInt;
		return ValueType.TFloat;
	case "object":
		if(v == null) return ValueType.TNull;
		var e = v.__enum__;
		if(e != null) return ValueType.TEnum(e);
		var c;
		if((v instanceof Array) && v.__enum__ == null) c = Array; else c = v.__class__;
		if(c != null) return ValueType.TClass(c);
		return ValueType.TObject;
	case "function":
		if(v.__name__ || v.__ename__) return ValueType.TObject;
		return ValueType.TFunction;
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) return true;
	try {
		if(a[0] != b[0]) return false;
		var _g1 = 2;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!Type.enumEq(a[i],b[i])) return false;
		}
		var e = a.__enum__;
		if(e != b.__enum__ || e == null) return false;
	} catch( e1 ) {
		return false;
	}
	return true;
};
Type.enumConstructor = function(e) {
	return e[0];
};
Type.enumParameters = function(e) {
	return e.slice(2);
};
Type.enumIndex = function(e) {
	return e[1];
};
Type.allEnums = function(e) {
	var all = [];
	var cst = e.__constructs__;
	var _g = 0;
	while(_g < cst.length) {
		var c = cst[_g];
		++_g;
		var v = Reflect.field(e,c);
		if(!Reflect.isFunction(v)) all.push(v);
	}
	return all;
};
var XmlType = $hxClasses["XmlType"] = { __ename__ : ["XmlType"], __constructs__ : [] };
var Xml = function() {
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.Element = null;
Xml.PCData = null;
Xml.CData = null;
Xml.Comment = null;
Xml.DocType = null;
Xml.ProcessingInstruction = null;
Xml.Document = null;
Xml.parse = function(str) {
	return haxe.xml.Parser.parse(str);
};
Xml.createElement = function(name) {
	var r = new Xml();
	r.nodeType = Xml.Element;
	r._children = new Array();
	r._attributes = new haxe.ds.StringMap();
	r.set_nodeName(name);
	return r;
};
Xml.createPCData = function(data) {
	var r = new Xml();
	r.nodeType = Xml.PCData;
	r.set_nodeValue(data);
	return r;
};
Xml.createCData = function(data) {
	var r = new Xml();
	r.nodeType = Xml.CData;
	r.set_nodeValue(data);
	return r;
};
Xml.createComment = function(data) {
	var r = new Xml();
	r.nodeType = Xml.Comment;
	r.set_nodeValue(data);
	return r;
};
Xml.createDocType = function(data) {
	var r = new Xml();
	r.nodeType = Xml.DocType;
	r.set_nodeValue(data);
	return r;
};
Xml.createProcessingInstruction = function(data) {
	var r = new Xml();
	r.nodeType = Xml.ProcessingInstruction;
	r.set_nodeValue(data);
	return r;
};
Xml.createDocument = function() {
	var r = new Xml();
	r.nodeType = Xml.Document;
	r._children = new Array();
	return r;
};
Xml.prototype = {
	nodeType: null
	,parent: null
	,_nodeName: null
	,_nodeValue: null
	,_attributes: null
	,_children: null
	,_parent: null
	,get_nodeName: function() {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._nodeName;
	}
	,set_nodeName: function(n) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._nodeName = n;
	}
	,get_nodeValue: function() {
		if(this.nodeType == Xml.Element || this.nodeType == Xml.Document) throw "bad nodeType";
		return this._nodeValue;
	}
	,set_nodeValue: function(v) {
		if(this.nodeType == Xml.Element || this.nodeType == Xml.Document) throw "bad nodeType";
		return this._nodeValue = v;
	}
	,get_parent: function() {
		return this._parent;
	}
	,get: function(att) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._attributes.get(att);
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		this._attributes.set(att,value);
	}
	,remove: function(att) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		this._attributes.remove(att);
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._attributes.exists(att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._attributes.keys();
	}
	,iterator: function() {
		if(this._children == null) throw "bad nodetype";
		return { cur : 0, x : this._children, hasNext : function() {
			return this.cur < this.x.length;
		}, next : function() {
			return this.x[this.cur++];
		}};
	}
	,elements: function() {
		if(this._children == null) throw "bad nodetype";
		return { cur : 0, x : this._children, hasNext : function() {
			var k = this.cur;
			var l = this.x.length;
			while(k < l) {
				if(this.x[k].nodeType == Xml.Element) break;
				k += 1;
			}
			this.cur = k;
			return k < l;
		}, next : function() {
			var k1 = this.cur;
			var l1 = this.x.length;
			while(k1 < l1) {
				var n = this.x[k1];
				k1 += 1;
				if(n.nodeType == Xml.Element) {
					this.cur = k1;
					return n;
				}
			}
			return null;
		}};
	}
	,elementsNamed: function(name) {
		if(this._children == null) throw "bad nodetype";
		return { cur : 0, x : this._children, hasNext : function() {
			var k = this.cur;
			var l = this.x.length;
			while(k < l) {
				var n = this.x[k];
				if(n.nodeType == Xml.Element && n._nodeName == name) break;
				k++;
			}
			this.cur = k;
			return k < l;
		}, next : function() {
			var k1 = this.cur;
			var l1 = this.x.length;
			while(k1 < l1) {
				var n1 = this.x[k1];
				k1++;
				if(n1.nodeType == Xml.Element && n1._nodeName == name) {
					this.cur = k1;
					return n1;
				}
			}
			return null;
		}};
	}
	,firstChild: function() {
		if(this._children == null) throw "bad nodetype";
		return this._children[0];
	}
	,firstElement: function() {
		if(this._children == null) throw "bad nodetype";
		var cur = 0;
		var l = this._children.length;
		while(cur < l) {
			var n = this._children[cur];
			if(n.nodeType == Xml.Element) return n;
			cur++;
		}
		return null;
	}
	,addChild: function(x) {
		if(this._children == null) throw "bad nodetype";
		if(x._parent != null) HxOverrides.remove(x._parent._children,x);
		x._parent = this;
		this._children.push(x);
	}
	,removeChild: function(x) {
		if(this._children == null) throw "bad nodetype";
		var b = HxOverrides.remove(this._children,x);
		if(b) x._parent = null;
		return b;
	}
	,insertChild: function(x,pos) {
		if(this._children == null) throw "bad nodetype";
		if(x._parent != null) HxOverrides.remove(x._parent._children,x);
		x._parent = this;
		this._children.splice(pos,0,x);
	}
	,toString: function() {
		if(this.nodeType == Xml.PCData) return StringTools.htmlEscape(this._nodeValue);
		if(this.nodeType == Xml.CData) return "<![CDATA[" + this._nodeValue + "]]>";
		if(this.nodeType == Xml.Comment) return "<!--" + this._nodeValue + "-->";
		if(this.nodeType == Xml.DocType) return "<!DOCTYPE " + this._nodeValue + ">";
		if(this.nodeType == Xml.ProcessingInstruction) return "<?" + this._nodeValue + "?>";
		var s = new StringBuf();
		if(this.nodeType == Xml.Element) {
			s.b += "<";
			s.b += Std.string(this._nodeName);
			var $it0 = this._attributes.keys();
			while( $it0.hasNext() ) {
				var k = $it0.next();
				s.b += " ";
				if(k == null) s.b += "null"; else s.b += "" + k;
				s.b += '="';
				s.add(this._attributes.get(k));
				s.b += '"';
			}
			if(this._children.length == 0) {
				s.b += "/>";
				return s.b;
			}
			s.b += ">";
		}
		var $it1 = this.iterator();
		while( $it1.hasNext() ) {
			var x = $it1.next();
			s.add(x.toString());
		}
		if(this.nodeType == Xml.Element) {
			s.b += "</";
			s.b += Std.string(this._nodeName);
			s.b += ">";
		}
		return s.b;
	}
	,__class__: Xml
	,__properties__: {get_parent:"get_parent",set_nodeValue:"set_nodeValue",get_nodeValue:"get_nodeValue",set_nodeName:"set_nodeName",get_nodeName:"get_nodeName"}
};
var bs = {};
bs.BomberCommands = function() { };
$hxClasses["bs.BomberCommands"] = bs.BomberCommands;
bs.BomberCommands.__name__ = ["bs","BomberCommands"];
bs.BomberCommands.alert = function(msg,title) {
	if(title == null) title = "Whoops";
	var app = NSApplication.sharedApplication();
	log(app);
	app.displayDialog_withTitle(msg,title);
};
bs.BomberCommands.create_folder = function(path) {
	var file_manager = NSFileManager.defaultManager();
	try {
		file_manager.createDirectoryAtPath_withIntermediateDirectories_attributes_error(path,false,null,null);
	} catch( msg ) {
		log("error creating folder" + path + "--" + Std.string(msg));
	}
};
bs.BomberCommands.getFileFolder = function() {
	var file_url = Global.doc.fileURL();
	var file_path = file_url.path();
	var file_folder = file_path.split(Global.doc.displayName())[0];
	return file_folder;
};
bs.BomberCommands.getExportPath = function() {
	var file_folder = bs.BomberCommands.getFileFolder();
	var export_folder = file_folder + Global.doc.displayName().split(".sketch")[0] + "_export/";
	return export_folder;
};
bs.BomberCommands.export_all_slices = function(format,path) {
	if(path == null) path = bs.BomberCommands.getExportPath();
	try {
		var pages = Global.doc.pages();
		var $it0 = new NativeArrayIterator(pages);
		while( $it0.hasNext() ) {
			var page = $it0.next();
			Global.doc.setCurrentPage(page);
			var slices = Global.doc.currentPage().allSlices();
			var $it1 = new NativeArrayIterator(slices);
			while( $it1.hasNext() ) {
				var slice = $it1.next();
				var path1 = path + slice.name() + "." + format;
				Global.doc.saveArtboardOrSlice_toFile(slice,path1);
			}
		}
	} catch( msg ) {
		log("err" + Std.string(msg));
	}
};
bs.BomberCommands.export_all_artboards = function(format,path) {
	if(path == null) path = bs.BomberCommands.getExportPath();
	var pages = Global.doc.pages();
	var $it0 = new NativeArrayIterator(pages);
	while( $it0.hasNext() ) {
		var page = $it0.next();
		Global.doc.setCurrentPage(page);
		var pagename = Global.doc.currentPage().name();
		var artBoards = page.artboards();
		var $it1 = new NativeArrayIterator(artBoards);
		while( $it1.hasNext() ) {
			var art = $it1.next();
			var path1 = path + "/" + pagename + art.name() + "." + format;
			Global.doc.saveArtboardOrSlice_toFile(art,path1);
		}
	}
};
bs.BomberCommands.export_item = function(item,format,path) {
};
bs.BomberCommands.export_item_to_desktop = function(item,format) {
};
bs.BomberCommands.open_finder_in = function(path) {
	try {
		
    var open_finder =[[NSTask alloc] init];

    var open_finder_args = [NSArray arrayWithObjects:".", nil];

    [open_finder setCurrentDirectoryPath:path];
    [open_finder setLaunchPath:"/usr/bin/open"];
    [open_finder setArguments:open_finder_args];
    [open_finder launch]
    [open_finder release];
	} catch( msg ) {
		log("error" + Std.string(msg));
	}
};
bs.BomberCommands.reveal_finder_in = function(path) {
	
     var open_finder = [[NSTask alloc] init];
     var open_finder_args = [NSArray arrayWithObjects:"-R", path, nil];

     [open_finder setLaunchPath:"/usr/bin/open"];
     [open_finder setArguments:open_finder_args];
     [open_finder launch]
     [open_finder release];
};
var de = {};
de.polygonal = {};
de.polygonal.ds = {};
de.polygonal.ds.ArrayUtil = function() { };
$hxClasses["de.polygonal.ds.ArrayUtil"] = de.polygonal.ds.ArrayUtil;
de.polygonal.ds.ArrayUtil.__name__ = ["de","polygonal","ds","ArrayUtil"];
de.polygonal.ds.ArrayUtil.alloc = function(x) {
	var a;
	a = new Array(x);
	return a;
};
de.polygonal.ds.ArrayUtil.shrink = function(a,x) {
	if(a.length > x) a.length = x;
	return a;
};
de.polygonal.ds.ArrayUtil.copy = function(src,dst,min,max) {
	if(max == null) max = -1;
	if(min == null) min = 0;
	if(max == -1) max = src.length;
	var j = 0;
	var _g = min;
	while(_g < max) {
		var i = _g++;
		dst[j++] = src[i];
	}
	return dst;
};
de.polygonal.ds.ArrayUtil.fill = function(dst,x,k) {
	if(k == null) k = -1;
	if(k == -1) k = dst.length;
	var _g = 0;
	while(_g < k) {
		var i = _g++;
		dst[i] = x;
	}
};
de.polygonal.ds.ArrayUtil.assign = function(dst,C,args,k) {
	if(k == null) k = -1;
	if(k == -1) k = dst.length;
	if(args == null) args = [];
	var _g = 0;
	while(_g < k) {
		var i = _g++;
		dst[i] = Type.createInstance(C,args);
	}
};
de.polygonal.ds.ArrayUtil.memmove = function(a,destination,source,n) {
	if(source == destination) return; else if(source <= destination) {
		var i = source + n;
		var j = destination + n;
		var _g = 0;
		while(_g < n) {
			var k = _g++;
			i--;
			j--;
			a[j] = a[i];
		}
	} else {
		var i1 = source;
		var j1 = destination;
		var _g1 = 0;
		while(_g1 < n) {
			var k1 = _g1++;
			a[j1] = a[i1];
			i1++;
			j1++;
		}
	}
};
de.polygonal.ds.ArrayUtil.bsearchComparator = function(a,x,min,max,comparator) {
	var l = min;
	var m;
	var h = max + 1;
	while(l < h) {
		m = l + (h - l >> 1);
		if(comparator(a[m],x) < 0) l = m + 1; else h = m;
	}
	if(l <= max && comparator(a[l],x) == 0) return l; else return ~l;
};
de.polygonal.ds.ArrayUtil.bsearchInt = function(a,x,min,max) {
	var l = min;
	var m;
	var h = max + 1;
	while(l < h) {
		m = l + (h - l >> 1);
		if(a[m] < x) l = m + 1; else h = m;
	}
	if(l <= max && a[l] == x) return l; else return ~l;
};
de.polygonal.ds.ArrayUtil.bsearchFloat = function(a,x,min,max) {
	var l = min;
	var m;
	var h = max + 1;
	while(l < h) {
		m = l + (h - l >> 1);
		if(a[m] < x) l = m + 1; else h = m;
	}
	if(l <= max && a[l] == x) return l; else return ~l;
};
de.polygonal.ds.ArrayUtil.shuffle = function(a,rval) {
	var s = a.length;
	if(rval == null) {
		var m = Math;
		while(--s > 1) {
			var i = Std["int"](m.random() * s);
			var t = a[s];
			a[s] = a[i];
			a[i] = t;
		}
	} else {
		var j = 0;
		while(--s > 1) {
			var i1 = Std["int"](rval[j++] * s);
			var t1 = a[s];
			a[s] = a[i1];
			a[i1] = t1;
		}
	}
};
de.polygonal.ds.ArrayUtil.sortRange = function(a,compare,useInsertionSort,first,count) {
	var k = a.length;
	if(k > 1) {
		if(useInsertionSort) de.polygonal.ds.ArrayUtil._insertionSort(a,first,count,compare); else de.polygonal.ds.ArrayUtil._quickSort(a,first,count,compare);
	}
};
de.polygonal.ds.ArrayUtil.quickPerm = function(n) {
	var results = [];
	var a = [];
	var p = [];
	var i;
	var j;
	var tmp;
	var _g = 0;
	while(_g < n) {
		var i1 = _g++;
		a[i1] = i1 + 1;
		p[i1] = 0;
	}
	results.push(a.slice());
	i = 1;
	while(i < n) if(p[i] < i) {
		j = i % 2 * p[i];
		tmp = a[j];
		a[j] = a[i];
		a[i] = tmp;
		results.push(a.slice());
		p[i]++;
		i = 1;
	} else {
		p[i] = 0;
		i++;
	}
	return results;
};
de.polygonal.ds.ArrayUtil.equals = function(a,b) {
	if(a.length != b.length) return false;
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(a[i] != b[i]) return false;
	}
	return true;
};
de.polygonal.ds.ArrayUtil.split = function(a,n,k) {
	var output = new Array();
	var b = null;
	var _g = 0;
	while(_g < n) {
		var i = _g++;
		if(i % k == 0) output[i / k | 0] = b = [];
		b.push(a[i]);
	}
	return output;
};
de.polygonal.ds.ArrayUtil._insertionSort = function(a,first,k,cmp) {
	var _g1 = first + 1;
	var _g = first + k;
	while(_g1 < _g) {
		var i = _g1++;
		var x = a[i];
		var j = i;
		while(j > first) {
			var y = a[j - 1];
			if(cmp(y,x) > 0) {
				a[j] = y;
				j--;
			} else break;
		}
		a[j] = x;
	}
};
de.polygonal.ds.ArrayUtil._quickSort = function(a,first,k,cmp) {
	var last = first + k - 1;
	var lo = first;
	var hi = last;
	if(k > 1) {
		var i0 = first;
		var i1 = i0 + (k >> 1);
		var i2 = i0 + k - 1;
		var t0 = a[i0];
		var t1 = a[i1];
		var t2 = a[i2];
		var mid;
		var t = cmp(t0,t2);
		if(t < 0 && cmp(t0,t1) < 0) if(cmp(t1,t2) < 0) mid = i1; else mid = i2; else if(cmp(t1,t0) < 0 && cmp(t1,t2) < 0) if(t < 0) mid = i0; else mid = i2; else if(cmp(t2,t0) < 0) mid = i1; else mid = i0;
		var pivot = a[mid];
		a[mid] = a[first];
		while(lo < hi) {
			while(cmp(pivot,a[hi]) < 0 && lo < hi) hi--;
			if(hi != lo) {
				a[lo] = a[hi];
				lo++;
			}
			while(cmp(pivot,a[lo]) > 0 && lo < hi) lo++;
			if(hi != lo) {
				a[hi] = a[lo];
				hi--;
			}
		}
		a[lo] = pivot;
		de.polygonal.ds.ArrayUtil._quickSort(a,first,lo - first,cmp);
		de.polygonal.ds.ArrayUtil._quickSort(a,lo + 1,last - lo,cmp);
	}
};
de.polygonal.ds.Cloneable = function() { };
$hxClasses["de.polygonal.ds.Cloneable"] = de.polygonal.ds.Cloneable;
de.polygonal.ds.Cloneable.__name__ = ["de","polygonal","ds","Cloneable"];
de.polygonal.ds.Cloneable.prototype = {
	clone: null
	,__class__: de.polygonal.ds.Cloneable
};
de.polygonal.ds.Hashable = function() { };
$hxClasses["de.polygonal.ds.Hashable"] = de.polygonal.ds.Hashable;
de.polygonal.ds.Hashable.__name__ = ["de","polygonal","ds","Hashable"];
de.polygonal.ds.Hashable.prototype = {
	key: null
	,__class__: de.polygonal.ds.Hashable
};
de.polygonal.ds.Collection = function() { };
$hxClasses["de.polygonal.ds.Collection"] = de.polygonal.ds.Collection;
de.polygonal.ds.Collection.__name__ = ["de","polygonal","ds","Collection"];
de.polygonal.ds.Collection.__interfaces__ = [de.polygonal.ds.Hashable];
de.polygonal.ds.Collection.prototype = {
	free: null
	,contains: null
	,remove: null
	,clear: null
	,iterator: null
	,isEmpty: null
	,size: null
	,toArray: null
	,clone: null
	,__class__: de.polygonal.ds.Collection
};
de.polygonal.ds.Comparable = function() { };
$hxClasses["de.polygonal.ds.Comparable"] = de.polygonal.ds.Comparable;
de.polygonal.ds.Comparable.__name__ = ["de","polygonal","ds","Comparable"];
de.polygonal.ds.Comparable.prototype = {
	compare: null
	,__class__: de.polygonal.ds.Comparable
};
de.polygonal.ds.HashKey = function() { };
$hxClasses["de.polygonal.ds.HashKey"] = de.polygonal.ds.HashKey;
de.polygonal.ds.HashKey.__name__ = ["de","polygonal","ds","HashKey"];
de.polygonal.ds.HashKey.next = function() {
	return de.polygonal.ds.HashKey._counter++;
};
de.polygonal.ds.Itr = function() { };
$hxClasses["de.polygonal.ds.Itr"] = de.polygonal.ds.Itr;
de.polygonal.ds.Itr.__name__ = ["de","polygonal","ds","Itr"];
de.polygonal.ds.Itr.prototype = {
	hasNext: null
	,next: null
	,remove: null
	,reset: null
	,__class__: de.polygonal.ds.Itr
};
de.polygonal.ds.TreeBuilder = function(node) {
	this._node = node;
	if(this._node != null) {
		this._child = this._node.children;
		true;
	} else false;
};
$hxClasses["de.polygonal.ds.TreeBuilder"] = de.polygonal.ds.TreeBuilder;
de.polygonal.ds.TreeBuilder.__name__ = ["de","polygonal","ds","TreeBuilder"];
de.polygonal.ds.TreeBuilder.prototype = {
	_node: null
	,_child: null
	,free: function() {
		this._node = this._child = null;
	}
	,getVal: function() {
		return this._node.val;
	}
	,setVal: function(x) {
		this._node.val = x;
	}
	,getNode: function() {
		return this._node;
	}
	,getChildNode: function() {
		return this._child;
	}
	,getChildVal: function() {
		return this._child.val;
	}
	,valid: function() {
		return this._node != null;
	}
	,root: function() {
		while(this._node.parent != null) this._node = this._node.parent;
		if(this._node != null) this._child = this._node.children;
	}
	,up: function() {
		if(this._node.parent != null) {
			this._node = this._node.parent;
			if(this._node != null) this._child = this._node.children;
			return true;
		} else return false;
	}
	,down: function() {
		if(this._child != null) {
			this._node = this._child;
			if(this._node != null) this._child = this._node.children;
			return true;
		} else return false;
	}
	,hasNextChild: function() {
		return this._child != null && this._child.next != null;
	}
	,hasPrevChild: function() {
		return this._child != null && this._child.prev != null;
	}
	,nextChild: function() {
		if(this._child != null && this._child.next != null) {
			this._child = this._child.next;
			return true;
		} else return false;
	}
	,prevChild: function() {
		if(this._child != null && this._child.prev != null) {
			this._child = this._child.prev;
			return true;
		} else return false;
	}
	,childStart: function() {
		if(this._node != null) {
			this._child = this._node.children;
			return true;
		} else return false;
	}
	,childEnd: function() {
		if(this._child != null) {
			this._child = this._node._tail;
			return true;
		} else return false;
	}
	,childValid: function() {
		return this._child != null;
	}
	,appendChild: function(x) {
		this._child = this._createChildNode(x,true);
		return this._child;
	}
	,prependChild: function(x) {
		var childNode = this._createChildNode(x,false);
		if(this._child != null) {
			childNode.next = this._node.children;
			this._node.children.prev = childNode;
			this._node.children = childNode;
		} else this._node.children = childNode;
		this._child = childNode;
		return childNode;
	}
	,insertBeforeChild: function(x) {
		if(this._child != null) {
			var childNode = this._createChildNode(x,false);
			childNode.next = this._child;
			childNode.prev = this._child.prev;
			if(this._child.prev != null) this._child.prev.next = childNode;
			this._child.prev = childNode;
			this._child = childNode;
			return childNode;
		} else {
			this._child = this._createChildNode(x,true);
			return this._child;
		}
	}
	,insertAfterChild: function(x) {
		if(this._child != null) {
			var childNode = this._createChildNode(x,false);
			childNode.prev = this._child;
			childNode.next = this._child.next;
			if(this._child.next != null) this._child.next.prev = childNode;
			this._child.next = childNode;
			this._child = childNode;
			return childNode;
		} else {
			this._child = this._createChildNode(x,true);
			return this._child;
		}
	}
	,removeChild: function() {
		if(this._node != null && this._child != null) {
			this._child.parent = null;
			var node = this._child;
			this._child = node.next;
			if(this._node.children == node) this._node.children = this._child;
			if(node.prev != null) node.prev.next = node.next;
			if(node.next != null) node.next.prev = node.prev;
			node.parent = node.next = node.prev = null;
			return true;
		} else return false;
	}
	,toString: function() {
		return "{ TreeBuilder V: " + Std.string(this._node != null?this._node.val:null) + ", H: " + Std.string(this._child != null?this._child.val:null) + " }";
	}
	,_reset: function() {
		if(this._node != null) this._child = this._node.children;
	}
	,_createChildNode: function(x,append) {
		if(append) return new de.polygonal.ds.TreeNode(x,this._node); else {
			var node = new de.polygonal.ds.TreeNode(x);
			node.parent = this._node;
			return node;
		}
	}
	,_getTail: function(node) {
		var tail = node;
		while(tail.next != null) tail.next;
		return tail;
	}
	,__class__: de.polygonal.ds.TreeBuilder
};
de.polygonal.ds.TreeNode = function(x,parent) {
	this.val = x;
	this.parent = parent;
	this.children = null;
	this.prev = null;
	this.next = null;
	this._tail = null;
	this._nextInStack = null;
	this._prevInStack = null;
	if(this.parent != null) {
		parent._extraInfo = parent._extraInfo & 65535 | (parent._extraInfo >>> 16) + 1 << 16;
		if(parent.children != null) {
			var tail = parent._tail;
			tail.next = this;
			this.prev = tail;
			this.next = null;
		} else parent.children = this;
		parent._tail = this;
	}
	this._extraInfo = 0;
	this.key = de.polygonal.ds.HashKey._counter++;
};
$hxClasses["de.polygonal.ds.TreeNode"] = de.polygonal.ds.TreeNode;
de.polygonal.ds.TreeNode.__name__ = ["de","polygonal","ds","TreeNode"];
de.polygonal.ds.TreeNode.__interfaces__ = [de.polygonal.ds.Collection];
de.polygonal.ds.TreeNode.prototype = {
	key: null
	,val: null
	,parent: null
	,children: null
	,prev: null
	,next: null
	,_tail: null
	,_nextInStack: null
	,_prevInStack: null
	,_extraInfo: null
	,isRoot: function() {
		return this.parent == null;
	}
	,isLeaf: function() {
		return this.children == null;
	}
	,isChild: function() {
		return this.parent != null;
	}
	,isAncestor: function(x) {
		var n = x.parent;
		while(n != null) {
			if(this == n) return true;
			n = n.parent;
		}
		return false;
	}
	,isDescendant: function(x) {
		var n = this.parent;
		while(n != null) {
			if(n == x) return true;
			n = n.parent;
		}
		return false;
	}
	,hasParent: function() {
		return this.parent != null;
	}
	,hasChildren: function() {
		return this.children != null;
	}
	,hasSiblings: function() {
		if(this.parent != null) return this.prev != null || this.next != null; else return false;
	}
	,hasNextSibling: function() {
		return this.next != null;
	}
	,hasPrevSibling: function() {
		return this.prev != null;
	}
	,getFirstSibling: function() {
		if(this.parent != null) return this.parent.children; else return null;
	}
	,getLastSibling: function() {
		if(this.parent != null) return this.parent._tail; else return null;
	}
	,getSiblingIndex: function() {
		var c = 0;
		var node = this.prev;
		while(node != null) {
			c++;
			node = node.prev;
		}
		return c;
	}
	,swapChildren: function(a,b) {
		var tmp = a.val;
		a.val = b.val;
		b.val = tmp;
		return this;
	}
	,swapChildrenAt: function(i,j) {
		var t = null;
		var c = 0;
		var n = this.children;
		while(n != null) {
			if(i == c) {
				if(t != null) {
					this.swapChildren(n,t);
					return this;
				}
				t = n;
			} else if(j == c) {
				if(t != null) {
					this.swapChildren(n,t);
					return this;
				}
				t = n;
			}
			c++;
			n = n.next;
		}
		return this;
	}
	,removeChildAt: function(i) {
		var j = 0;
		var n = this.children;
		while(j < i) {
			n = n.next;
			j++;
		}
		n.unlink();
		return n;
	}
	,removeChildren: function(i,n) {
		if(n == null) n = -1;
		if(i == null) i = 0;
		if(n == -1) n = (this._extraInfo >>> 16) - i;
		if(n == 0) return this;
		var j = 0;
		var c = this.children;
		while(j < i) {
			c = c.next;
			j++;
		}
		j = 0;
		while(j < n) {
			var next = c.next;
			c.unlink();
			c = next;
			j++;
		}
		return this;
	}
	,setChildIndex: function(x,i) {
		var n = null;
		var k = -1;
		var j = 0;
		var c = this.children;
		while(c != null) {
			if(i == j) {
				n = c;
				if(k != -1) {
					if(k < i) this.insertAfterChild(n,x); else if(k > i) this.insertBeforeChild(n,x);
					return this;
				}
			}
			if(x == c) {
				k = j;
				if(n != null) {
					if(k < i) this.insertAfterChild(n,x); else if(k > i) this.insertBeforeChild(n,x);
					return this;
				}
			}
			j++;
			c = c.next;
		}
		return this;
	}
	,numChildren: function() {
		return this._extraInfo >>> 16;
	}
	,numSiblings: function() {
		if(this.parent != null) return (this.parent._extraInfo >>> 16) - 1; else return 0;
	}
	,numPrevSiblings: function() {
		var c = 0;
		var node = this.prev;
		while(node != null) {
			c++;
			node = node.prev;
		}
		return c;
	}
	,numNextSiblings: function() {
		var c = 0;
		var node = this.next;
		while(node != null) {
			c++;
			node = node.next;
		}
		return c;
	}
	,depth: function() {
		if(this.parent == null) return 0; else {
			var node = this;
			var c = 0;
			while(node.parent != null) {
				c++;
				node = node.parent;
			}
			return c;
		}
	}
	,height: function() {
		var h = 0;
		var node = this.children;
		while(node != null) {
			var y = node.height();
			if(h > y) h = h; else h = y;
			node = node.next;
		}
		return 1 + h;
	}
	,getRoot: function() {
		var n = this;
		while(n.parent != null) n = n.parent;
		return n;
	}
	,getFirstChild: function() {
		return this.children;
	}
	,getLastChild: function() {
		return this._tail;
	}
	,getChildAt: function(i) {
		if(this.children != null) {
			var child = this.children;
			var _g = 0;
			while(_g < i) {
				var j = _g++;
				child = child.next;
			}
			return child;
		} else return null;
	}
	,getChildIndex: function() {
		var i = 0;
		var n = this;
		while(n.prev != null) {
			i++;
			n = n.prev;
		}
		return i;
	}
	,unlink: function() {
		if(this.parent != null) {
			if(this.parent.children == this) this.parent.children = this.next;
			if(this.parent._tail == this) this.parent._tail = this.prev;
			this.parent._decChildCount();
			this.parent = null;
		}
		if(this.prev != null) this.prev.next = this.next;
		if(this.next != null) this.next.prev = this.prev;
		this.next = this.prev = null;
		this._nextInStack = null;
		this._prevInStack = null;
		return this;
	}
	,appendNode: function(x) {
		x.unlink();
		x.parent = this;
		this._extraInfo = this._extraInfo & 65535 | (this._extraInfo >>> 16) + 1 << 16;
		if(this.children != null) {
			this._tail.next = x;
			x.prev = this._tail;
			x.next = null;
			this._tail = x;
		} else {
			this._tail = x;
			this.children = x;
		}
		return this;
	}
	,prependNode: function(x) {
		x.unlink();
		x.parent = this;
		this._extraInfo = this._extraInfo & 65535 | (this._extraInfo >>> 16) + 1 << 16;
		if(this.children != null) {
			var head = this.children;
			x.next = head;
			head.prev = x;
			x.prev = null;
		} else this._tail = x;
		this.children = x;
		return this;
	}
	,insertAfterChild: function(child,x) {
		x.unlink();
		x.parent = this;
		this._extraInfo = this._extraInfo & 65535 | (this._extraInfo >>> 16) + 1 << 16;
		if(this.children == null) {
			this.children = x;
			return this;
		}
		if(child.next != null) {
			child.next.prev = x;
			x.next = child.next;
		}
		child.next = x;
		x.prev = child;
		if(child == this._tail) this._tail = x;
		return this;
	}
	,insertBeforeChild: function(child,x) {
		x.unlink();
		x.parent = this;
		this._extraInfo = this._extraInfo & 65535 | (this._extraInfo >>> 16) + 1 << 16;
		if(this.children == null) {
			this.children = x;
			return this;
		}
		if(child == this.children) this.children = x;
		if(child.prev != null) {
			child.prev.next = x;
			x.prev = child.prev;
		}
		x.next = child;
		child.prev = x;
		return this;
	}
	,insertChildAt: function(x,i) {
		if(i == 0) this.prependNode(x); else if(i == this._extraInfo >>> 16) this.appendNode(x); else this.insertBeforeChild(this.getChildAt(i),x);
		return this;
	}
	,setFirst: function() {
		if(this.parent != null?this.prev != null || this.next != null:false) {
			var p = this.parent;
			this.unlink();
			p.prependNode(this);
		}
		return this;
	}
	,setLast: function() {
		if(this.parent != null?this.prev != null || this.next != null:false) {
			var p = this.parent;
			this.unlink();
			p.appendNode(this);
		}
		return this;
	}
	,find: function(x) {
		var top = this;
		while(top != null) {
			var node = top;
			top = this.popOffStack(top);
			if(node.val == x) return node;
			var n = node.children;
			if(n != null) {
				var c = node._tail;
				while(c != null) {
					if(top != null) {
						top._nextInStack = c;
						c._prevInStack = top;
					}
					top = c;
					c = c.prev;
				}
			}
		}
		return null;
	}
	,preorder: function(process,preflight,iterative,userData) {
		if(iterative == null) iterative = false;
		if(preflight == null) preflight = false;
		if(this.parent == null && this.children == null) {
			if(process == null) {
				var v;
				v = js.Boot.__cast(this.val , de.polygonal.ds.Visitable);
				if(preflight) {
					if(v.visit(true,userData)) v.visit(false,userData);
				} else v.visit(false,userData);
			} else if(preflight) {
				if(process(this,true,userData)) process(this,false,userData);
			} else process(this,false,userData);
			return this;
		}
		if(iterative == false) {
			if(process == null) {
				if(preflight) {
					var v1;
					v1 = js.Boot.__cast(this.val , de.polygonal.ds.Visitable);
					if(v1.visit(true,userData)) {
						if(v1.visit(false,userData)) {
							var child = this.children;
							var hook;
							while(child != null) {
								hook = child.next;
								if(!this._preOrderInternalVisitablePreflight(child,userData)) return this;
								child = hook;
							}
						}
					}
				} else {
					var v2;
					v2 = js.Boot.__cast(this.val , de.polygonal.ds.Visitable);
					if(v2.visit(false,userData)) {
						var child1 = this.children;
						var hook1;
						while(child1 != null) {
							hook1 = child1.next;
							if(!this._preOrderInternalVisitable(child1,userData)) return this;
							child1 = hook1;
						}
					}
				}
			} else if(preflight) {
				if(process(this,true,userData)) {
					if(process(this,false,userData)) {
						var child2 = this.children;
						var hook2;
						while(child2 != null) {
							hook2 = child2.next;
							if(!this._preOrderInternalPreflight(child2,process,userData)) return this;
							child2 = hook2;
						}
					}
				}
			} else if(process(this,false,userData)) {
				var child3 = this.children;
				var hook3;
				while(child3 != null) {
					hook3 = child3.next;
					if(!this._preOrderInternal(child3,process,userData)) return this;
					child3 = hook3;
				}
			}
		} else {
			var top = this;
			if(process == null) {
				if(preflight) while(top != null) {
					var node = top;
					top = this.popOffStack(top);
					var v3;
					v3 = js.Boot.__cast(node.val , de.polygonal.ds.Visitable);
					if(!v3.visit(true,userData)) continue;
					if(!v3.visit(false,userData)) return this;
					var n = node.children;
					if(n != null) {
						var c = node._tail;
						while(c != null) {
							if(top != null) {
								top._nextInStack = c;
								c._prevInStack = top;
							}
							top = c;
							c = c.prev;
						}
					}
				} else while(top != null) {
					var node1 = top;
					top = this.popOffStack(top);
					var v4;
					v4 = js.Boot.__cast(node1.val , de.polygonal.ds.Visitable);
					if(!v4.visit(false,userData)) return this;
					var n1 = node1.children;
					if(n1 != null) {
						var c1 = node1._tail;
						while(c1 != null) {
							if(top != null) {
								top._nextInStack = c1;
								c1._prevInStack = top;
							}
							top = c1;
							c1 = c1.prev;
						}
					}
				}
			} else if(preflight) while(top != null) {
				var node2 = top;
				top = this.popOffStack(top);
				if(!process(node2,true,userData)) continue;
				if(!process(node2,false,userData)) return this;
				var n2 = node2.children;
				if(n2 != null) {
					var c2 = node2._tail;
					while(c2 != null) {
						if(top != null) {
							top._nextInStack = c2;
							c2._prevInStack = top;
						}
						top = c2;
						c2 = c2.prev;
					}
				}
			} else while(top != null) {
				var node3 = top;
				top = this.popOffStack(top);
				if(!process(node3,false,userData)) return this;
				var n3 = node3.children;
				if(n3 != null) {
					var c3 = node3._tail;
					while(c3 != null) {
						if(top != null) {
							top._nextInStack = c3;
							c3._prevInStack = top;
						}
						top = c3;
						c3 = c3.prev;
					}
				}
			}
		}
		return this;
	}
	,postorder: function(process,iterative,userData) {
		if(iterative == null) iterative = false;
		if(this.parent == null && this.children == null) {
			if(process == null) (js.Boot.__cast(this.val , de.polygonal.ds.Visitable)).visit(false,userData); else process(this,userData);
			return this;
		}
		if(iterative == false) {
			if(process == null) {
				var child = this.children;
				var hook;
				while(child != null) {
					hook = child.next;
					if(!this._postOrderInternalVisitable(child,userData)) return this;
					child = hook;
				}
				(js.Boot.__cast(this.val , de.polygonal.ds.Visitable)).visit(false,userData);
			} else {
				var child1 = this.children;
				var hook1;
				while(child1 != null) {
					hook1 = child1.next;
					if(!this._postOrderInternal(child1,process,userData)) return this;
					child1 = hook1;
				}
				process(this,userData);
			}
		} else {
			var time = (this._extraInfo & 65535) + 1;
			var top = this;
			if(process == null) while(top != null) {
				var node = top;
				if(node.children != null) {
					var found = false;
					var c = node._tail;
					while(c != null) {
						if((c._extraInfo & 65535) < time) {
							c._extraInfo = c._extraInfo & -65536 | (c._extraInfo & 65535) + 1;
							if(top != null) {
								top._nextInStack = c;
								c._prevInStack = top;
							}
							top = c;
							found = true;
						}
						c = c.prev;
					}
					if(!found) {
						var v;
						v = js.Boot.__cast(node.val , de.polygonal.ds.Visitable);
						if(!v.visit(false,userData)) return this;
						top = this.popOffStack(top);
					}
				} else {
					var v1;
					v1 = js.Boot.__cast(node.val , de.polygonal.ds.Visitable);
					if(!v1.visit(false,userData)) return this;
					node._extraInfo = node._extraInfo & -65536 | (node._extraInfo & 65535) + 1;
					top = this.popOffStack(top);
				}
			} else while(top != null) {
				var node1 = top;
				if(node1.children != null) {
					var found1 = false;
					var c1 = node1._tail;
					while(c1 != null) {
						if((c1._extraInfo & 65535) < time) {
							c1._extraInfo = c1._extraInfo & -65536 | (c1._extraInfo & 65535) + 1;
							if(top != null) {
								top._nextInStack = c1;
								c1._prevInStack = top;
							}
							top = c1;
							found1 = true;
						}
						c1 = c1.prev;
					}
					if(!found1) {
						if(!process(node1,userData)) return this;
						top = this.popOffStack(top);
					}
				} else {
					if(!process(node1,userData)) return this;
					node1._extraInfo = node1._extraInfo & -65536 | (node1._extraInfo & 65535) + 1;
					top = this.popOffStack(top);
				}
			}
		}
		return this;
	}
	,levelorder: function(process,userData) {
		if(this.children == null) {
			if(process == null) (js.Boot.__cast(this.val , de.polygonal.ds.Visitable)).visit(false,userData); else process(this,userData);
			return this;
		}
		var i = 0;
		var s = 1;
		var child;
		var nodeHead = this;
		var nodeTail = this;
		nodeHead._nextInStack = null;
		if(process == null) while(i < s) {
			i++;
			if(!(js.Boot.__cast(nodeHead.val , de.polygonal.ds.Visitable)).visit(false,userData)) return this;
			child = nodeHead.children;
			while(child != null) {
				s++;
				if(nodeTail != null) nodeTail = nodeTail._nextInStack = child; else nodeTail = child;
				child = child.next;
			}
			nodeHead = nodeHead._nextInStack;
		} else while(i < s) {
			i++;
			if(!process(nodeHead,userData)) return this;
			child = nodeHead.children;
			while(child != null) {
				s++;
				if(nodeTail != null) nodeTail = nodeTail._nextInStack = child; else nodeTail = child;
				child = child.next;
			}
			nodeHead = nodeHead._nextInStack;
		}
		return this;
	}
	,sort: function(compare,useInsertionSort) {
		if(useInsertionSort == null) useInsertionSort = false;
		if(this.children != null) {
			if(compare == null) if(useInsertionSort) this.children = this._insertionSortComparable(this.children); else this.children = this._mergeSortComparable(this.children); else if(useInsertionSort) this.children = this._insertionSort(this.children,compare); else this.children = this._mergeSort(this.children,compare);
		}
		return this;
	}
	,toString: function() {
		if(this.children == null) return "{ TreeNode " + this._print() + " }";
		var s = "";
		this.preorder(function(node,preflight,userData) {
			var d = node.depth();
			var _g = 0;
			while(_g < d) {
				var i = _g++;
				if(i == d - 1) s += "+--- "; else s += "|    ";
			}
			s += "{ " + node._print() + " }\n";
			return true;
		});
		return s;
	}
	,getBuilder: function() {
		return new de.polygonal.ds.TreeBuilder(this);
	}
	,childIterator: function() {
		return new de.polygonal.ds.ChildTreeIterator(this);
	}
	,_print: function() {
		var flags = "";
		if(this.parent == null) flags += ", root";
		if(this.children == null) flags += ", leaf";
		if(this.parent != null) flags += ", child";
		return "val: " + Std.string(this.val) + ", children: " + (this._extraInfo >>> 16) + ", depth: " + this.depth() + flags;
	}
	,_preOrderInternal: function(node,process,userData) {
		if(process(node,false,userData)) {
			if(node.children != null) {
				var walker = node.children;
				while(walker != null) {
					if(!this._preOrderInternal(walker,process,userData)) return false;
					walker = walker.next;
				}
			}
			return true;
		}
		return false;
	}
	,_preOrderInternalPreflight: function(node,process,userData) {
		if(process(node,true,userData)) {
			if(process(node,false,userData)) {
				if(node.children != null) {
					var walker = node.children;
					while(walker != null) {
						if(!this._preOrderInternalPreflight(walker,process,userData)) return false;
						walker = walker.next;
					}
				}
				return true;
			}
		}
		return false;
	}
	,_preOrderInternalVisitable: function(node,userData) {
		var v;
		v = js.Boot.__cast(node.val , de.polygonal.ds.Visitable);
		if(v.visit(false,userData)) {
			if(node.children != null) {
				var walker = node.children;
				var hook;
				while(walker != null) {
					hook = walker.next;
					if(!this._preOrderInternalVisitable(walker,userData)) return false;
					walker = hook;
				}
			}
			return true;
		}
		return false;
	}
	,_preOrderInternalVisitablePreflight: function(node,userData) {
		var v;
		v = js.Boot.__cast(node.val , de.polygonal.ds.Visitable);
		if(v.visit(true,userData)) {
			if(v.visit(false,userData)) {
				if(node.children != null) {
					var walker = node.children;
					var hook;
					while(walker != null) {
						hook = walker.next;
						if(!this._preOrderInternalVisitablePreflight(walker,userData)) return false;
						walker = hook;
					}
				}
				return true;
			}
		}
		return false;
	}
	,_postOrderInternal: function(node,process,userData) {
		if(node.children != null) {
			var walker = node.children;
			var hook;
			while(walker != null) {
				hook = walker.next;
				if(!this._postOrderInternal(walker,process,userData)) return false;
				walker = hook;
			}
		}
		return process(node,userData);
	}
	,_postOrderInternalVisitable: function(node,userData) {
		if(node.children != null) {
			var walker = node.children;
			var hook;
			while(walker != null) {
				hook = walker.next;
				if(!this._postOrderInternalVisitable(walker,userData)) return false;
				walker = hook;
			}
		}
		return (js.Boot.__cast(node.val , de.polygonal.ds.Visitable)).visit(false,userData);
	}
	,_insertionSortComparable: function(node) {
		var h = node;
		var n = h.next;
		while(n != null) {
			var m = n.next;
			var p = n.prev;
			var v = n.val;
			if((js.Boot.__cast(p.val , de.polygonal.ds.Comparable)).compare(v) < 0) {
				var i = p;
				while(i.prev != null) if((js.Boot.__cast(i.prev.val , de.polygonal.ds.Comparable)).compare(v) < 0) i = i.prev; else break;
				if(m != null) {
					p.next = m;
					m.prev = p;
				} else {
					p.next = null;
					this._tail = p;
				}
				if(i == h) {
					n.prev = null;
					n.next = i;
					i.prev = n;
					h = n;
				} else {
					n.prev = i.prev;
					i.prev.next = n;
					n.next = i;
					i.prev = n;
				}
			}
			n = m;
		}
		return h;
	}
	,_insertionSort: function(node,cmp) {
		var h = node;
		var n = h.next;
		while(n != null) {
			var m = n.next;
			var p = n.prev;
			var v = n.val;
			if(cmp(v,p.val) < 0) {
				var i = p;
				while(i.prev != null) if(cmp(v,i.prev.val) < 0) i = i.prev; else break;
				if(m != null) {
					p.next = m;
					m.prev = p;
				} else {
					p.next = null;
					this._tail = p;
				}
				if(i == h) {
					n.prev = null;
					n.next = i;
					i.prev = n;
					h = n;
				} else {
					n.prev = i.prev;
					i.prev.next = n;
					n.next = i;
					i.prev = n;
				}
			}
			n = m;
		}
		return h;
	}
	,_mergeSortComparable: function(node) {
		var h = node;
		var p;
		var q;
		var e;
		var tail = null;
		var insize = 1;
		var nmerges;
		var psize;
		var qsize;
		var i;
		while(true) {
			p = h;
			h = tail = null;
			nmerges = 0;
			while(p != null) {
				nmerges++;
				psize = 0;
				q = p;
				var _g = 0;
				while(_g < insize) {
					var i1 = _g++;
					psize++;
					q = q.next;
					if(q == null) break;
				}
				qsize = insize;
				while(psize > 0 || qsize > 0 && q != null) {
					if(psize == 0) {
						e = q;
						q = q.next;
						qsize--;
					} else if(qsize == 0 || q == null) {
						e = p;
						p = p.next;
						psize--;
					} else if((js.Boot.__cast(p.val , de.polygonal.ds.Comparable)).compare(q.val) >= 0) {
						e = p;
						p = p.next;
						psize--;
					} else {
						e = q;
						q = q.next;
						qsize--;
					}
					if(tail != null) tail.next = e; else h = e;
					e.prev = tail;
					tail = e;
				}
				p = q;
			}
			tail.next = null;
			if(nmerges <= 1) break;
			insize <<= 1;
		}
		h.prev = null;
		this._tail = tail;
		return h;
	}
	,_mergeSort: function(node,cmp) {
		var h = node;
		var p;
		var q;
		var e;
		var tail = null;
		var insize = 1;
		var nmerges;
		var psize;
		var qsize;
		var i;
		while(true) {
			p = h;
			h = tail = null;
			nmerges = 0;
			while(p != null) {
				nmerges++;
				psize = 0;
				q = p;
				var _g = 0;
				while(_g < insize) {
					var i1 = _g++;
					psize++;
					q = q.next;
					if(q == null) break;
				}
				qsize = insize;
				while(psize > 0 || qsize > 0 && q != null) {
					if(psize == 0) {
						e = q;
						q = q.next;
						qsize--;
					} else if(qsize == 0 || q == null) {
						e = p;
						p = p.next;
						psize--;
					} else if(cmp(q.val,p.val) >= 0) {
						e = p;
						p = p.next;
						psize--;
					} else {
						e = q;
						q = q.next;
						qsize--;
					}
					if(tail != null) tail.next = e; else h = e;
					e.prev = tail;
					tail = e;
				}
				p = q;
			}
			tail.next = null;
			if(nmerges <= 1) break;
			insize <<= 1;
		}
		h.prev = null;
		this._tail = tail;
		return h;
	}
	,_valid: function(node) {
		return node != null;
	}
	,_findHead: function(node) {
		if(node.parent != null) return node.parent.children; else {
			while(node.prev != null) node = node.prev;
			return node;
		}
	}
	,_findTail: function(node) {
		if(node.parent != null) return node.parent._tail; else {
			var t = node;
			while(t.next != null) t = t.next;
			return t;
		}
	}
	,serialize: function(node,list) {
		if(node == null) node = this;
		if(list == null) list = new Array();
		if(node.children != null) {
			list.push({ v : node.val, c : true});
			var c = node.children;
			while(c != null) {
				this.serialize(c,list);
				c = c.next;
			}
			list.push(null);
		} else list.push({ v : node.val, c : false});
		return list;
	}
	,unserialize: function(list) {
		var root = this;
		root.val = list[0].v;
		var parentStack = [root];
		var s = 1;
		var _g1 = 1;
		var _g = list.length;
		while(_g1 < _g) {
			var i = _g1++;
			var item = list[i];
			if(item != null) {
				var node = new de.polygonal.ds.TreeNode(item.v);
				parentStack[s - 1].appendNode(node);
				if(item.c) parentStack[s++] = node;
			} else s--;
		}
		return root;
	}
	,free: function() {
		if(this.children != null) {
			var n = this.children;
			while(n != null) {
				var next = n.next;
				n.free();
				n = next;
			}
		}
		this.val = null;
		this.prev = null;
		this.next = null;
		this.children = null;
		this.parent = null;
		this._tail = null;
		this._nextInStack = null;
		this._prevInStack = null;
	}
	,contains: function(x) {
		var top = this;
		while(top != null) {
			var node = top;
			top = this.popOffStack(top);
			if(node.val == x) return true;
			var n = node.children;
			if(n != null) {
				var c = node._tail;
				while(c != null) {
					if(top != null) {
						top._nextInStack = c;
						c._prevInStack = top;
					}
					top = c;
					c = c.prev;
				}
			}
		}
		return false;
	}
	,remove: function(x) {
		var found = false;
		if(this.val == x) {
			this.unlink();
			found = true;
		}
		var child = this.children;
		while(child != null) {
			var next = child.next;
			found = found || child.remove(x);
			child = next;
		}
		return found;
	}
	,clear: function(purge) {
		if(purge == null) purge = false;
		if(purge) {
			var node = this.children;
			while(node != null) {
				var hook = node.next;
				node.prev = null;
				node.next = null;
				node.clear(purge);
				node = hook;
			}
			this.val = null;
			this.parent = null;
			this.children = null;
			this._tail = null;
		} else this.children = null;
		this._extraInfo = this._extraInfo & 65535 | 0;
	}
	,iterator: function() {
		return new de.polygonal.ds.TreeIterator(this);
	}
	,size: function() {
		var c = 1;
		var node = this.children;
		while(node != null) {
			c += node.size();
			node = node.next;
		}
		return c;
	}
	,isEmpty: function() {
		return !(this.children != null);
	}
	,toArray: function() {
		var a = de.polygonal.ds.ArrayUtil.alloc(this.size());
		var i = 0;
		this.preorder(function(node,_,_1) {
			a[i++] = node.val;
			return true;
		});
		return a;
	}
	,clone: function(assign,copier) {
		if(assign == null) assign = true;
		var stack = new Array();
		var copy = new de.polygonal.ds.TreeNode(copier != null?copier(this.val):this.val);
		stack[0] = this;
		stack[1] = copy;
		var i = 2;
		while(i > 0) {
			var c = stack[--i];
			var n = stack[--i];
			c._extraInfo = c._extraInfo & 65535 | n._extraInfo >>> 16 << 16;
			if(n.children != null) {
				var nchild = n.children;
				var x;
				if(assign) x = nchild.val; else if(copier == null) x = (js.Boot.__cast(nchild.val , de.polygonal.ds.Cloneable)).clone(); else x = copier(nchild.val);
				var cchild = c.children = new de.polygonal.ds.TreeNode(x,c);
				stack[i++] = nchild;
				stack[i++] = cchild;
				nchild = nchild.next;
				while(nchild != null) {
					var x1;
					if(assign) x1 = nchild.val; else if(copier == null) x1 = (js.Boot.__cast(nchild.val , de.polygonal.ds.Cloneable)).clone(); else x1 = copier(nchild.val);
					cchild.next = new de.polygonal.ds.TreeNode(x1,c);
					cchild = cchild.next;
					c._tail = cchild;
					stack[i++] = nchild;
					stack[i++] = cchild;
					nchild = nchild.next;
				}
			}
		}
		return copy;
	}
	,popOffStack: function(top) {
		var tmp = top;
		top = top._prevInStack;
		if(top != null) top._nextInStack = null;
		tmp._prevInStack = null;
		return top;
	}
	,pushOnStack: function(top,x) {
		if(top != null) {
			top._nextInStack = x;
			x._prevInStack = top;
		}
		return x;
	}
	,_incChildCount: function() {
		this._extraInfo = this._extraInfo & 65535 | (this._extraInfo >>> 16) + 1 << 16;
	}
	,_decChildCount: function() {
		this._extraInfo = this._extraInfo & 65535 | (this._extraInfo >>> 16) - 1 << 16;
	}
	,_setChildCount: function(x) {
		this._extraInfo = this._extraInfo & 65535 | x << 16;
	}
	,_setTimeStamp: function(x) {
		this._extraInfo = this._extraInfo & -65536 | x;
	}
	,_getTimeStamp: function() {
		return this._extraInfo & 65535;
	}
	,_incTimeStamp: function() {
		this._extraInfo = this._extraInfo & -65536 | (this._extraInfo & 65535) + 1;
	}
	,__class__: de.polygonal.ds.TreeNode
};
de.polygonal.ds.TreeIterator = function(node) {
	this._node = node;
	this._stack = new Array();
	{
		this._stack[0] = this._node;
		this._top = 1;
		this._c = 0;
		this;
	}
};
$hxClasses["de.polygonal.ds.TreeIterator"] = de.polygonal.ds.TreeIterator;
de.polygonal.ds.TreeIterator.__name__ = ["de","polygonal","ds","TreeIterator"];
de.polygonal.ds.TreeIterator.__interfaces__ = [de.polygonal.ds.Itr];
de.polygonal.ds.TreeIterator.prototype = {
	_node: null
	,_stack: null
	,_top: null
	,_c: null
	,reset: function() {
		this._stack[0] = this._node;
		this._top = 1;
		this._c = 0;
		return this;
	}
	,hasNext: function() {
		return this._top > 0;
	}
	,next: function() {
		var node = this._stack[--this._top];
		var walker = node.children;
		this._c = 0;
		while(walker != null) {
			this._stack[this._top++] = walker;
			this._c++;
			walker = walker.next;
		}
		return node.val;
	}
	,remove: function() {
		this._top -= this._c;
	}
	,__class__: de.polygonal.ds.TreeIterator
};
de.polygonal.ds.ChildTreeIterator = function(f) {
	this._f = f;
	{
		this._walker = this._f.children;
		this._hook = null;
		this;
	}
};
$hxClasses["de.polygonal.ds.ChildTreeIterator"] = de.polygonal.ds.ChildTreeIterator;
de.polygonal.ds.ChildTreeIterator.__name__ = ["de","polygonal","ds","ChildTreeIterator"];
de.polygonal.ds.ChildTreeIterator.__interfaces__ = [de.polygonal.ds.Itr];
de.polygonal.ds.ChildTreeIterator.prototype = {
	_f: null
	,_walker: null
	,_hook: null
	,reset: function() {
		this._walker = this._f.children;
		this._hook = null;
		return this;
	}
	,hasNext: function() {
		return this._walker != null;
	}
	,next: function() {
		var x = this._walker.val;
		this._hook = this._walker;
		this._walker = this._walker.next;
		return x;
	}
	,remove: function() {
		this._hook.unlink();
	}
	,__class__: de.polygonal.ds.ChildTreeIterator
};
de.polygonal.ds.Visitable = function() { };
$hxClasses["de.polygonal.ds.Visitable"] = de.polygonal.ds.Visitable;
de.polygonal.ds.Visitable.__name__ = ["de","polygonal","ds","Visitable"];
de.polygonal.ds.Visitable.prototype = {
	visit: null
	,__class__: de.polygonal.ds.Visitable
};
de.polygonal.ds.error = {};
de.polygonal.ds.error.Assert = function() { };
$hxClasses["de.polygonal.ds.error.Assert"] = de.polygonal.ds.error.Assert;
de.polygonal.ds.error.Assert.__name__ = ["de","polygonal","ds","error","Assert"];
var exp = {};
exp.Behave = $hxClasses["exp.Behave"] = { __ename__ : ["exp","Behave"], __constructs__ : ["Scale","Exportable","Mask","Bounded","Flat","Visible","Svg","Skip","Sliced"] };
exp.Behave.Scale = ["Scale",0];
exp.Behave.Scale.toString = $estr;
exp.Behave.Scale.__enum__ = exp.Behave;
exp.Behave.Exportable = ["Exportable",1];
exp.Behave.Exportable.toString = $estr;
exp.Behave.Exportable.__enum__ = exp.Behave;
exp.Behave.Mask = ["Mask",2];
exp.Behave.Mask.toString = $estr;
exp.Behave.Mask.__enum__ = exp.Behave;
exp.Behave.Bounded = ["Bounded",3];
exp.Behave.Bounded.toString = $estr;
exp.Behave.Bounded.__enum__ = exp.Behave;
exp.Behave.Flat = ["Flat",4];
exp.Behave.Flat.toString = $estr;
exp.Behave.Flat.__enum__ = exp.Behave;
exp.Behave.Visible = ["Visible",5];
exp.Behave.Visible.toString = $estr;
exp.Behave.Visible.__enum__ = exp.Behave;
exp.Behave.Svg = ["Svg",6];
exp.Behave.Svg.toString = $estr;
exp.Behave.Svg.__enum__ = exp.Behave;
exp.Behave.Skip = ["Skip",7];
exp.Behave.Skip.toString = $estr;
exp.Behave.Skip.__enum__ = exp.Behave;
exp.Behave.Sliced = ["Sliced",8];
exp.Behave.Sliced.toString = $estr;
exp.Behave.Sliced.__enum__ = exp.Behave;
exp.Exportable = function() { };
$hxClasses["exp.Exportable"] = exp.Exportable;
exp.Exportable.__name__ = ["exp","Exportable"];
exp.Exportable.prototype = {
	behaviour: null
	,orig: null
	,name: null
	,x: null
	,y: null
	,src: null
	,type: null
	,toObj: null
	,'export': null
	,__class__: exp.Exportable
};
exp.ExportLayer = function(layer) {
	this.format = "png";
	this.visible = true;
	this.name = "no name";
	this.name = Std.string(layer.name());
	this.orig = layer;
	this.type = exp.ExportTypes.Container;
};
$hxClasses["exp.ExportLayer"] = exp.ExportLayer;
exp.ExportLayer.__name__ = ["exp","ExportLayer"];
exp.ExportLayer.__interfaces__ = [exp.Exportable];
exp.ExportLayer.prototype = {
	behaviour: null
	,type: null
	,orig: null
	,name: null
	,x: null
	,y: null
	,src: null
	,text: null
	,relx: null
	,rely: null
	,width: null
	,height: null
	,visible: null
	,format: null
	,set_relx: function(f) {
		return this.relx = Math.round(f * 100) / 100;
	}
	,set_rely: function(f) {
		return this.rely = Math.round(f * 100) / 100;
	}
	,set_x: function(f) {
		return this.x = Math.round(f * 100) / 100;
	}
	,set_y: function(f) {
		return this.y = Math.round(f * 100) / 100;
	}
	,set_width: function(f) {
		return this.width = Math.round(f * 100) / 100;
	}
	,set_height: function(f) {
		return this.height = Math.round(f * 100) / 100;
	}
	,'export': function() {
		Global._trace("export",{ fileName : "ExportLayer.hx", lineNumber : 44, className : "exp.ExportLayer", methodName : "export"});
		if(this.orig != null && (this.behaviour & 1 << exp.Behave.Exportable[1]) != 0) {
			if((this.behaviour & 1 << exp.Behave.Visible[1]) != 0) this.visible = true; else this.visible = false;
			this.set_x(this.orig.absoluteRect().rulerX());
			this.set_y(this.orig.absoluteRect().rulerY());
			this.set_width(this.orig.frame().width());
			this.set_height(this.orig.frame().height());
			this.set_relx(this.orig.frame().x());
			this.set_rely(this.orig.frame().y());
			try {
				if((this.behaviour & 1 << exp.Behave.Svg[1]) != 0) {
					Global._trace("--------------svg style--------",{ fileName : "ExportLayer.hx", lineNumber : 56, className : "exp.ExportLayer", methodName : "export"});
					this.src = helpers.Layer.exportSvg(this.orig,helpers.Document.dir(Global.doc) + "view/images");
					this.type = exp.ExportTypes.Svg;
					this.format = "svg";
					this.src = this.relativeSrc(this.src);
					return this;
				}
				if((this.behaviour & 1 << exp.Behave.Scale[1]) != 0) Global._trace("-------------------scale" + this.extractScaleFactor(this.name),{ fileName : "ExportLayer.hx", lineNumber : 64, className : "exp.ExportLayer", methodName : "export"});
				if((this.behaviour & 1 << exp.Behave.Mask[1]) != 0) Global._trace("-------------------------has mask",{ fileName : "ExportLayer.hx", lineNumber : 66, className : "exp.ExportLayer", methodName : "export"});
				if(!((this.behaviour & 1 << exp.Behave.Flat[1]) != 0)) {
					if((this.behaviour & 1 << exp.Behave.Skip[1]) != 0) this.src = helpers.Layer["export"](this.orig,helpers.Document.dir(Global.doc) + "view/imuges",1); else this.src = helpers.Layer["export"](this.orig,helpers.Document.dir(Global.doc) + "view/images",1);
				} else {
					Global._trace("-------------------------has flat",{ fileName : "ExportLayer.hx", lineNumber : 75, className : "exp.ExportLayer", methodName : "export"});
					this.src = helpers.Layer["export"](this.orig,helpers.Document.dir(Global.doc) + "view/images",1);
					this.type = exp.ExportTypes.Image;
				}
				this.src = this.relativeSrc(this.src);
				Global._trace("sr=" + this.src,{ fileName : "ExportLayer.hx", lineNumber : 80, className : "exp.ExportLayer", methodName : "export"});
			} catch( err ) {
				Global.log("Error=" + Std.string(err));
			}
			return this;
		}
		return null;
	}
	,normalize: function(f) {
		return Math.round(f * 100) / 100;
	}
	,relativeSrc: function(absolutePath) {
		var relative = StringTools.replace(absolutePath,helpers.Document.dir(Global.doc) + "view/","");
		return relative;
	}
	,extractScaleFactor: function(name) {
		var r = new EReg("([*]+\\d+)(((.|,)\\d+)+)?","");
		r.match(name);
		var ext = r.matched(0);
		var p = StringTools.replace(ext,"*","");
		return Std.parseFloat(p);
	}
	,toObj: function() {
		return { name : this.name, x : this.x, y : this.y, width : this.width, height : this.height, src : this.src, imageType : this.format, text : this.text != null?this.text.toObj():null, relx : this.relx, rely : this.rely, children : []};
	}
	,__class__: exp.ExportLayer
	,__properties__: {set_height:"set_height",set_width:"set_width",set_rely:"set_rely",set_relx:"set_relx",set_y:"set_y",set_x:"set_x"}
};
exp.ExportContainer = function(layer) {
	if(layer != null) {
		exp.ExportLayer.call(this,layer);
		this.type = exp.ExportTypes.Container;
	}
};
$hxClasses["exp.ExportContainer"] = exp.ExportContainer;
exp.ExportContainer.__name__ = ["exp","ExportContainer"];
exp.ExportContainer.__interfaces__ = [exp.Exportable];
exp.ExportContainer.__super__ = exp.ExportLayer;
exp.ExportContainer.prototype = $extend(exp.ExportLayer.prototype,{
	'export': function() {
		if(this.orig != null && (this.behaviour & 1 << exp.Behave.Exportable[1]) != 0) {
			if((this.behaviour & 1 << exp.Behave.Visible[1]) != 0) this.visible = true; else this.visible = false;
			this.set_x(this.orig.absoluteRect().rulerX());
			this.set_y(this.orig.absoluteRect().rulerY());
			this.set_width(this.orig.frame().width());
			this.set_height(this.orig.frame().height());
			this.set_relx(this.orig.frame().x());
			this.set_rely(this.orig.frame().y());
			this.src = null;
			return this;
		}
		return null;
	}
	,__class__: exp.ExportContainer
});
exp.ExportArtBoard = function(layer) {
	exp.ExportContainer.call(this,layer);
	this.type = exp.ExportTypes.ArtBoard;
};
$hxClasses["exp.ExportArtBoard"] = exp.ExportArtBoard;
exp.ExportArtBoard.__name__ = ["exp","ExportArtBoard"];
exp.ExportArtBoard.__interfaces__ = [exp.Exportable];
exp.ExportArtBoard.__super__ = exp.ExportContainer;
exp.ExportArtBoard.prototype = $extend(exp.ExportContainer.prototype,{
	'export': function() {
		this.set_x(2);
		this.set_y(2);
		this.set_relx(3);
		this.set_rely(3);
		this.set_width(100.1);
		this.set_height(100);
		return this;
	}
	,__class__: exp.ExportArtBoard
});
exp.ExportFactory = function() { };
$hxClasses["exp.ExportFactory"] = exp.ExportFactory;
exp.ExportFactory.__name__ = ["exp","ExportFactory"];
exp.ExportFactory.create = function(origLayer) {
	Global._trace("factory--------------createExport " + origLayer.name() + "-------------",{ fileName : "ExportFactory.hx", lineNumber : 13, className : "exp.ExportFactory", methodName : "create"});
	var klass = helpers.Layer._class(origLayer);
	var flags = exp.ExportFactory.behaviour(origLayer);
	var $export = null;
	if((flags & 1 << exp.Behave.Exportable[1]) != 0) {
		if(origLayer.isVisible()) flags |= 1 << exp.Behave.Visible[1];
		if(origLayer.isLayerExportable() && !helpers.Layer.isArtBoard(origLayer)) {
			Global._trace("isLayerExportable " + origLayer.name(),{ fileName : "ExportFactory.hx", lineNumber : 34, className : "exp.ExportFactory", methodName : "create"});
			flags |= 1 << exp.Behave.Sliced[1];
			flags |= 1 << exp.Behave.Flat[1];
		}
		if(helpers.Layer.isGroup(origLayer) && (function($this) {
			var $r;
			var _this = origLayer.layers();
			$r = _this.length();
			return $r;
		}(this)) > 0) {
			var lastLayerOf = origLayer.layers().firstObject();
			Global._trace("lastLayerOf=",{ fileName : "ExportFactory.hx", lineNumber : 39, className : "exp.ExportFactory", methodName : "create"});
			Global.log(helpers.Layer._class(lastLayerOf));
			if(helpers.Layer._class(lastLayerOf) == MSSliceLayer) {
				Global._trace("isSliced",{ fileName : "ExportFactory.hx", lineNumber : 43, className : "exp.ExportFactory", methodName : "create"});
				flags |= 1 << exp.Behave.Sliced[1];
				flags |= 1 << exp.Behave.Flat[1];
				$export = new exp.ExportSlice(lastLayerOf);
				flags |= 1 << exp.Behave.Flat[1];
				$export.behaviour = flags;
				return $export;
			}
		}
		if(klass == MSSliceLayer) {
			$export = new exp.ExportSlice(origLayer);
			(flags & 1 << exp.Behave.Sliced[1]) != 0;
			$export.behaviour = flags;
			return $export;
		}
		if((flags & 1 << exp.Behave.Sliced[1]) != 0) {
			Global._trace("behave Sliced",{ fileName : "ExportFactory.hx", lineNumber : 64, className : "exp.ExportFactory", methodName : "create"});
			$export = new exp.ExportSlice(origLayer);
			flags |= 1 << exp.Behave.Flat[1];
			$export.behaviour = flags;
			return $export;
		}
		Global._trace(klass,{ fileName : "ExportFactory.hx", lineNumber : 72, className : "exp.ExportFactory", methodName : "create"});
		if(klass == MSPage) {
			$export = new exp.ExportPage(origLayer);
			$export.behaviour = flags;
			return $export;
		}
		if(klass == MSArtboardGroup) {
			$export = new exp.ExportArtBoard(origLayer);
			$export.behaviour = flags;
			return $export;
		}
		if(klass == MSTextLayer) {
			$export = new exp.ExportText(origLayer);
			$export.behaviour = flags;
			return $export;
		}
		if(klass == MSShapeGroup || klass == MSBitmapLayer) {
			$export = new exp.ExportImage(origLayer);
			$export.behaviour = flags;
			return $export;
		}
		if(klass == MSLayerGroup && !((flags & 1 << exp.Behave.Flat[1]) != 0)) {
			$export = new exp.ExportContainer(origLayer);
			Global.onelog("ExportContainer",{ fileName : "ExportFactory.hx", lineNumber : 99, className : "exp.ExportFactory", methodName : "create"});
			$export.behaviour = flags;
			return $export;
		}
		Global._trace("hact as regular layer",{ fileName : "ExportFactory.hx", lineNumber : 104, className : "exp.ExportFactory", methodName : "create"});
		$export = new exp.ExportImage(origLayer);
		$export.behaviour = flags;
		return $export;
	}
	return null;
};
exp.ExportFactory.behaviour = function(orig) {
	var name = orig.name();
	var behaviour = exp.ExportFactory.extract(name);
	return behaviour;
};
exp.ExportFactory.extract = function(name) {
	var flags = 0;
	Global._trace("extract=" + name,{ fileName : "ExportFactory.hx", lineNumber : 126, className : "exp.ExportFactory", methodName : "extract"});
	var _g = exp.ExportFactory.beginWith(name);
	switch(_g) {
	case "*":
		flags |= 1 << exp.Behave.Svg[1];
		flags |= 1 << exp.Behave.Exportable[1];
		flags |= 1 << exp.Behave.Flat[1];
		break;
	case "+":
		flags |= 1 << exp.Behave.Exportable[1];
		break;
	case "_":
		flags |= 1 << exp.Behave.Flat[1];
		flags |= 1 << exp.Behave.Exportable[1];
		break;
	case "°":
		flags |= 1 << exp.Behave.Skip[1];
		flags |= 1 << exp.Behave.Exportable[1];
		break;
	case "-":
		flags &= 268435455 - (1 << exp.Behave.Exportable[1]);
		break;
	default:
		flags |= 1 << exp.Behave.Exportable[1];
	}
	if(helpers.StringSketch.startsWith(name,"m")) flags |= 1 << exp.Behave.Mask[1];
	if(helpers.StringSketch.endsWith(name,"*2")) flags |= 1 << exp.Behave.Scale[1];
	return flags;
};
exp.ExportFactory.beginWith = function(phrase) {
	return phrase.charAt(0);
};
exp.ExportFactory.endWith = function(phrase) {
	return HxOverrides.substr(phrase,-1,null);
};
exp.ExportImage = function(layer) {
	exp.ExportLayer.call(this,layer);
	this.type = exp.ExportTypes.Image;
};
$hxClasses["exp.ExportImage"] = exp.ExportImage;
exp.ExportImage.__name__ = ["exp","ExportImage"];
exp.ExportImage.__interfaces__ = [exp.Exportable];
exp.ExportImage.__super__ = exp.ExportLayer;
exp.ExportImage.prototype = $extend(exp.ExportLayer.prototype,{
	__class__: exp.ExportImage
});
exp.ExportPage = function(layer) {
	exp.ExportContainer.call(this,layer);
	this.type = exp.ExportTypes.Page;
};
$hxClasses["exp.ExportPage"] = exp.ExportPage;
exp.ExportPage.__name__ = ["exp","ExportPage"];
exp.ExportPage.__interfaces__ = [exp.Exportable];
exp.ExportPage.__super__ = exp.ExportContainer;
exp.ExportPage.prototype = $extend(exp.ExportContainer.prototype,{
	'export': function() {
		this.set_x(0);
		this.set_y(0);
		this.set_relx(0);
		this.set_rely(0);
		this.set_width(0.1);
		this.set_height(0);
		return this;
	}
	,__class__: exp.ExportPage
});
exp.ExportSlice = function(layer) {
	exp.ExportLayer.call(this,layer);
	this.type = exp.ExportTypes.Slice;
};
$hxClasses["exp.ExportSlice"] = exp.ExportSlice;
exp.ExportSlice.__name__ = ["exp","ExportSlice"];
exp.ExportSlice.__interfaces__ = [exp.Exportable];
exp.ExportSlice.__super__ = exp.ExportLayer;
exp.ExportSlice.prototype = $extend(exp.ExportLayer.prototype,{
	'export': function() {
		Global.onelog(this.orig,{ fileName : "ExportSlice.hx", lineNumber : 28, className : "exp.ExportSlice", methodName : "export"});
		var slice = null;
		var layer = null;
		var _g = helpers.Layer._class(this.orig);
		switch(_g) {
		case MSSliceLayer:
			slice = this.orig;
			layer = slice.parentGroup();
			break;
		case MSLayerGroup:
			slice = Global.doc.sliceForRect(this.orig.frame());
			layer = this.orig;
			break;
		case MSLayer:
			slice = Global.doc.sliceForRect(this.orig.frame());
			layer = this.orig;
			break;
		}
		var slice1 = this.orig;
		Global.onelog(slice1.absoluteRect().width() + "height=" + slice1.absoluteRect().height(),{ fileName : "ExportSlice.hx", lineNumber : 43, className : "exp.ExportSlice", methodName : "export"});
		Global.onelog(slice1.absoluteRect().origin().x + "height=" + slice1.absoluteRect().origin().y,{ fileName : "ExportSlice.hx", lineNumber : 44, className : "exp.ExportSlice", methodName : "export"});
		Global.onelog(slice1.absoluteRect().rulerX() + "height=" + slice1.absoluteRect().rulerY(),{ fileName : "ExportSlice.hx", lineNumber : 45, className : "exp.ExportSlice", methodName : "export"});
		Global.onelog(slice1.relativeRect().origin.x + "y=" + slice1.relativeRect().origin.y,{ fileName : "ExportSlice.hx", lineNumber : 46, className : "exp.ExportSlice", methodName : "export"});
		Global.onelog("parent=" + Std.string(slice1.ancestors()[(function($this) {
			var $r;
			var _this = slice1.ancestors();
			$r = _this.length();
			return $r;
		}(this)) - 2].name()),{ fileName : "ExportSlice.hx", lineNumber : 47, className : "exp.ExportSlice", methodName : "export"});
		Global.onelog("parent=" + slice1.parentGroup().name(),{ fileName : "ExportSlice.hx", lineNumber : 48, className : "exp.ExportSlice", methodName : "export"});
		Global.onelog("shouldTrim=" + Std.string(slice1.exportOptions().shouldTrim()),{ fileName : "ExportSlice.hx", lineNumber : 49, className : "exp.ExportSlice", methodName : "export"});
		Global.onelog("includedLayerIds=" + (function($this) {
			var $r;
			var _this1 = slice1.exportOptions().includedLayerIds();
			$r = _this1.length();
			return $r;
		}(this)),{ fileName : "ExportSlice.hx", lineNumber : 50, className : "exp.ExportSlice", methodName : "export"});
		Global.onelog("layerOptions=" + slice1.exportOptions().layerOptions(),{ fileName : "ExportSlice.hx", lineNumber : 54, className : "exp.ExportSlice", methodName : "export"});
		var sizes = slice1.exportOptions().sizes();
		Global.onelog("sizes=" + Std.string(slice1.exportOptions().sizes()),{ fileName : "ExportSlice.hx", lineNumber : 58, className : "exp.ExportSlice", methodName : "export"});
		var $it0 = new NativeArrayIterator(sizes);
		while( $it0.hasNext() ) {
			var a = $it0.next();
			Global.onelog(a.defaultName(),{ fileName : "ExportSlice.hx", lineNumber : 61, className : "exp.ExportSlice", methodName : "export"});
			Global.onelog(a.parentLayer().name(),{ fileName : "ExportSlice.hx", lineNumber : 62, className : "exp.ExportSlice", methodName : "export"});
			Global.onelog(a.isVectorExport(),{ fileName : "ExportSlice.hx", lineNumber : 63, className : "exp.ExportSlice", methodName : "export"});
			Global.onelog(a.name(),{ fileName : "ExportSlice.hx", lineNumber : 64, className : "exp.ExportSlice", methodName : "export"});
			Global.onelog(a.format(),{ fileName : "ExportSlice.hx", lineNumber : 65, className : "exp.ExportSlice", methodName : "export"});
			Global.onelog(a.visibleScaleType(),{ fileName : "ExportSlice.hx", lineNumber : 66, className : "exp.ExportSlice", methodName : "export"});
			Global.onelog(a.scale(),{ fileName : "ExportSlice.hx", lineNumber : 67, className : "exp.ExportSlice", methodName : "export"});
		}
		this.set_x(slice1.absoluteRect().rulerX());
		this.set_y(slice1.absoluteRect().rulerY());
		this.set_width(slice1.frame().width());
		this.set_height(slice1.frame().height());
		this.set_relx(slice1.frame().x());
		this.set_rely(slice1.frame().y());
		this.type = exp.ExportTypes.Image;
		this.format = Std.string(slice1.exportOptions().sizes().firstObject().format());
		this.src = helpers.Slice["export"](slice1,layer,helpers.Document.dir(Global.doc) + "view/images",sizes.firstObject().scale());
		this.src = this.relativeSrc(this.src);
		return this;
	}
	,__class__: exp.ExportSlice
});
exp.Alignement = $hxClasses["exp.Alignement"] = { __ename__ : ["exp","Alignement"], __constructs__ : ["Left","Right","Center","Justify"] };
exp.Alignement.Left = ["Left",0];
exp.Alignement.Left.toString = $estr;
exp.Alignement.Left.__enum__ = exp.Alignement;
exp.Alignement.Right = ["Right",1];
exp.Alignement.Right.toString = $estr;
exp.Alignement.Right.__enum__ = exp.Alignement;
exp.Alignement.Center = ["Center",2];
exp.Alignement.Center.toString = $estr;
exp.Alignement.Center.__enum__ = exp.Alignement;
exp.Alignement.Justify = ["Justify",3];
exp.Alignement.Justify.toString = $estr;
exp.Alignement.Justify.__enum__ = exp.Alignement;
exp.ExportText = function(layer) {
	Global._trace("hello text",{ fileName : "ExportText.hx", lineNumber : 27, className : "exp.ExportText", methodName : "new"});
	exp.ExportLayer.call(this,layer);
	this.name = this.name + "____text";
};
$hxClasses["exp.ExportText"] = exp.ExportText;
exp.ExportText.__name__ = ["exp","ExportText"];
exp.ExportText.__interfaces__ = [exp.Exportable];
exp.ExportText.__super__ = exp.ExportLayer;
exp.ExportText.prototype = $extend(exp.ExportLayer.prototype,{
	TP: null
	,'export': function() {
		var layer = this.orig;
		this.TP = { };
		this.TP.text = layer.stringValue();
		this.TP.fontSize = layer.fontSize();
		this.TP.fontPostscriptName = "" + layer.fontPostscriptName();
		Global._trace("pif",{ fileName : "ExportText.hx", lineNumber : 46, className : "exp.ExportText", methodName : "export"});
		try {
			Global._trace("try",{ fileName : "ExportText.hx", lineNumber : 50, className : "exp.ExportText", methodName : "export"});
			this.TP.color = layer.style().fills().firstObject().color().hexValue();
			this.TP.alpha = layer.style().fills().firstObject().color().alpha();
		} catch( msg ) {
			this.TP.color = layer.textColor().hexValue();
			this.TP.alpha = layer.textColor().alpha();
		}
		try {
			this.TP.textAlignment = this.Align(layer.textAlignment());
			this.TP.characterSpacing = layer.characterSpacing();
			this.TP.lineSpacing = layer.lineSpacing();
			this.TP.toObj = $bind(this,this.toObject);
			this.text = this.TP;
			Global.log(layer.font());
		} catch( msg1 ) {
			Global._trace("font problem" + Std.string(msg1),{ fileName : "ExportText.hx", lineNumber : 69, className : "exp.ExportText", methodName : "export"});
		}
		this.type = exp.ExportTypes.Text;
		Global._trace(" font stuff",{ fileName : "ExportText.hx", lineNumber : 72, className : "exp.ExportText", methodName : "export"});
		return exp.ExportLayer.prototype["export"].call(this);
	}
	,toObject: function() {
		return { text : this.TP.text.toString(), color : this.TP.color.toString(), fontSize : this.TP.fontSize, fontPostscriptName : this.TP.fontPostscriptName, textAlignment : this.TP.textAlignment, characterSpacing : this.TP.characterSpacing, lineSpacing : this.TP.lineSpacing, alpha : Math.round(this.TP.alpha * 100) / 100};
	}
	,Align: function(code) {
		var e = Type.createEnumIndex(exp.Alignement,code);
		return e[0];
	}
	,__class__: exp.ExportText
});
exp.ExportTypes = $hxClasses["exp.ExportTypes"] = { __ename__ : ["exp","ExportTypes"], __constructs__ : ["Page","ArtBoard","Text","Image","Svg","Container","Slice"] };
exp.ExportTypes.Page = ["Page",0];
exp.ExportTypes.Page.toString = $estr;
exp.ExportTypes.Page.__enum__ = exp.ExportTypes;
exp.ExportTypes.ArtBoard = ["ArtBoard",1];
exp.ExportTypes.ArtBoard.toString = $estr;
exp.ExportTypes.ArtBoard.__enum__ = exp.ExportTypes;
exp.ExportTypes.Text = ["Text",2];
exp.ExportTypes.Text.toString = $estr;
exp.ExportTypes.Text.__enum__ = exp.ExportTypes;
exp.ExportTypes.Image = ["Image",3];
exp.ExportTypes.Image.toString = $estr;
exp.ExportTypes.Image.__enum__ = exp.ExportTypes;
exp.ExportTypes.Svg = ["Svg",4];
exp.ExportTypes.Svg.toString = $estr;
exp.ExportTypes.Svg.__enum__ = exp.ExportTypes;
exp.ExportTypes.Container = ["Container",5];
exp.ExportTypes.Container.toString = $estr;
exp.ExportTypes.Container.__enum__ = exp.ExportTypes;
exp.ExportTypes.Slice = ["Slice",6];
exp.ExportTypes.Slice.toString = $estr;
exp.ExportTypes.Slice.__enum__ = exp.ExportTypes;
var haxe = {};
haxe._EnumFlags = {};
haxe._EnumFlags.EnumFlags_Impl_ = function() { };
$hxClasses["haxe._EnumFlags.EnumFlags_Impl_"] = haxe._EnumFlags.EnumFlags_Impl_;
haxe._EnumFlags.EnumFlags_Impl_.__name__ = ["haxe","_EnumFlags","EnumFlags_Impl_"];
haxe._EnumFlags.EnumFlags_Impl_._new = function(i) {
	if(i == null) i = 0;
	return i;
};
haxe._EnumFlags.EnumFlags_Impl_.has = function(this1,v) {
	return (this1 & 1 << v[1]) != 0;
};
haxe._EnumFlags.EnumFlags_Impl_.set = function(this1,v) {
	this1 |= 1 << v[1];
};
haxe._EnumFlags.EnumFlags_Impl_.unset = function(this1,v) {
	this1 &= 268435455 - (1 << v[1]);
};
haxe._EnumFlags.EnumFlags_Impl_.ofInt = function(i) {
	return i;
};
haxe._EnumFlags.EnumFlags_Impl_.toInt = function(this1) {
	return this1;
};
haxe.ds = {};
haxe.ds.BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe.ds.BalancedTree;
haxe.ds.BalancedTree.__name__ = ["haxe","ds","BalancedTree"];
haxe.ds.BalancedTree.prototype = {
	root: null
	,set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) return node.value;
			if(c < 0) node = node.left; else node = node.right;
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( e ) {
			if( js.Boot.__instanceof(e,String) ) {
				return false;
			} else throw(e);
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) return true; else if(c < 0) node = node.left; else node = node.right;
		}
		return false;
	}
	,iterator: function() {
		var ret = [];
		this.iteratorLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) return new haxe.ds.TreeNode(null,k,v,null);
		var c = this.compare(k,node.key);
		if(c == 0) return new haxe.ds.TreeNode(node.left,k,v,node.right,node == null?0:node._height); else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) throw "Not_found";
		var c = this.compare(k,node.key);
		if(c == 0) return this.merge(node.left,node.right); else if(c < 0) return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right); else return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
	}
	,iteratorLoop: function(node,acc) {
		if(node != null) {
			this.iteratorLoop(node.left,acc);
			acc.push(node.value);
			this.iteratorLoop(node.right,acc);
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,merge: function(t1,t2) {
		if(t1 == null) return t2;
		if(t2 == null) return t1;
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) throw "Not_found"; else if(t.left == null) return t; else return this.minBinding(t.left);
	}
	,removeMinBinding: function(t) {
		if(t.left == null) return t.right; else return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
	}
	,balance: function(l,k,v,r) {
		var hl;
		if(l == null) hl = 0; else hl = l._height;
		var hr;
		if(r == null) hr = 0; else hr = r._height;
		if(hl > hr + 2) {
			if((function($this) {
				var $r;
				var _this = l.left;
				$r = _this == null?0:_this._height;
				return $r;
			}(this)) >= (function($this) {
				var $r;
				var _this1 = l.right;
				$r = _this1 == null?0:_this1._height;
				return $r;
			}(this))) return new haxe.ds.TreeNode(l.left,l.key,l.value,new haxe.ds.TreeNode(l.right,k,v,r)); else return new haxe.ds.TreeNode(new haxe.ds.TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe.ds.TreeNode(l.right.right,k,v,r));
		} else if(hr > hl + 2) {
			if((function($this) {
				var $r;
				var _this2 = r.right;
				$r = _this2 == null?0:_this2._height;
				return $r;
			}(this)) > (function($this) {
				var $r;
				var _this3 = r.left;
				$r = _this3 == null?0:_this3._height;
				return $r;
			}(this))) return new haxe.ds.TreeNode(new haxe.ds.TreeNode(l,k,v,r.left),r.key,r.value,r.right); else return new haxe.ds.TreeNode(new haxe.ds.TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe.ds.TreeNode(r.left.right,r.key,r.value,r.right));
		} else return new haxe.ds.TreeNode(l,k,v,r,(hl > hr?hl:hr) + 1);
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,toString: function() {
		return "{" + this.root.toString() + "}";
	}
	,__class__: haxe.ds.BalancedTree
};
haxe.ds.TreeNode = function(l,k,v,r,h) {
	if(h == null) h = -1;
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) this._height = ((function($this) {
		var $r;
		var _this = $this.left;
		$r = _this == null?0:_this._height;
		return $r;
	}(this)) > (function($this) {
		var $r;
		var _this1 = $this.right;
		$r = _this1 == null?0:_this1._height;
		return $r;
	}(this))?(function($this) {
		var $r;
		var _this2 = $this.left;
		$r = _this2 == null?0:_this2._height;
		return $r;
	}(this)):(function($this) {
		var $r;
		var _this3 = $this.right;
		$r = _this3 == null?0:_this3._height;
		return $r;
	}(this))) + 1; else this._height = h;
};
$hxClasses["haxe.ds.TreeNode"] = haxe.ds.TreeNode;
haxe.ds.TreeNode.__name__ = ["haxe","ds","TreeNode"];
haxe.ds.TreeNode.prototype = {
	left: null
	,right: null
	,key: null
	,value: null
	,_height: null
	,toString: function() {
		return (this.left == null?"":this.left.toString() + ", ") + ("" + Std.string(this.key) + "=" + Std.string(this.value)) + (this.right == null?"":", " + this.right.toString());
	}
	,__class__: haxe.ds.TreeNode
};
haxe.ds.EnumValueMap = function() {
	haxe.ds.BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe.ds.EnumValueMap;
haxe.ds.EnumValueMap.__name__ = ["haxe","ds","EnumValueMap"];
haxe.ds.EnumValueMap.__interfaces__ = [IMap];
haxe.ds.EnumValueMap.__super__ = haxe.ds.BalancedTree;
haxe.ds.EnumValueMap.prototype = $extend(haxe.ds.BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1[1] - k2[1];
		if(d != 0) return d;
		var p1 = k1.slice(2);
		var p2 = k2.slice(2);
		if(p1.length == 0 && p2.length == 0) return 0;
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) return ld;
		var _g1 = 0;
		var _g = a1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) return d;
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) return this.compare(v1,v2); else if((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) return this.compareArgs(v1,v2); else return Reflect.compare(v1,v2);
	}
	,__class__: haxe.ds.EnumValueMap
});
haxe.ds._HashMap = {};
haxe.ds._HashMap.HashMap_Impl_ = function() { };
$hxClasses["haxe.ds._HashMap.HashMap_Impl_"] = haxe.ds._HashMap.HashMap_Impl_;
haxe.ds._HashMap.HashMap_Impl_.__name__ = ["haxe","ds","_HashMap","HashMap_Impl_"];
haxe.ds._HashMap.HashMap_Impl_._new = function() {
	return { keys : new haxe.ds.IntMap(), values : new haxe.ds.IntMap()};
};
haxe.ds._HashMap.HashMap_Impl_.set = function(this1,k,v) {
	this1.keys.set(k.hashCode(),k);
	this1.values.set(k.hashCode(),v);
};
haxe.ds._HashMap.HashMap_Impl_.get = function(this1,k) {
	return this1.values.get(k.hashCode());
};
haxe.ds._HashMap.HashMap_Impl_.exists = function(this1,k) {
	return this1.values.exists(k.hashCode());
};
haxe.ds._HashMap.HashMap_Impl_.remove = function(this1,k) {
	this1.values.remove(k.hashCode());
	return this1.keys.remove(k.hashCode());
};
haxe.ds._HashMap.HashMap_Impl_.keys = function(this1) {
	return this1.keys.iterator();
};
haxe.ds._HashMap.HashMap_Impl_.iterator = function(this1) {
	return this1.values.iterator();
};
haxe.ds.IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe.ds.IntMap;
haxe.ds.IntMap.__name__ = ["haxe","ds","IntMap"];
haxe.ds.IntMap.__interfaces__ = [IMap];
haxe.ds.IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,toString: function() {
		var s = new StringBuf();
		s.b += "{";
		var it = this.keys();
		while( it.hasNext() ) {
			var i = it.next();
			if(i == null) s.b += "null"; else s.b += "" + i;
			s.b += " => ";
			s.add(Std.string(this.get(i)));
			if(it.hasNext()) s.b += ", ";
		}
		s.b += "}";
		return s.b;
	}
	,__class__: haxe.ds.IntMap
};
haxe.ds.ObjectMap = function() {
	this.h = { };
	this.h.__keys__ = { };
};
$hxClasses["haxe.ds.ObjectMap"] = haxe.ds.ObjectMap;
haxe.ds.ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe.ds.ObjectMap.__interfaces__ = [IMap];
haxe.ds.ObjectMap.assignId = function(obj) {
	return obj.__id__ = ++haxe.ds.ObjectMap.count;
};
haxe.ds.ObjectMap.getId = function(obj) {
	return obj.__id__;
};
haxe.ds.ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe.ds.ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) return false;
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) a.push(this.h.__keys__[key]);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,toString: function() {
		var s = new StringBuf();
		s.b += "{";
		var it = this.keys();
		while( it.hasNext() ) {
			var i = it.next();
			s.add(Std.string(i));
			s.b += " => ";
			s.add(Std.string(this.h[i.__id__]));
			if(it.hasNext()) s.b += ", ";
		}
		s.b += "}";
		return s.b;
	}
	,__class__: haxe.ds.ObjectMap
};
haxe.ds.StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe.ds.StringMap;
haxe.ds.StringMap.__name__ = ["haxe","ds","StringMap"];
haxe.ds.StringMap.__interfaces__ = [IMap];
haxe.ds.StringMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h["$" + key] = value;
	}
	,get: function(key) {
		return this.h["$" + key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		key = "$" + key;
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key.substr(1));
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref["$" + i];
		}};
	}
	,toString: function() {
		var s = new StringBuf();
		s.b += "{";
		var it = this.keys();
		while( it.hasNext() ) {
			var i = it.next();
			if(i == null) s.b += "null"; else s.b += "" + i;
			s.b += " => ";
			s.add(Std.string(this.get(i)));
			if(it.hasNext()) s.b += ", ";
		}
		s.b += "}";
		return s.b;
	}
	,__class__: haxe.ds.StringMap
};
haxe.ds.WeakMap = function() {
	throw "Not implemented for this platform";
};
$hxClasses["haxe.ds.WeakMap"] = haxe.ds.WeakMap;
haxe.ds.WeakMap.__name__ = ["haxe","ds","WeakMap"];
haxe.ds.WeakMap.__interfaces__ = [IMap];
haxe.ds.WeakMap.prototype = {
	set: function(key,value) {
	}
	,get: function(key) {
		return null;
	}
	,exists: function(key) {
		return false;
	}
	,remove: function(key) {
		return false;
	}
	,keys: function() {
		return null;
	}
	,iterator: function() {
		return null;
	}
	,toString: function() {
		return null;
	}
	,__class__: haxe.ds.WeakMap
};
haxe.xml = {};
haxe.xml.Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe.xml.Parser;
haxe.xml.Parser.__name__ = ["haxe","xml","Parser"];
haxe.xml.Parser.parse = function(str) {
	var doc = Xml.createDocument();
	haxe.xml.Parser.doParse(str,0,doc);
	return doc;
};
haxe.xml.Parser.doParse = function(str,p,parent) {
	if(p == null) p = 0;
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	while(!(c != c)) {
		switch(state) {
		case 0:
			switch(c) {
			case 10:case 13:case 9:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			switch(c) {
			case 60:
				state = 0;
				next = 2;
				break;
			default:
				start = p;
				state = 13;
				continue;
			}
			break;
		case 13:
			if(c == 60) {
				var child = Xml.createPCData(buf.b + HxOverrides.substr(str,start,p - start));
				buf = new StringBuf();
				parent.addChild(child);
				nsubs++;
				state = 0;
				next = 2;
			} else if(c == 38) {
				buf.addSub(str,start,p - start);
				state = 18;
				next = 13;
				start = p + 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				nsubs++;
				p += 2;
				state = 1;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") throw "Expected <![CDATA[";
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") throw "Expected <!DOCTYPE";
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) throw "Expected <!--"; else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 63:
				state = 14;
				start = p;
				break;
			case 47:
				if(parent == null) throw "Expected node name";
				start = p + 1;
				state = 0;
				next = 10;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) throw "Expected node name";
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				nsubs++;
				break;
			case 62:
				state = 9;
				nsubs++;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) throw "Expected attribute name";
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) throw "Duplicate attribute";
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			switch(c) {
			case 61:
				state = 0;
				next = 7;
				break;
			default:
				throw "Expected =";
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				state = 8;
				start = p;
				break;
			default:
				throw "Expected ";
			}
			break;
		case 8:
			if(c == str.charCodeAt(start)) {
				var val = HxOverrides.substr(str,start + 1,p - start - 1);
				xml.set(aname,val);
				state = 0;
				next = 4;
			}
			break;
		case 9:
			p = haxe.xml.Parser.doParse(str,p,xml);
			start = p;
			state = 1;
			break;
		case 11:
			switch(c) {
			case 62:
				state = 1;
				break;
			default:
				throw "Expected >";
			}
			break;
		case 12:
			switch(c) {
			case 62:
				if(nsubs == 0) parent.addChild(Xml.createPCData(""));
				return p;
			default:
				throw "Expected >";
			}
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) throw "Expected node name";
				var v = HxOverrides.substr(str,start,p - start);
				if(v != parent.get_nodeName()) throw "Expected </" + parent.get_nodeName() + ">";
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) nbrackets++; else if(c == 93) nbrackets--; else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				state = 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				p++;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var i;
					if(s.charCodeAt(1) == 120) i = Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)); else i = Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.add(String.fromCharCode(i));
				} else if(!haxe.xml.Parser.escapes.exists(s)) buf.b += Std.string("&" + s + ";"); else buf.add(haxe.xml.Parser.escapes.get(s));
				start = p + 1;
				state = next;
			}
			break;
		}
		c = StringTools.fastCodeAt(str,++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) parent.addChild(Xml.createPCData(buf.b + HxOverrides.substr(str,start,p - start)));
		return p;
	}
	throw "Unexpected end";
};
haxe.xml.Parser.isValidChar = function(c) {
	return c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45;
};
var helpers = {};
helpers.Artboard = function() { };
$hxClasses["helpers.Artboard"] = helpers.Artboard;
helpers.Artboard.__name__ = ["helpers","Artboard"];
helpers.Artboard.numberOfExportableGroups = function(a) {
	var number = 0;
	var $it0 = (function($this) {
		var $r;
		var _this = a.layers();
		$r = new NativeArrayIterator(_this);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var layer = $it0.next();
		if(helpers.Layer.isExportable(layer)) number++;
	}
	return number;
};
helpers.Artboard.isGroup = function(a) {
	return true;
};
helpers.Artboard.groups = function(a) {
	Global._trace("groups",{ fileName : "Artboard.hx", lineNumber : 29, className : "helpers.Artboard", methodName : "groups"});
	var hxLayers = ((function($this) {
		var $r;
		var _this = a.layers();
		$r = new NativeArrayIterator(_this);
		return $r;
	}(this))).haxeArray();
	var grouped = Lambda.filter(hxLayers,function(layer) {
		return helpers.Layer.isGroup(layer);
	});
	Global._trace("grouped=" + Std.string(grouped),{ fileName : "Artboard.hx", lineNumber : 34, className : "helpers.Artboard", methodName : "groups"});
	var exportables = Lambda.array(grouped.map(helpers.Artboard.genExportable));
	Global._trace("exportables" + Std.string(exportables),{ fileName : "Artboard.hx", lineNumber : 36, className : "helpers.Artboard", methodName : "groups"});
	return exportables;
};
helpers.Artboard.genExportable = function(layerGroup) {
	Global._trace("genExportable",{ fileName : "Artboard.hx", lineNumber : 43, className : "helpers.Artboard", methodName : "genExportable"});
	return exp.ExportFactory.create(layerGroup);
};
helpers.Artboard.hideOtherLayers = function(a,currentLayer,withChilds) {
	if(withChilds == null) withChilds = true;
	Global.onelog("------------hideOthers-----------for " + currentLayer.name(),{ fileName : "Artboard.hx", lineNumber : 55, className : "helpers.Artboard", methodName : "hideOtherLayers"});
	var parents = [];
	var node = currentLayer.parentGroup();
	while(node != a) {
		if(node.isVisible()) parents.push(node);
		node = node.parentGroup();
	}
	var $it0 = (function($this) {
		var $r;
		var _this = a.layers();
		$r = new NativeArrayIterator(_this);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var layer = $it0.next();
		if(currentLayer != layer) {
			var layerParent = layer.parentGroup();
			if(withChilds) {
				if(layer.isVisible()) try {
					layer.setIsVisible(false);
					helpers.Artboard.setHiddenLayers(a,layer);
				} catch( err ) {
				}
			} else {
			}
		}
	}
	helpers.Artboard.hideSiblings(a,currentLayer,currentLayer,withChilds);
	var _g = 0;
	while(_g < parents.length) {
		var p = parents[_g];
		++_g;
		try {
			p.setIsVisible(true);
		} catch( err1 ) {
			Global._trace(err1,{ fileName : "Artboard.hx", lineNumber : 91, className : "helpers.Artboard", methodName : "hideOtherLayers"});
		}
	}
	parents = null;
};
helpers.Artboard.hideParentsSiblings = function(a,currentLayer,origLayer,withChilds) {
	var active = currentLayer.parentGroup();
	while(active.parentGroup() != a) {
		helpers.Artboard.hideSiblings(a,active,origLayer,withChilds);
		active = active.parentGroup();
	}
};
helpers.Artboard.hideSiblings = function(a,currentLayer,origLayer,withChilds) {
	var $it0 = (function($this) {
		var $r;
		var _this = currentLayer.parentGroup().layers();
		$r = new NativeArrayIterator(_this);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var child = $it0.next();
		if(child != currentLayer) {
			Global.onelog("hide" + child.name(),{ fileName : "Artboard.hx", lineNumber : 117, className : "helpers.Artboard", methodName : "hideSiblings"});
			if(child.isVisible()) helpers.Artboard.hideParentsSiblings(a,child,origLayer,withChilds);
			helpers.Artboard.setHiddenLayers(a,child);
			child.setIsVisible(false);
		}
	}
};
helpers.Artboard.showHiddenLayers = function(a) {
	Global.onelog("--------------show---------------",{ fileName : "Artboard.hx", lineNumber : 128, className : "helpers.Artboard", methodName : "showHiddenLayers"});
	var $it0 = helpers.Artboard.getHiddenLayers(a).iterator();
	while( $it0.hasNext() ) {
		var hidden = $it0.next();
		hidden.setIsVisible(true);
	}
};
helpers.Artboard.getHiddenLayers = function(a) {
	var key = a.hash();
	return helpers.Artboard.hiddenLayers.get(key);
};
helpers.Artboard.setHiddenLayers = function(a,hiddenLayer) {
	if(helpers.Artboard.getHiddenLayers(a) == null) {
		var key = a.hash();
		var value = new List();
		helpers.Artboard.hiddenLayers.set(key,value);
	}
	var liste = null;
	if((function($this) {
		var $r;
		var key1 = a.hash();
		$r = helpers.Artboard.hiddenLayers.get(key1);
		return $r;
	}(this)) != null) {
		var key2 = a.hash();
		liste = helpers.Artboard.hiddenLayers.get(key2);
	} else liste = new List();
	liste.add(hiddenLayer);
	var key3 = a.hash();
	helpers.Artboard.hiddenLayers.set(key3,liste);
};
helpers.Document = function() { };
$hxClasses["helpers.Document"] = helpers.Document;
helpers.Document.__name__ = ["helpers","Document"];
helpers.Document.dir = function(d) {
	return bs.BomberCommands.getFileFolder();
};
helpers.Document.pluginPath = function(d) {
	return [[[CHPluginsController alloc] init] fullPluginPath];
};
helpers.Document.filePath = function(d) {
	return d.fileURL().path();
};
helpers.Document.numberOfExportableGroups = function(d) {
	var number = 0;
	var $it0 = (function($this) {
		var $r;
		var _this = d.artboards();
		$r = new NativeArrayIterator(_this);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var arts = $it0.next();
		number += helpers.Artboard.numberOfExportableGroups(arts);
	}
	return number;
};
helpers.Document.loadTxt = function(d,file) {
	var fileContent = NSString.stringWithContentsOfFile_encoding_error(file,NSUTF8StringEncoding,null);
	return fileContent;
};
helpers.Document.loadJson = function(d,file) {
	var fileContent = helpers.Document.loadTxt(d,file);
	var t = JSON.parse(fileContent);
	log("loadJson" + t);
	return t;
};
helpers.Document.stockInUserData = function(d,key,data) {
};
helpers.Document.getInUserData = function(d,key) {
	return null;
};
helpers.Document.usersDefaults = function(d) {
};
helpers.Layer = function() { };
$hxClasses["helpers.Layer"] = helpers.Layer;
helpers.Layer.__name__ = ["helpers","Layer"];
helpers.Layer.isExportable = function(layer) {
	Global._trace(layer,{ fileName : "Layer.hx", lineNumber : 13, className : "helpers.Layer", methodName : "isExportable"});
	var isGroup = helpers.Layer.isGroup(layer);
	var cleanName = helpers.StringSketch.clean(layer.name());
	var _isExportable = !helpers.StringSketch.startsWith(cleanName,"-");
	var force = helpers.StringSketch.startsWith(cleanName,"+");
	return isGroup && _isExportable || force;
};
helpers.Layer.setMapName = function(layer,val) {
	try {
		var key = layer.hash();
		helpers.Layer.mapName.set(key,val);
	} catch( err ) {
		log(err);
	}
};
helpers.Layer.getMapName = function(layer) {
	var key = layer.hash();
	return helpers.Layer.mapName.get(key);
	return "pop";
};
helpers.Layer._class = function(layer) {
	return layer.class();
};
helpers.Layer.isArtBoard = function(l) {
	var klass = helpers.Layer._class(l);
	return klass == MSArtboardGroup;
};
helpers.Layer.isGroup = function(l) {
	var klass = helpers.Layer._class(l);
	return klass == MSLayerGroup;
};
helpers.Layer.isText = function(l) {
	var klass = helpers.Layer._class(l);
	return klass == MSTextLayer;
};
helpers.Layer["export"] = function(layer,path,factor) {
	var invisible = false;
	var artboard = layer.parentArtboard();
	var page = layer.parentPage();
	helpers.Artboard.hideOtherLayers(artboard,layer);
	if(!layer.isVisible()) {
		invisible = true;
		layer.setIsVisible(true);
	}
	path = path + "/" + page.name() + "/" + artboard.name() + "/" + helpers.StringSketch.clean(layer.name()) + ".png";
	Global._trace(path + "factor=" + (factor == null?"null":"" + factor),{ fileName : "Layer.hx", lineNumber : 70, className : "helpers.Layer", methodName : "export"});
	if(factor != null) factor = factor; else factor = 1;
	var slice = helpers.Layer.withFactor(layer,factor);
	Global.doc.saveArtboardOrSlice_toFile(slice,path);
	if(invisible) layer.setIsVisible(false);
	try {
		helpers.Artboard.showHiddenLayers(artboard);
	} catch( msg ) {
		Global._trace(msg,{ fileName : "Layer.hx", lineNumber : 79, className : "helpers.Layer", methodName : "export"});
	}
	return path;
};
helpers.Layer.exportSvg = function(layer,path) {
	var factor = null;
	path = helpers.StringSketch.cleanPath(path);
	var invisible = false;
	var artboard = layer.parentArtboard();
	var page = layer.parentPage();
	helpers.Artboard.hideOtherLayers(artboard,layer);
	if(!layer.isVisible()) {
		invisible = true;
		layer.setIsVisible(true);
	}
	path = path + "/" + page.name() + "/" + artboard.name() + "/" + helpers.StringSketch.clean(layer.name()) + ".svg";
	if(factor != null) factor = factor; else factor = 1;
	var slice = helpers.Layer.withFactor(layer,factor);
	Global.doc.saveArtboardOrSlice_toFile(slice,path);
	if(invisible) layer.setIsVisible(false);
	try {
		helpers.Artboard.showHiddenLayers(artboard);
	} catch( msg ) {
		Global._trace(msg,{ fileName : "Layer.hx", lineNumber : 104, className : "helpers.Layer", methodName : "exportSvg"});
	}
	return path;
};
helpers.Layer.exportFlat = function(layer,path,factor) {
	return helpers.Layer["export"](layer,path,factor);
};
helpers.Layer.withFactor = function(layer,factor) {
	var copy = layer.duplicate();
	var frame = copy.frame();
	Global._trace("here",{ fileName : "Layer.hx", lineNumber : 115, className : "helpers.Layer", methodName : "withFactor"});
	var rect = null;
	try {
		rect = copy.rectByAccountingForStyleSize(copy.absoluteRect().rect());
	} catch( msg ) {
		Global._trace(msg,{ fileName : "Layer.hx", lineNumber : 118, className : "helpers.Layer", methodName : "withFactor"});
	}
	var slice = MSSlice.sliceWithRect_scale(rect,factor);
	Global._trace(copy,{ fileName : "Layer.hx", lineNumber : 121, className : "helpers.Layer", methodName : "withFactor"});
	try {
		copy.removeFromParent();
	} catch( msg1 ) {
		log(msg1);
	}
	return slice;
};
helpers.Format = $hxClasses["helpers.Format"] = { __ename__ : ["helpers","Format"], __constructs__ : ["Png","Svg","Jpg","Pdf","Tiff","Eps"] };
helpers.Format.Png = ["Png",0];
helpers.Format.Png.toString = $estr;
helpers.Format.Png.__enum__ = helpers.Format;
helpers.Format.Svg = ["Svg",1];
helpers.Format.Svg.toString = $estr;
helpers.Format.Svg.__enum__ = helpers.Format;
helpers.Format.Jpg = ["Jpg",2];
helpers.Format.Jpg.toString = $estr;
helpers.Format.Jpg.__enum__ = helpers.Format;
helpers.Format.Pdf = ["Pdf",3];
helpers.Format.Pdf.toString = $estr;
helpers.Format.Pdf.__enum__ = helpers.Format;
helpers.Format.Tiff = ["Tiff",4];
helpers.Format.Tiff.toString = $estr;
helpers.Format.Tiff.__enum__ = helpers.Format;
helpers.Format.Eps = ["Eps",5];
helpers.Format.Eps.toString = $estr;
helpers.Format.Eps.__enum__ = helpers.Format;
helpers.Slice = function() { };
$hxClasses["helpers.Slice"] = helpers.Slice;
helpers.Slice.__name__ = ["helpers","Slice"];
helpers.Slice["export"] = function(slice,orig,path,factor) {
	var options = { };
	var firstOption = slice.exportOptions().sizes().firstObject();
	options.format = Type.createEnum(helpers.Format,helpers.StringSketch.capitalize(Std.string(firstOption.format())));
	options.suffix = firstOption.name();
	options.scale = firstOption.scale();
	var layer = orig;
	Global.onelog("layer" + layer.name(),{ fileName : "Slice.hx", lineNumber : 45, className : "helpers.Slice", methodName : "export"});
	var invisible = false;
	var artboard = layer.parentArtboard();
	var page = layer.parentPage();
	helpers.Artboard.hideOtherLayers(artboard,layer);
	if(!layer.isVisible()) {
		invisible = true;
		layer.setIsVisible(true);
	}
	path = path + "/" + page.name() + "/" + artboard.name() + "/slices/" + helpers.StringSketch.clean(layer.name()) + "." + Std.string(options.format).toLowerCase();
	Global._trace(path + "factor=" + (factor == null?"null":"" + factor),{ fileName : "Slice.hx", lineNumber : 56, className : "helpers.Slice", methodName : "export"});
	var factor1 = options.scale;
	var exportslice = helpers.Layer.withFactor(slice,factor1);
	Global.doc.saveArtboardOrSlice_toFile(exportslice,path);
	if(invisible) layer.setIsVisible(false);
	try {
		helpers.Artboard.showHiddenLayers(artboard);
	} catch( msg ) {
		Global._trace(msg,{ fileName : "Slice.hx", lineNumber : 66, className : "helpers.Slice", methodName : "export"});
	}
	return path;
};
helpers.StringSketch = function() { };
$hxClasses["helpers.StringSketch"] = helpers.StringSketch;
helpers.StringSketch.__name__ = ["helpers","StringSketch"];
helpers.StringSketch.camelize = function(str) {
	throw "not yet implemented";
};
helpers.StringSketch.capitalize = function(str) {
	return str.charAt(0).toUpperCase() + HxOverrides.substr(str,1,null);
};
helpers.StringSketch.classify = function(str) {
	throw "not yet implemented";
};
helpers.StringSketch.cleanPath = function(str) {
	var r = new EReg("/+$","");
	return r.replace(str,"");
};
helpers.StringSketch.clean = function(str) {
	var r = new EReg("\\s+","g");
	var trimed = StringTools.trim(str);
	return r.replace(trimed," ");
};
helpers.StringSketch.endsWith = function(str,ends) {
	if(ends == "") return true;
	if(str == null || ends == null) return false;
	if(str == null) str = "null"; else str = "" + str;
	if(ends == null) ends = "null"; else ends = "" + ends;
	return str.length >= ends.length && HxOverrides.substr(str,str.length - ends.length,null) == ends;
};
helpers.StringSketch.escapeRegExp = function(str) {
	throw "not yet implemented";
};
helpers.StringSketch.include = function(str,needle) {
	throw "not yet implemented";
};
helpers.StringSketch.isBlank = function(str) {
	throw "not yet implemented";
};
helpers.StringSketch.javaId = function(str) {
	if(str == null) str = "";
	str = str.toLowerCase();
	str = helpers.StringSketch.clean(str);
	var r = new EReg(" ","g");
	str = r.replace(str,"_");
	var r2 = new EReg("[^a-z0-9_]","g");
	return r2.replace(str,"");
	return str;
};
helpers.StringSketch.split = function(str,modifier) {
	throw "not yet implemented";
};
helpers.StringSketch.startsWith = function(str,starts) {
	var str1;
	if(str == null) str1 = "null"; else str1 = "" + str;
	if(starts == "") return true;
	if(str1 == null || starts == null) return false;
	var $is = str1.length >= starts.length && HxOverrides.substr(str1,0,starts.length) == starts;
	return $is;
};
helpers.StringSketch.titleize = function(str) {
	throw "not yet implemented";
};
helpers.StringSketch.trim = function(str,characters) {
	throw "not yet implemented";
};
helpers.StringSketch.getTextTag = function(text) {
	var textname;
	if(text == null) textname = "null"; else textname = "" + text;
	var tags = new EReg("^<(a|blockquote|div|h1|h2|h3|h4|h5|h6|label|p|span)>","");
	if(tags.match(textname)) {
		var name = tags.replace(textname,"");
		var tag = tags.matched(0);
		var tagName = tags.matched(1);
		return { name : name, tag : tag, tagName : tagName};
	}
	return { name : textname, tag : "<p>", tagName : "p"};
};
var js = {};
js.Boot = function() { };
$hxClasses["js.Boot"] = js.Boot;
js.Boot.__name__ = ["js","Boot"];
js.Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js.Boot.__trace = function(v,i) {
	var msg;
	if(i != null) msg = i.fileName + ":" + i.lineNumber + ": "; else msg = "";
	msg += js.Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js.Boot.__string_rec(v1,"");
		}
	}
	var d;
	if(typeof(document) != "undefined" && (d = document.getElementById("haxe:trace")) != null) d.innerHTML += js.Boot.__unhtml(msg) + "<br/>"; else if(typeof console != "undefined" && console.log != null) console.log(msg);
};
js.Boot.__clear_trace = function() {
	var d = document.getElementById("haxe:trace");
	if(d != null) d.innerHTML = "";
};
js.Boot.isClass = function(o) {
	return o.__name__;
};
js.Boot.isEnum = function(e) {
	return e.__ename__;
};
js.Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) return Array; else return o.__class__;
};
js.Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) str += "," + js.Boot.__string_rec(o[i],s); else str += js.Boot.__string_rec(o[i],s);
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g2 = 0;
			while(_g2 < l) {
				var i2 = _g2++;
				str1 += (i2 > 0?",":"") + js.Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString) {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) str2 += ", \n";
		str2 += s + k + " : " + js.Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
js.Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js.Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js.Boot.__interfLoop(cc.__super__,cl);
};
js.Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Array:
		return (o instanceof Array) && o.__enum__ == null;
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) return true;
				if(js.Boot.__interfLoop(js.Boot.getClass(o),cl)) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
};
js.Boot.__cast = function(o,t) {
	if(js.Boot.__instanceof(o,t)) return o; else throw "Cannot cast " + Std.string(o) + " to " + Std.string(t);
};
var ns = {};
ns.Response = $hxClasses["ns.Response"] = { __ename__ : ["ns","Response"], __constructs__ : ["YES","NO"] };
ns.Response.YES = ["YES",0];
ns.Response.YES.toString = $estr;
ns.Response.YES.__enum__ = ns.Response;
ns.Response.NO = ["NO",1];
ns.Response.NO.toString = $estr;
ns.Response.NO.__enum__ = ns.Response;
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
Global.doc = doc;
Global.selection = selection;
if(Array.prototype.indexOf) HxOverrides.indexOf = function(a,o,i) {
	return Array.prototype.indexOf.call(a,o,i);
};
if(Array.prototype.lastIndexOf) HxOverrides.lastIndexOf = function(a1,o1,i1) {
	return Array.prototype.lastIndexOf.call(a1,o1,i1);
};
Math.NaN = Number.NaN;
Math.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;
Math.POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
$hxClasses.Math = Math;
Math.isFinite = function(i) {
	return isFinite(i);
};
Math.isNaN = function(i1) {
	return isNaN(i1);
};
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = ["String"];
$hxClasses.Array = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses.Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
var Void = $hxClasses.Void = { __ename__ : ["Void"]};
if(Array.prototype.map == null) Array.prototype.map = function(f) {
	var a = [];
	var _g1 = 0;
	var _g = this.length;
	while(_g1 < _g) {
		var i = _g1++;
		a[i] = f(this[i]);
	}
	return a;
};
if(Array.prototype.filter == null) Array.prototype.filter = function(f1) {
	var a1 = [];
	var _g11 = 0;
	var _g2 = this.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		var e = this[i1];
		if(f1(e)) a1.push(e);
	}
	return a1;
};
Xml.Element = "element";
Xml.PCData = "pcdata";
Xml.CData = "cdata";
Xml.Comment = "comment";
Xml.DocType = "doctype";
Xml.ProcessingInstruction = "processingInstruction";
Xml.Document = "document";
BasicExporter.lindent = "";
BasicExporter.pindent = "";
BasicExporter.aindent = "";
Global.tracable = ["helpers.Artboard"];
de.polygonal.ds.HashKey._counter = 0;
exp.ExportFactory.one = false;
exp.ExportSlice.one = false;
haxe.ds.ObjectMap.count = 0;
haxe.xml.Parser.escapes = (function($this) {
	var $r;
	var h = new haxe.ds.StringMap();
	h.set("lt","<");
	h.set("gt",">");
	h.set("amp","&");
	h.set("quot",'"');
	h.set("apos","'");
	h.set("nbsp",String.fromCharCode(160));
	$r = h;
	return $r;
}(this));
helpers.Artboard.one = false;
helpers.Artboard.hiddenLayers = new haxe.ds.IntMap();
helpers.Layer.mapName = new haxe.ds.IntMap();
helpers.Slice.one = false;
BasicExporter.main();
})();
