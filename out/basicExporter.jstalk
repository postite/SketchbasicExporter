// basicExporter (ctrl alt command e) 
(function () { "use strict";
var $estr = function() { return js.Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var BasicExporter = function() {
	log("start");
	var indent = "*";
	this.tree = new de.polygonal.ds.TreeNode(new exp.ExportContainer(null));
	this.builder = new de.polygonal.ds.TreeBuilder(this.tree);
	var $it0 = (function($this) {
		var $r;
		var _this = Global.doc.pages();
		$r = new NativeArrayIterator(_this);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var page = $it0.next();
		Global.doc.setCurrentPage(page);
		var _this = this.builder;
		var x = exp.ExportFactory.create(page);
		_this._child = new de.polygonal.ds.TreeNode(x,_this._node);
		_this._child;
		var m = indent + page.name();
		log(m);
		this.ArtboardsLoop(page.artboards());
	}
	log("xml");
	try {
		var xml = Xml.createElement("div");
		var xm = this.toXml(this.tree,xml);
		var m = xm.toString();
		log(m);
	} catch( msg ) {
		var m = "xml error" + Std.string(msg);
		log(m);
	}
	log("html");
	try {
		var xml = Xml.createElement("div");
		var html = new HTMLExporter();
		html.toHtml(this.tree,xml);
		html["export"]();
	} catch( msg ) {
		var m = "xml error" + Std.string(msg);
		log(m);
	}
	log("json");
	try {
		var obj = { };
		var jon = this.toJson(this.tree,obj);
		var m = JSON.stringify(jon);
		log(m);
		this.exportjson(JSON.stringify(jon));
	} catch( msg ) {
		var m = "error" + Std.string(msg);
		log(m);
	}
	try {
		var obj = { };
		var framer = new FramerExporter();
		var jsonframe = framer.toJson(this.tree,obj);
		this.exportFramer(JSON.stringify(jsonframe));
	} catch( msg ) {
		var m = "error for framer" + Std.string(msg);
		log(m);
	}
	log("done");
};
BasicExporter.__name__ = true;
BasicExporter.main = function() {
	var app = new BasicExporter();
};
BasicExporter.prototype = {
	ArtboardsLoop: function(arts) {
		var _this = this.builder;
		if(_this._child != null) {
			_this._node = _this._child;
			if(_this._node != null) _this._child = _this._node.children;
			true;
		} else false;
		log("ArtboardsLoop");
		var indent = "+";
		var native = new NativeArrayIterator(arts).haxeArray();
		native.reverse();
		var _g = 0;
		while(_g < native.length) {
			var art = native[_g];
			++_g;
			var _this = this.builder;
			var x = exp.ExportFactory.create(art);
			_this._child = new de.polygonal.ds.TreeNode(x,_this._node);
			_this._child;
			var m = indent + art.name();
			log(m);
			this.bigloop(art.layers());
		}
		var _this = this.builder;
		if(_this._node.parent != null) {
			_this._node = _this._node.parent;
			if(_this._node != null) _this._child = _this._node.children;
			true;
		} else false;
	}
	,bigloop: function(layers,indent) {
		var _this = this.builder;
		if(_this._child != null) {
			_this._node = _this._child;
			if(_this._node != null) _this._child = _this._node.children;
			true;
		} else false;
		if(indent == null) indent = "-"; else indent = indent + "-";
		var native = new NativeArrayIterator(layers).haxeArray();
		native.reverse();
		var _g = 0;
		while(_g < native.length) {
			var layer = native[_g];
			++_g;
			var exported = exp.ExportFactory.create(layer)["export"]();
			var m = "------------layer---------------" + layer.name();
			var p = { fileName : "BasicExporter.hx", lineNumber : 127, className : "BasicExporter", methodName : "bigloop"};
			log(p.className + " " + p.lineNumber + "  " + Std.string(m));
			if(exported != null) {
				var p = { fileName : "BasicExporter.hx", lineNumber : 129, className : "BasicExporter", methodName : "bigloop"};
				log(p.className + " " + p.lineNumber + "  " + Std.string("---------------------------" + exported.name));
				var _this = this.builder;
				_this._child = new de.polygonal.ds.TreeNode(exported,_this._node);
				_this._child;
				var m = indent + layer.name();
				log(m);
				if(helpers.Layer.isGroup(layer) && !((exported.behaviour & 1 << exp.Behave.Flat[1]) != 0)) this.bigloop(layer.layers(),indent);
			}
		}
		var _this = this.builder;
		if(_this._node.parent != null) {
			_this._node = _this._node.parent;
			if(_this._node != null) _this._child = _this._node.children;
			true;
		} else false;
	}
	,toXml: function(tree,xml) {
		var $it0 = tree.childIterator();
		while( $it0.hasNext() ) {
			var node = $it0.next();
			var castednode;
			castednode = js.Boot.__cast(node , exp.ExportLayer);
			var treeNode = tree.find(node);
			var _node = null;
			var p = { fileName : "BasicExporter.hx", lineNumber : 168, className : "BasicExporter", methodName : "toXml"};
			log(p.className + " " + p.lineNumber + "  " + Std.string(node.type));
			var _g = node.type;
			switch(_g[1]) {
			case 0:
				_node = Xml.createElement("page");
				break;
			case 1:
				_node = Xml.createElement("Artboard");
				break;
			default:
				_node = Xml.createElement("layer");
			}
			_node.set("name",node.name);
			var _g = node.type;
			switch(_g[1]) {
			case 0:
				_node.set("class","page");
				break;
			case 1:
				_node.set("class","artboard");
				break;
			case 2:
				_node.set("class","text");
				_node.insertChild(Xml.createCData((js.Boot.__cast(node , exp.ExportText)).text.text),0);
				break;
			case 3:
				_node.set("class","image");
				var img = Xml.createElement("img");
				img.set("src",node.src);
				_node.insertChild(img,0);
				break;
			case 4:
				_node.set("class","container");
				break;
			}
			xml.insertChild(_node,0);
			if(treeNode.children != null) this.toXml(treeNode,_node);
		}
		return xml;
	}
	,toJson: function(tree,obj) {
		if(obj.children == null) obj.children = [];
		var $it0 = tree.childIterator();
		while( $it0.hasNext() ) {
			var node = $it0.next();
			var treeNode = tree.find(node);
			obj.children.push(node.toObj());
			var _g = node.type;
			if(treeNode.children != null) this.toJson(treeNode,obj);
		}
		return obj;
	}
	,exportjson: function(content) {
		var path = helpers.Document.dir(Global.doc) + "/view/" + Global.doc.displayName() + ".json";
		var nsContent = NSString.stringWithString(content);
		nsContent.writeToFile_atomically(path,false);
	}
	,exportFramer: function(content) {
		var path = helpers.Document.dir(Global.doc) + "/view/framer-" + Global.doc.displayName() + ".json";
		var nsContent = NSString.stringWithString(content);
		nsContent.writeToFile_atomically(path,false);
	}
	,__class__: BasicExporter
};
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) this.r.lastIndex = 0;
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) return this.r.m[n]; else throw "EReg::matched";
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,__class__: EReg
};
var FramerExporter = function() {
	exp.ExportFactory.extract = function(name) {
		var flags = 0;
		var _g = exp.ExportFactory.beginWith(name);
		switch(_g) {
		case "_":
			flags |= 1 << exp.Behave.Flat[1];
			break;
		case "+":
			flags |= 1 << exp.Behave.Exportable[1];
			break;
		default:
			flags &= 268435455 - (1 << exp.Behave.Exportable[1]);
		}
		return flags;
	};
};
FramerExporter.__name__ = true;
FramerExporter.prototype = {
	toJson: function(tree,obj) {
		if(obj.children == null) obj.children = [];
		var $it0 = tree.childIterator();
		while( $it0.hasNext() ) {
			var node = $it0.next();
			var treeNode = tree.find(node);
			var layer = { };
			var _node;
			_node = js.Boot.__cast(node , exp.ExportLayer);
			layer.id = ++this.id;
			layer.name = _node.name;
			var layerframe = { };
			layerframe.height = _node.height;
			layerframe.width = _node.width;
			layerframe.x = _node.relx;
			layerframe.y = _node.rely;
			layerframe.rotation = 0;
			layer.layerFrame = layerframe;
			layer.maskFrame = null;
			layer.imageType = null;
			layer.image = null;
			layer.text = null;
			layer.children = [];
			var _g = node.type;
			switch(_g[1]) {
			case 3:
				var image = { };
				var frame = { };
				frame.x = _node.relx;
				frame.y = _node.rely;
				frame.width = _node.width;
				frame.height = _node.height;
				image.frame = frame;
				image.path = _node.src;
				layer.imageType = "png";
				layer.image = image;
				break;
			case 2:
				layer.text = node.toObject();
				break;
			default:
			}
			obj.children.push(layer);
			if(treeNode.children != null) this.toJson(treeNode,layer);
		}
		return obj;
	}
	,__class__: FramerExporter
};
var Global = function() { };
Global.__name__ = true;
var HTMLExporter = function() {
};
HTMLExporter.__name__ = true;
HTMLExporter.prototype = {
	toHtml: function(tree,xml) {
		var $it0 = tree.childIterator();
		while( $it0.hasNext() ) {
			var node = $it0.next();
			var castednode;
			castednode = js.Boot.__cast(node , exp.ExportLayer);
			var treeNode = tree.find(node);
			var _node = null;
			var p = { fileName : "HTMLExporter.hx", lineNumber : 25, className : "HTMLExporter", methodName : "toHtml"};
			log(p.className + " " + p.lineNumber + "  " + Std.string(node.type));
			var _g = node.type;
			switch(_g[1]) {
			case 0:
				_node = Xml.createElement("section");
				break;
			default:
				_node = Xml.createElement("div");
			}
			_node.set("name",node.name);
			var position = "absolute";
			var _g = node.type;
			switch(_g[1]) {
			case 0:
				_node.set("class","page");
				break;
			case 1:
				_node.set("class","artboard");
				break;
			case 2:
				_node.set("class","text");
				position = "relative";
				var tag = helpers.StringSketch.getTextTag(node.name);
				var texte = (js.Boot.__cast(node , exp.ExportText)).text.text;
				var subXml = Xml.parse("<" + tag.tagName + " class=\"" + tag.name + "\">" + texte + "</" + tag.tagName + ">");
				_node = subXml;
				break;
			case 3:
				_node.set("class","image");
				var img = Xml.createElement("img");
				img.set("src",node.src);
				_node.insertChild(img,0);
				break;
			case 4:
				_node.set("class","container");
				break;
			}
			if(position == "absolute") _node.set("style","position:" + position + ";\n\t\t\t\tleft:" + castednode.relx + "px;\n\t\t\t\ttop:" + castednode.rely + "px;\n\t\t\t\twidth:" + castednode.width + "px;\n\t\t\t\theight:" + castednode.height + "px;");
			xml.insertChild(_node,0);
			if(treeNode.children != null) this.toHtml(treeNode,_node);
		}
		this.html = xml;
		return xml;
	}
	,'export': function() {
		var t = new HtmlView();
		t.title = Global.doc.displayName();
		t.content = this.html.toString();
		var $export = t.execute();
		var path = helpers.Document.dir(Global.doc) + "/view/" + Global.doc.displayName() + ".html";
		var nsContent = NSString.stringWithString($export);
		nsContent.writeToFile_atomically(path,false);
	}
	,__class__: HTMLExporter
};
var erazor = {};
erazor.macro = {};
erazor.macro.Template = function() {
};
erazor.macro.Template.__name__ = true;
erazor.macro.Template.prototype = {
	__class__: erazor.macro.Template
};
var HtmlView = function() {
	erazor.macro.Template.call(this);
};
HtmlView.__name__ = true;
HtmlView.__super__ = erazor.macro.Template;
HtmlView.prototype = $extend(erazor.macro.Template.prototype,{
	execute: function() {
		var __b__ = new StringBuf();
		__b__.b += "\n<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><title>";
		__b__.b += Std.string(this.title);
		__b__.b += "</title></head><body>\n";
		__b__.b += Std.string(this.content);
		__b__.b += "\n</body></html>\n\n\t";
		return __b__.b;
	}
	,__class__: HtmlView
});
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(pos != null && pos != 0 && len != null && len < 0) return "";
	if(len == null) len = s.length;
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) pos = 0;
	} else if(len < 0) len = s.length + len - pos;
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = 0;
	var l = a.length;
	while(i < l) {
		if(a[i] == obj) {
			a.splice(i,1);
			return true;
		}
		i++;
	}
	return false;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
IntIterator.__name__ = true;
IntIterator.prototype = {
	__class__: IntIterator
};
var List = function() {
	this.length = 0;
};
List.__name__ = true;
List.prototype = {
	add: function(item) {
		var x = [item];
		if(this.h == null) this.h = x; else this.q[1] = x;
		this.q = x;
		this.length++;
	}
	,iterator: function() {
		return { h : this.h, hasNext : function() {
			return this.h != null;
		}, next : function() {
			if(this.h == null) return null;
			var x = this.h[0];
			this.h = this.h[1];
			return x;
		}};
	}
	,__class__: List
};
var IMap = function() { };
IMap.__name__ = true;
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.isFunction = function(f) {
	return typeof(f) == "function" && !(f.__name__ || f.__ename__);
};
var NativeArrayIterator = function(ar) {
	this.array = ar;
	this.i = 0;
};
NativeArrayIterator.__name__ = true;
NativeArrayIterator.prototype = {
	next: function() {
		return this.array[this.i++];
	}
	,hasNext: function() {
		return this.i < this.array.length();
	}
	,reset: function() {
		this.i = 0;
	}
	,keys: function() {
		return new IntIterator(0,this.array.length());
	}
	,haxeArray: function() {
		var a = [];
		var $it0 = this;
		while( $it0.hasNext() ) {
			var e = $it0.next();
			a.push(e);
		}
		return a;
	}
	,__class__: NativeArrayIterator
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js.Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) v = parseInt(x);
	if(isNaN(v)) return null;
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = true;
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) return s.split('"').join("&quot;").split("'").join("&#039;"); else return s;
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	return c > 8 && c < 14 || c == 32;
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) r++;
	if(r > 0) return HxOverrides.substr(s,r,l - r); else return s;
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) r++;
	if(r > 0) return HxOverrides.substr(s,0,l - r); else return s;
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Type = function() { };
Type.__name__ = true;
Type.createEnum = function(e,constr,params) {
	var f;
	var v = null;
	try {
		v = e[constr];
	} catch( e1 ) {
	}
	f = v;
	if(f == null) throw "No such constructor " + constr;
	if(Reflect.isFunction(f)) {
		if(params == null) throw "Constructor " + constr + " need parameters";
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) throw "Constructor " + constr + " does not need parameters";
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c = e.__constructs__[index];
	if(c == null) throw index + " is not a valid enum constructor index";
	return Type.createEnum(e,c,params);
};
var XmlType = { __ename__ : true, __constructs__ : [] };
var Xml = function() {
};
Xml.__name__ = true;
Xml.parse = function(str) {
	return haxe.xml.Parser.parse(str);
};
Xml.createElement = function(name) {
	var r = new Xml();
	r.nodeType = Xml.Element;
	r._children = new Array();
	r._attributes = new haxe.ds.StringMap();
	r.set_nodeName(name);
	return r;
};
Xml.createPCData = function(data) {
	var r = new Xml();
	r.nodeType = Xml.PCData;
	r.set_nodeValue(data);
	return r;
};
Xml.createCData = function(data) {
	var r = new Xml();
	r.nodeType = Xml.CData;
	r.set_nodeValue(data);
	return r;
};
Xml.createComment = function(data) {
	var r = new Xml();
	r.nodeType = Xml.Comment;
	r.set_nodeValue(data);
	return r;
};
Xml.createDocType = function(data) {
	var r = new Xml();
	r.nodeType = Xml.DocType;
	r.set_nodeValue(data);
	return r;
};
Xml.createProcessingInstruction = function(data) {
	var r = new Xml();
	r.nodeType = Xml.ProcessingInstruction;
	r.set_nodeValue(data);
	return r;
};
Xml.createDocument = function() {
	var r = new Xml();
	r.nodeType = Xml.Document;
	r._children = new Array();
	return r;
};
Xml.prototype = {
	get_nodeName: function() {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._nodeName;
	}
	,set_nodeName: function(n) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._nodeName = n;
	}
	,set_nodeValue: function(v) {
		if(this.nodeType == Xml.Element || this.nodeType == Xml.Document) throw "bad nodeType";
		return this._nodeValue = v;
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		this._attributes.set(att,value);
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._attributes.exists(att);
	}
	,iterator: function() {
		if(this._children == null) throw "bad nodetype";
		return { cur : 0, x : this._children, hasNext : function() {
			return this.cur < this.x.length;
		}, next : function() {
			return this.x[this.cur++];
		}};
	}
	,addChild: function(x) {
		if(this._children == null) throw "bad nodetype";
		if(x._parent != null) HxOverrides.remove(x._parent._children,x);
		x._parent = this;
		this._children.push(x);
	}
	,insertChild: function(x,pos) {
		if(this._children == null) throw "bad nodetype";
		if(x._parent != null) HxOverrides.remove(x._parent._children,x);
		x._parent = this;
		this._children.splice(pos,0,x);
	}
	,toString: function() {
		if(this.nodeType == Xml.PCData) return StringTools.htmlEscape(this._nodeValue);
		if(this.nodeType == Xml.CData) return "<![CDATA[" + this._nodeValue + "]]>";
		if(this.nodeType == Xml.Comment) return "<!--" + this._nodeValue + "-->";
		if(this.nodeType == Xml.DocType) return "<!DOCTYPE " + this._nodeValue + ">";
		if(this.nodeType == Xml.ProcessingInstruction) return "<?" + this._nodeValue + "?>";
		var s = new StringBuf();
		if(this.nodeType == Xml.Element) {
			s.b += "<";
			s.b += Std.string(this._nodeName);
			var $it0 = this._attributes.keys();
			while( $it0.hasNext() ) {
				var k = $it0.next();
				s.b += " ";
				s.b += Std.string(k);
				s.b += '="';
				var x = this._attributes.get(k);
				s.b += Std.string(x);
				s.b += '"';
			}
			if(this._children.length == 0) {
				s.b += "/>";
				return s.b;
			}
			s.b += ">";
		}
		var $it1 = this.iterator();
		while( $it1.hasNext() ) {
			var x = $it1.next();
			var x1 = x.toString();
			s.b += Std.string(x1);
		}
		if(this.nodeType == Xml.Element) {
			s.b += "</";
			s.b += Std.string(this._nodeName);
			s.b += ">";
		}
		return s.b;
	}
	,__class__: Xml
};
var bs = {};
bs.BomberCommands = function() { };
bs.BomberCommands.__name__ = true;
bs.BomberCommands.getFileFolder = function() {
	var file_url = Global.doc.fileURL();
	var file_path = file_url.path();
	var file_folder = file_path.split(Global.doc.displayName())[0];
	return file_folder;
};
var de = {};
de.polygonal = {};
de.polygonal.ds = {};
de.polygonal.ds.Hashable = function() { };
de.polygonal.ds.Hashable.__name__ = true;
de.polygonal.ds.Collection = function() { };
de.polygonal.ds.Collection.__name__ = true;
de.polygonal.ds.Collection.__interfaces__ = [de.polygonal.ds.Hashable];
de.polygonal.ds.HashKey = function() { };
de.polygonal.ds.HashKey.__name__ = true;
de.polygonal.ds.Itr = function() { };
de.polygonal.ds.Itr.__name__ = true;
de.polygonal.ds.Itr.prototype = {
	__class__: de.polygonal.ds.Itr
};
de.polygonal.ds.TreeBuilder = function(node) {
	this._node = node;
	if(this._node != null) {
		this._child = this._node.children;
		true;
	} else false;
};
de.polygonal.ds.TreeBuilder.__name__ = true;
de.polygonal.ds.TreeBuilder.prototype = {
	__class__: de.polygonal.ds.TreeBuilder
};
de.polygonal.ds.TreeNode = function(x,parent) {
	this.val = x;
	this.parent = parent;
	this.children = null;
	this.prev = null;
	this.next = null;
	this._tail = null;
	this._nextInStack = null;
	this._prevInStack = null;
	if(this.parent != null) {
		parent._extraInfo = parent._extraInfo & 65535 | (parent._extraInfo >>> 16) + 1 << 16;
		if(parent.children != null) {
			var tail = parent._tail;
			tail.next = this;
			this.prev = tail;
			this.next = null;
		} else parent.children = this;
		parent._tail = this;
	}
	this._extraInfo = 0;
	this.key = de.polygonal.ds.HashKey._counter++;
};
de.polygonal.ds.TreeNode.__name__ = true;
de.polygonal.ds.TreeNode.__interfaces__ = [de.polygonal.ds.Collection];
de.polygonal.ds.TreeNode.prototype = {
	find: function(x) {
		var top = this;
		while(top != null) {
			var node = top;
			var top1 = top;
			var tmp = top1;
			top1 = top1._prevInStack;
			if(top1 != null) top1._nextInStack = null;
			tmp._prevInStack = null;
			top = top1;
			if(node.val == x) return node;
			var n = node.children;
			if(n != null) {
				var c = node._tail;
				while(c != null) {
					if(top != null) {
						top._nextInStack = c;
						c._prevInStack = top;
					}
					top = c;
					c = c.prev;
				}
			}
		}
		return null;
	}
	,childIterator: function() {
		return new de.polygonal.ds.ChildTreeIterator(this);
	}
	,__class__: de.polygonal.ds.TreeNode
};
de.polygonal.ds.ChildTreeIterator = function(f) {
	this._f = f;
	{
		this._walker = this._f.children;
		this._hook = null;
		this;
	}
};
de.polygonal.ds.ChildTreeIterator.__name__ = true;
de.polygonal.ds.ChildTreeIterator.__interfaces__ = [de.polygonal.ds.Itr];
de.polygonal.ds.ChildTreeIterator.prototype = {
	hasNext: function() {
		return this._walker != null;
	}
	,next: function() {
		var x = this._walker.val;
		this._hook = this._walker;
		this._walker = this._walker.next;
		return x;
	}
	,__class__: de.polygonal.ds.ChildTreeIterator
};
var exp = {};
exp.Behave = { __ename__ : true, __constructs__ : ["Scale","Exportable","Invisible","Mask","Bounded","Flat"] };
exp.Behave.Scale = ["Scale",0];
exp.Behave.Scale.toString = $estr;
exp.Behave.Scale.__enum__ = exp.Behave;
exp.Behave.Exportable = ["Exportable",1];
exp.Behave.Exportable.toString = $estr;
exp.Behave.Exportable.__enum__ = exp.Behave;
exp.Behave.Invisible = ["Invisible",2];
exp.Behave.Invisible.toString = $estr;
exp.Behave.Invisible.__enum__ = exp.Behave;
exp.Behave.Mask = ["Mask",3];
exp.Behave.Mask.toString = $estr;
exp.Behave.Mask.__enum__ = exp.Behave;
exp.Behave.Bounded = ["Bounded",4];
exp.Behave.Bounded.toString = $estr;
exp.Behave.Bounded.__enum__ = exp.Behave;
exp.Behave.Flat = ["Flat",5];
exp.Behave.Flat.toString = $estr;
exp.Behave.Flat.__enum__ = exp.Behave;
exp.Exportable = function() { };
exp.Exportable.__name__ = true;
exp.Exportable.prototype = {
	__class__: exp.Exportable
};
exp.ExportLayer = function(layer) {
	this.name = layer.name();
	this.orig = layer;
	this.type = exp.ExportTypes.Container;
};
exp.ExportLayer.__name__ = true;
exp.ExportLayer.__interfaces__ = [exp.Exportable];
exp.ExportLayer.prototype = {
	set_relx: function(f) {
		return this.relx = Math.round(f * 100) / 100;
	}
	,set_rely: function(f) {
		return this.rely = Math.round(f * 100) / 100;
	}
	,set_x: function(f) {
		return this.x = Math.round(f * 100) / 100;
	}
	,set_y: function(f) {
		return this.y = Math.round(f * 100) / 100;
	}
	,set_width: function(f) {
		return this.width = Math.round(f * 100) / 100;
	}
	,set_height: function(f) {
		return this.height = Math.round(f * 100) / 100;
	}
	,'export': function() {
		var m = Std.string((this.behaviour & 1 << exp.Behave.Exportable[1]) != 0) + this.orig.name();
		var p = { fileName : "ExportLayer.hx", lineNumber : 39, className : "exp.ExportLayer", methodName : "export"};
		log(p.className + " " + p.lineNumber + "  " + Std.string(m));
		if(this.orig != null && (this.behaviour & 1 << exp.Behave.Exportable[1]) != 0) {
			this.set_x(this.orig.absoluteRect().rulerX());
			this.set_y(this.orig.absoluteRect().rulerY());
			this.set_width(this.orig.frame().width());
			this.set_height(this.orig.frame().height());
			this.set_relx(this.orig.frame().x());
			this.set_rely(this.orig.frame().y());
			try {
				if((this.behaviour & 1 << exp.Behave.Scale[1]) != 0) {
					var m = "-------------------scale" + this.extractScaleFactor(this.name);
					var p = { fileName : "ExportLayer.hx", lineNumber : 49, className : "exp.ExportLayer", methodName : "export"};
					log(p.className + " " + p.lineNumber + "  " + Std.string(m));
				}
				if((this.behaviour & 1 << exp.Behave.Mask[1]) != 0) {
					var p = { fileName : "ExportLayer.hx", lineNumber : 51, className : "exp.ExportLayer", methodName : "export"};
					log(p.className + " " + p.lineNumber + "  " + "-------------------------has mask");
				}
				if(!((this.behaviour & 1 << exp.Behave.Flat[1]) != 0)) this.src = helpers.Layer["export"](this.orig,helpers.Document.dir(Global.doc) + "exported",1); else {
					var p = { fileName : "ExportLayer.hx", lineNumber : 56, className : "exp.ExportLayer", methodName : "export"};
					log(p.className + " " + p.lineNumber + "  " + "-------------------------has flat");
					this.src = helpers.Layer.exportFlat(this.orig,helpers.Document.dir(Global.doc) + "exported",1);
				}
			} catch( err ) {
				var m = "Error=" + Std.string(err);
				log(m);
			}
			return this;
		}
		return null;
	}
	,extractScaleFactor: function(name) {
		var r = new EReg("([*]+\\d+)(((.|,)\\d+)+)?","");
		r.match(name);
		var ext = r.matched(0);
		var p = StringTools.replace(ext,"*","");
		return Std.parseFloat(p);
	}
	,toObj: function() {
		return { name : this.name, x : this.x, y : this.y, width : this.width, height : this.height, src : this.src, text : this.text != null?this.text.toObj():null, relx : this.relx, rely : this.rely, children : []};
	}
	,__class__: exp.ExportLayer
};
exp.ExportContainer = function(layer) {
	if(layer != null) {
		exp.ExportLayer.call(this,layer);
		this.type = exp.ExportTypes.Container;
	}
};
exp.ExportContainer.__name__ = true;
exp.ExportContainer.__interfaces__ = [exp.Exportable];
exp.ExportContainer.__super__ = exp.ExportLayer;
exp.ExportContainer.prototype = $extend(exp.ExportLayer.prototype,{
	__class__: exp.ExportContainer
});
exp.ExportArtBoard = function(layer) {
	exp.ExportContainer.call(this,layer);
	this.type = exp.ExportTypes.ArtBoard;
};
exp.ExportArtBoard.__name__ = true;
exp.ExportArtBoard.__interfaces__ = [exp.Exportable];
exp.ExportArtBoard.__super__ = exp.ExportContainer;
exp.ExportArtBoard.prototype = $extend(exp.ExportContainer.prototype,{
	__class__: exp.ExportArtBoard
});
exp.ExportFactory = function() { };
exp.ExportFactory.__name__ = true;
exp.ExportFactory.create = function(origLayer) {
	var p = { fileName : "ExportFactory.hx", lineNumber : 12, className : "exp.ExportFactory", methodName : "create"};
	log(p.className + " " + p.lineNumber + "  " + "create");
	var klass = helpers.Layer._class(origLayer);
	var flags = exp.ExportFactory.behaviour(origLayer);
	var $export = null;
	log(klass);
	if(klass == MSPage) $export = new exp.ExportPage(origLayer);
	if(klass == MSArtboardGroup) $export = new exp.ExportArtBoard(origLayer);
	if(klass == MSTextLayer) $export = new exp.ExportText(origLayer);
	if(klass == MSShapeGroup) $export = new exp.ExportImage(origLayer);
	if(klass == MSLayerGroup) $export = new exp.ExportContainer(origLayer);
	$export.behaviour = flags;
	return $export;
};
exp.ExportFactory.behaviour = function(orig) {
	var name = orig.name();
	var behaviour = exp.ExportFactory.extract(name);
	return behaviour;
};
exp.ExportFactory.extract = function(name) {
	var flags = 0;
	var p = { fileName : "ExportFactory.hx", lineNumber : 55, className : "exp.ExportFactory", methodName : "extract"};
	log(p.className + " " + p.lineNumber + "  " + Std.string("extract=" + name));
	var _g = exp.ExportFactory.beginWith(name);
	switch(_g) {
	case "-":
		flags &= 268435455 - (1 << exp.Behave.Exportable[1]);
		break;
	case "+":
		flags |= 1 << exp.Behave.Exportable[1];
		break;
	case "_":
		flags |= 1 << exp.Behave.Flat[1];
		flags |= 1 << exp.Behave.Exportable[1];
		break;
	default:
		flags |= 1 << exp.Behave.Exportable[1];
	}
	if(helpers.StringSketch.startsWith(name,"m")) {
		var p = { fileName : "ExportFactory.hx", lineNumber : 83, className : "exp.ExportFactory", methodName : "extract"};
		log(p.className + " " + p.lineNumber + "  " + "startwith mask");
		flags |= 1 << exp.Behave.Mask[1];
	}
	if(helpers.StringSketch.endsWith(name,"*2")) {
		var p = { fileName : "ExportFactory.hx", lineNumber : 87, className : "exp.ExportFactory", methodName : "extract"};
		log(p.className + " " + p.lineNumber + "  " + "endsWith *n");
		flags |= 1 << exp.Behave.Scale[1];
	}
	return flags;
};
exp.ExportFactory.beginWith = function(phrase) {
	return phrase.charAt(0);
};
exp.ExportImage = function(layer) {
	exp.ExportLayer.call(this,layer);
	this.type = exp.ExportTypes.Image;
};
exp.ExportImage.__name__ = true;
exp.ExportImage.__interfaces__ = [exp.Exportable];
exp.ExportImage.__super__ = exp.ExportLayer;
exp.ExportImage.prototype = $extend(exp.ExportLayer.prototype,{
	__class__: exp.ExportImage
});
exp.ExportPage = function(layer) {
	exp.ExportContainer.call(this,layer);
	this.type = exp.ExportTypes.Page;
};
exp.ExportPage.__name__ = true;
exp.ExportPage.__interfaces__ = [exp.Exportable];
exp.ExportPage.__super__ = exp.ExportContainer;
exp.ExportPage.prototype = $extend(exp.ExportContainer.prototype,{
	__class__: exp.ExportPage
});
exp.Alignement = { __ename__ : true, __constructs__ : ["Left","Right","Center","Justify"] };
exp.Alignement.Left = ["Left",0];
exp.Alignement.Left.toString = $estr;
exp.Alignement.Left.__enum__ = exp.Alignement;
exp.Alignement.Right = ["Right",1];
exp.Alignement.Right.toString = $estr;
exp.Alignement.Right.__enum__ = exp.Alignement;
exp.Alignement.Center = ["Center",2];
exp.Alignement.Center.toString = $estr;
exp.Alignement.Center.__enum__ = exp.Alignement;
exp.Alignement.Justify = ["Justify",3];
exp.Alignement.Justify.toString = $estr;
exp.Alignement.Justify.__enum__ = exp.Alignement;
exp.ExportText = function(layer) {
	var p = { fileName : "ExportText.hx", lineNumber : 27, className : "exp.ExportText", methodName : "new"};
	log(p.className + " " + p.lineNumber + "  " + "hello text");
	exp.ExportLayer.call(this,layer);
	this.name = this.name + "____text";
};
exp.ExportText.__name__ = true;
exp.ExportText.__interfaces__ = [exp.Exportable];
exp.ExportText.__super__ = exp.ExportLayer;
exp.ExportText.prototype = $extend(exp.ExportLayer.prototype,{
	'export': function() {
		var layer = this.orig;
		this.TP = { };
		this.TP.text = layer.stringValue();
		this.TP.fontSize = layer.fontSize();
		this.TP.fontPostscriptName = "" + layer.fontPostscriptName();
		log("pif");
		try {
			this.TP.color = layer.style().fills().firstObject().color().hexValue();
			this.TP.alpha = layer.style().fills().firstObject().color().alpha();
		} catch( msg ) {
			this.TP.color = "000000";
			this.TP.alpha = 1;
			var m = "error" + Std.string(msg);
			log(m);
		}
		this.TP.textAlignment = this.Align(layer.textAlignment());
		this.TP.characterSpacing = layer.characterSpacing();
		this.TP.lineSpacing = layer.lineSpacing();
		this.TP.toObj = $bind(this,this.toObject);
		this.text = this.TP;
		this.type = exp.ExportTypes.Text;
		return exp.ExportLayer.prototype["export"].call(this);
	}
	,toObject: function() {
		return { text : this.TP.text.toString(), color : this.TP.color.toString(), fontSize : this.TP.fontSize, fontPostscriptName : this.TP.fontPostscriptName, textAlignment : this.TP.textAlignment, characterSpacing : this.TP.characterSpacing, lineSpacing : this.TP.lineSpacing, alpha : Math.round(this.TP.alpha * 100) / 100};
	}
	,Align: function(code) {
		var e = Type.createEnumIndex(exp.Alignement,code);
		return e[0];
	}
	,__class__: exp.ExportText
});
exp.ExportTypes = { __ename__ : true, __constructs__ : ["Page","ArtBoard","Text","Image","Container"] };
exp.ExportTypes.Page = ["Page",0];
exp.ExportTypes.Page.toString = $estr;
exp.ExportTypes.Page.__enum__ = exp.ExportTypes;
exp.ExportTypes.ArtBoard = ["ArtBoard",1];
exp.ExportTypes.ArtBoard.toString = $estr;
exp.ExportTypes.ArtBoard.__enum__ = exp.ExportTypes;
exp.ExportTypes.Text = ["Text",2];
exp.ExportTypes.Text.toString = $estr;
exp.ExportTypes.Text.__enum__ = exp.ExportTypes;
exp.ExportTypes.Image = ["Image",3];
exp.ExportTypes.Image.toString = $estr;
exp.ExportTypes.Image.__enum__ = exp.ExportTypes;
exp.ExportTypes.Container = ["Container",4];
exp.ExportTypes.Container.toString = $estr;
exp.ExportTypes.Container.__enum__ = exp.ExportTypes;
var haxe = {};
haxe.ds = {};
haxe.ds.IntMap = function() {
	this.h = { };
};
haxe.ds.IntMap.__name__ = true;
haxe.ds.IntMap.__interfaces__ = [IMap];
haxe.ds.IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,__class__: haxe.ds.IntMap
};
haxe.ds.StringMap = function() {
	this.h = { };
};
haxe.ds.StringMap.__name__ = true;
haxe.ds.StringMap.__interfaces__ = [IMap];
haxe.ds.StringMap.prototype = {
	set: function(key,value) {
		this.h["$" + key] = value;
	}
	,get: function(key) {
		return this.h["$" + key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty("$" + key);
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key.substr(1));
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe.ds.StringMap
};
haxe.xml = {};
haxe.xml.Parser = function() { };
haxe.xml.Parser.__name__ = true;
haxe.xml.Parser.parse = function(str) {
	var doc = Xml.createDocument();
	haxe.xml.Parser.doParse(str,0,doc);
	return doc;
};
haxe.xml.Parser.doParse = function(str,p,parent) {
	if(p == null) p = 0;
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	while(!(c != c)) {
		switch(state) {
		case 0:
			switch(c) {
			case 10:
				break;
			case 13:
				break;
			case 9:
				break;
			case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			switch(c) {
			case 60:
				state = 0;
				next = 2;
				break;
			default:
				start = p;
				state = 13;
				continue;
			}
			break;
		case 13:
			if(c == 60) {
				var child = Xml.createPCData(buf.b + HxOverrides.substr(str,start,p - start));
				buf = new StringBuf();
				parent.addChild(child);
				nsubs++;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len = p - start;
				buf.b += len == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len);
				state = 18;
				next = 13;
				start = p + 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child);
				nsubs++;
				p += 2;
				state = 1;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") throw "Expected <![CDATA[";
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") throw "Expected <!DOCTYPE";
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) throw "Expected <!--"; else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 63:
				state = 14;
				start = p;
				break;
			case 47:
				if(parent == null) throw "Expected node name";
				start = p + 1;
				state = 0;
				next = 10;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) throw "Expected node name";
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				nsubs++;
				break;
			case 62:
				state = 9;
				nsubs++;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) throw "Expected attribute name";
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) throw "Duplicate attribute";
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			switch(c) {
			case 61:
				state = 0;
				next = 7;
				break;
			default:
				throw "Expected =";
			}
			break;
		case 7:
			switch(c) {
			case 34:
				state = 8;
				start = p;
				break;
			case 39:
				state = 8;
				start = p;
				break;
			default:
				throw "Expected ";
			}
			break;
		case 8:
			if(c == str.charCodeAt(start)) {
				var val = HxOverrides.substr(str,start + 1,p - start - 1);
				xml.set(aname,val);
				state = 0;
				next = 4;
			}
			break;
		case 9:
			p = haxe.xml.Parser.doParse(str,p,xml);
			start = p;
			state = 1;
			break;
		case 11:
			switch(c) {
			case 62:
				state = 1;
				break;
			default:
				throw "Expected >";
			}
			break;
		case 12:
			switch(c) {
			case 62:
				if(nsubs == 0) parent.addChild(Xml.createPCData(""));
				return p;
			default:
				throw "Expected >";
			}
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) throw "Expected node name";
				var v = HxOverrides.substr(str,start,p - start);
				if(v != parent.get_nodeName()) throw "Expected </" + parent.get_nodeName() + ">";
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) nbrackets++; else if(c == 93) nbrackets--; else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				state = 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				p++;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var i;
					if(s.charCodeAt(1) == 120) i = Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)); else i = Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					var x = String.fromCharCode(i);
					buf.b += Std.string(x);
				} else if(!haxe.xml.Parser.escapes.exists(s)) buf.b += Std.string("&" + s + ";"); else {
					var x = haxe.xml.Parser.escapes.get(s);
					buf.b += Std.string(x);
				}
				start = p + 1;
				state = next;
			}
			break;
		}
		var index = ++p;
		c = str.charCodeAt(index);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) parent.addChild(Xml.createPCData(buf.b + HxOverrides.substr(str,start,p - start)));
		return p;
	}
	throw "Unexpected end";
};
var helpers = {};
helpers.Artboard = function() { };
helpers.Artboard.__name__ = true;
helpers.Artboard.hideOtherLayers = function(a,currentLayer,withChilds) {
	if(withChilds == null) withChilds = true;
	var parents = [];
	var node = currentLayer.parentGroup();
	while(node != a) {
		parents.push(node);
		node = node.parentGroup();
	}
	var $it0 = (function($this) {
		var $r;
		var _this = a.layers();
		$r = new NativeArrayIterator(_this);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var layer = $it0.next();
		if(currentLayer != layer) {
			if(withChilds) {
				if(layer.isVisible) try {
					layer.isVisible = false;
				} catch( err ) {
					var p = { fileName : "Artboard.hx", lineNumber : 66, className : "helpers.Artboard", methodName : "hideOtherLayers"};
					log(p.className + " " + p.lineNumber + "  " + Std.string(err));
				}
				helpers.Artboard.setHiddenLayers(a,layer);
			} else {
			}
		}
	}
	var _g = 0;
	while(_g < parents.length) {
		var p = parents[_g];
		++_g;
		try {
			p.isVisible = true;
		} catch( err ) {
			var p1 = { fileName : "Artboard.hx", lineNumber : 73, className : "helpers.Artboard", methodName : "hideOtherLayers"};
			log(p1.className + " " + p1.lineNumber + "  " + Std.string(err));
		}
	}
	parents = null;
};
helpers.Artboard.showHiddenLayers = function(a) {
	var $it0 = helpers.Artboard.getHiddenLayers(a).iterator();
	while( $it0.hasNext() ) {
		var hidden = $it0.next();
		hidden.isVisible = true;
	}
};
helpers.Artboard.getHiddenLayers = function(a) {
	var key = a.hash();
	return helpers.Artboard.hiddenLayers.get(key);
};
helpers.Artboard.setHiddenLayers = function(a,hiddenLayer) {
	if(helpers.Artboard.getHiddenLayers(a) == null) {
		var key = a.hash();
		var value = new List();
		helpers.Artboard.hiddenLayers.set(key,value);
	}
	var liste = null;
	if((function($this) {
		var $r;
		var key = a.hash();
		$r = helpers.Artboard.hiddenLayers.get(key);
		return $r;
	}(this)) != null) {
		var key = a.hash();
		liste = helpers.Artboard.hiddenLayers.get(key);
	} else liste = new List();
	liste.add(hiddenLayer);
	var key = a.hash();
	helpers.Artboard.hiddenLayers.set(key,liste);
};
helpers.Document = function() { };
helpers.Document.__name__ = true;
helpers.Document.dir = function(d) {
	return bs.BomberCommands.getFileFolder();
};
helpers.Layer = function() { };
helpers.Layer.__name__ = true;
helpers.Layer._class = function(layer) {
	return layer.class();
};
helpers.Layer.isGroup = function(l) {
	var klass = helpers.Layer._class(l);
	return klass == MSLayerGroup;
};
helpers.Layer["export"] = function(layer,path,factor) {
	path = helpers.StringSketch.cleanPath(path);
	var artboard = layer.parentArtboard();
	helpers.Artboard.hideOtherLayers(artboard,layer);
	path = path + "/" + helpers.StringSketch.clean(layer.name()) + ".png";
	if(factor != null) factor = factor; else factor = 1;
	var slice = helpers.Layer.withFactor(layer,factor);
	Global.doc.saveArtboardOrSlice_toFile(slice,path);
	try {
		helpers.Artboard.showHiddenLayers(artboard);
	} catch( msg ) {
		var p = { fileName : "Layer.hx", lineNumber : 68, className : "helpers.Layer", methodName : "export"};
		log(p.className + " " + p.lineNumber + "  " + Std.string(msg));
	}
	return path;
};
helpers.Layer.exportFlat = function(layer,path,factor) {
	return helpers.Layer["export"](layer,path,factor);
};
helpers.Layer.withFactor = function(layer,factor) {
	var copy = layer.duplicate();
	var frame = copy.frame();
	var rect = null;
	try {
		rect = copy.rectByAccountingForStyleSize(copy.absoluteRect().rect());
	} catch( msg ) {
		var p = { fileName : "Layer.hx", lineNumber : 83, className : "helpers.Layer", methodName : "withFactor"};
		log(p.className + " " + p.lineNumber + "  " + Std.string(msg));
	}
	var slice = MSSlice.sliceWithRect_scale(rect,factor);
	log(copy);
	try {
		copy.removeFromParent();
	} catch( msg ) {
		log(msg);
	}
	return slice;
};
helpers.StringSketch = function() { };
helpers.StringSketch.__name__ = true;
helpers.StringSketch.cleanPath = function(str) {
	var r = new EReg("/+$","");
	return r.replace(str,"");
};
helpers.StringSketch.clean = function(str) {
	var r = new EReg("\\s+","g");
	var trimed = StringTools.trim(str);
	return r.replace(trimed," ");
};
helpers.StringSketch.endsWith = function(str,ends) {
	if(ends == "") return true;
	if(str == null || ends == null) return false;
	str = Std.string(str);
	ends = Std.string(ends);
	return str.length >= ends.length && HxOverrides.substr(str,str.length - ends.length,null) == ends;
};
helpers.StringSketch.startsWith = function(str,starts) {
	var str1 = Std.string(str);
	if(starts == "") return true;
	if(str1 == null || starts == null) return false;
	var is = str1.length >= starts.length && HxOverrides.substr(str1,0,starts.length) == starts;
	return is;
};
helpers.StringSketch.getTextTag = function(text) {
	var textname = Std.string(text);
	var tags = new EReg("^<(a|blockquote|div|h1|h2|h3|h4|h5|h6|label|p|span)>","");
	if(tags.match(textname)) {
		var name = tags.replace(textname,"");
		var tag = tags.matched(0);
		var tagName = tags.matched(1);
		return { name : name, tag : tag, tagName : tagName};
	}
	return { name : textname, tag : "<p>", tagName : "p"};
};
var js = {};
js.Boot = function() { };
js.Boot.__name__ = true;
js.Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) str += "," + js.Boot.__string_rec(o[i],s); else str += js.Boot.__string_rec(o[i],s);
				}
				return str + ")";
			}
			var l = o.length;
			var i;
			var str = "[";
			s += "\t";
			var _g = 0;
			while(_g < l) {
				var i1 = _g++;
				str += (i1 > 0?",":"") + js.Boot.__string_rec(o[i1],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString) {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) str += ", \n";
		str += s + k + " : " + js.Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
js.Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js.Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js.Boot.__interfLoop(cc.__super__,cl);
};
js.Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					if(cl == Array) return o.__enum__ == null;
					return true;
				}
				if(js.Boot.__interfLoop(o.__class__,cl)) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
};
js.Boot.__cast = function(o,t) {
	if(js.Boot.__instanceof(o,t)) return o; else throw "Cannot cast " + Std.string(o) + " to " + Std.string(t);
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
Global.doc = doc;
Global.selection = selection;
if(Array.prototype.indexOf) HxOverrides.remove = function(a,o) {
	var i = a.indexOf(o);
	if(i == -1) return false;
	a.splice(i,1);
	return true;
};
Math.NaN = Number.NaN;
Math.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;
Math.POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
Math.isFinite = function(i) {
	return isFinite(i);
};
Math.isNaN = function(i) {
	return isNaN(i);
};
String.prototype.__class__ = String;
String.__name__ = true;
Array.prototype.__class__ = Array;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
Xml.Element = "element";
Xml.PCData = "pcdata";
Xml.CData = "cdata";
Xml.Comment = "comment";
Xml.DocType = "doctype";
Xml.ProcessingInstruction = "processingInstruction";
Xml.Document = "document";
HtmlView.__meta__ = { obj : { template : ["\n<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><title>@title</title></head><body>\n@content\n</body></html>\n\n\t"]}};
de.polygonal.ds.HashKey._counter = 0;
haxe.xml.Parser.escapes = (function($this) {
	var $r;
	var h = new haxe.ds.StringMap();
	h.set("lt","<");
	h.set("gt",">");
	h.set("amp","&");
	h.set("quot",'"');
	h.set("apos","'");
	h.set("nbsp",String.fromCharCode(160));
	$r = h;
	return $r;
}(this));
helpers.Artboard.hiddenLayers = new haxe.ds.IntMap();
BasicExporter.main();
})();
